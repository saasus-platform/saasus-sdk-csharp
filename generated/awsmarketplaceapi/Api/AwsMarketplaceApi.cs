/*
 * SaaSus AWS Marketplace API Schema
 *
 * SaaSus AWS Marketplace API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using awsmarketplaceapi.Client;
using awsmarketplaceapi.Model;

namespace awsmarketplaceapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAwsMarketplaceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Create customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomerParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        Customer CreateCustomer(CreateCustomerParam createCustomerParam = default(CreateCustomerParam), int operationIndex = 0);

        /// <summary>
        /// Create customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Create customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomerParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> CreateCustomerWithHttpInfo(CreateCustomerParam createCustomerParam = default(CreateCustomerParam), int operationIndex = 0);
        /// <summary>
        /// Obtain product publication status from AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Retrieve the product&#39;s publication status from AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CatalogEntityVisibility</returns>
        CatalogEntityVisibility GetCatalogEntityVisibility(int operationIndex = 0);

        /// <summary>
        /// Obtain product publication status from AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Retrieve the product&#39;s publication status from AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CatalogEntityVisibility</returns>
        ApiResponse<CatalogEntityVisibility> GetCatalogEntityVisibilityWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get the link to create the AWS CloudFormation stack
        /// </summary>
        /// <remarks>
        /// Get the CloudFormation Quick Create link. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFormationLaunchStackLink</returns>
        CloudFormationLaunchStackLink GetCloudFormationLaunchStackLink(int operationIndex = 0);

        /// <summary>
        /// Get the link to create the AWS CloudFormation stack
        /// </summary>
        /// <remarks>
        /// Get the CloudFormation Quick Create link. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFormationLaunchStackLink</returns>
        ApiResponse<CloudFormationLaunchStackLink> GetCloudFormationLaunchStackLinkWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Get customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        Customer GetCustomer(string customerIdentifier, int operationIndex = 0);

        /// <summary>
        /// Get customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Get customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        ApiResponse<Customer> GetCustomerWithHttpInfo(string customerIdentifier, int operationIndex = 0);
        /// <summary>
        /// Get a list of customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Get a list of customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantIds">指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customers</returns>
        Customers GetCustomers(List<string> tenantIds = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// Get a list of customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Get a list of customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantIds">指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customers</returns>
        ApiResponse<Customers> GetCustomersWithHttpInfo(List<string> tenantIds = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// Get AWS Marketplace Listing Status
        /// </summary>
        /// <remarks>
        /// Get AWS Marketplace Listing Status. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetListingStatusResult</returns>
        GetListingStatusResult GetListingStatus(int operationIndex = 0);

        /// <summary>
        /// Get AWS Marketplace Listing Status
        /// </summary>
        /// <remarks>
        /// Get AWS Marketplace Listing Status. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetListingStatusResult</returns>
        ApiResponse<GetListingStatusResult> GetListingStatusWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Obtain plan information to link to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Obtain plan information to link to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName">AWS Marketplace linked plan name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plan</returns>
        Plan GetPlanByPlanName(string planName, int operationIndex = 0);

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Obtain plan information to link to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName">AWS Marketplace linked plan name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plan</returns>
        ApiResponse<Plan> GetPlanByPlanNameWithHttpInfo(string planName, int operationIndex = 0);
        /// <summary>
        /// Obtain plan information to link to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Obtain plan information to link to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plans</returns>
        Plans GetPlans(int operationIndex = 0);

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Obtain plan information to link to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plans</returns>
        ApiResponse<Plans> GetPlansWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get AWS Marketplace Settings
        /// </summary>
        /// <remarks>
        /// Get AWS Marketplace Settings. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Settings</returns>
        Settings GetSettings(int operationIndex = 0);

        /// <summary>
        /// Get AWS Marketplace Settings
        /// </summary>
        /// <remarks>
        /// Get AWS Marketplace Settings. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Settings</returns>
        ApiResponse<Settings> GetSettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Save plan information to be linked to AWSMarketplace
        /// </summary>
        /// <remarks>
        /// Save plan information to be linked to AWSMarketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePlanParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SavePlan(SavePlanParam savePlanParam = default(SavePlanParam), int operationIndex = 0);

        /// <summary>
        /// Save plan information to be linked to AWSMarketplace
        /// </summary>
        /// <remarks>
        /// Save plan information to be linked to AWSMarketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePlanParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SavePlanWithHttpInfo(SavePlanParam savePlanParam = default(SavePlanParam), int operationIndex = 0);
        /// <summary>
        /// Sync AWS Marketplace customer information to SaaSus
        /// </summary>
        /// <remarks>
        /// Sync AWS Marketplace customer information to SaaSus. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SyncCustomer(string customerIdentifier, int operationIndex = 0);

        /// <summary>
        /// Sync AWS Marketplace customer information to SaaSus
        /// </summary>
        /// <remarks>
        /// Sync AWS Marketplace customer information to SaaSus. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncCustomerWithHttpInfo(string customerIdentifier, int operationIndex = 0);
        /// <summary>
        /// Update AWS Marketplace Listing Status
        /// </summary>
        /// <remarks>
        /// Update AWS Marketplace Listing Status. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateListingStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateListingStatus(UpdateListingStatusParam updateListingStatusParam = default(UpdateListingStatusParam), int operationIndex = 0);

        /// <summary>
        /// Update AWS Marketplace Listing Status
        /// </summary>
        /// <remarks>
        /// Update AWS Marketplace Listing Status. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateListingStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateListingStatusWithHttpInfo(UpdateListingStatusParam updateListingStatusParam = default(UpdateListingStatusParam), int operationIndex = 0);
        /// <summary>
        /// Update AWS Marketplace Settings
        /// </summary>
        /// <remarks>
        /// Update AWS Marketplace Settings. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateSettings(UpdateSettingsParam updateSettingsParam = default(UpdateSettingsParam), int operationIndex = 0);

        /// <summary>
        /// Update AWS Marketplace Settings
        /// </summary>
        /// <remarks>
        /// Update AWS Marketplace Settings. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSettingsWithHttpInfo(UpdateSettingsParam updateSettingsParam = default(UpdateSettingsParam), int operationIndex = 0);
        /// <summary>
        /// Verify Registration Token
        /// </summary>
        /// <remarks>
        /// Verify Registration Token. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyRegistrationTokenParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void VerifyRegistrationToken(VerifyRegistrationTokenParam verifyRegistrationTokenParam = default(VerifyRegistrationTokenParam), int operationIndex = 0);

        /// <summary>
        /// Verify Registration Token
        /// </summary>
        /// <remarks>
        /// Verify Registration Token. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyRegistrationTokenParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VerifyRegistrationTokenWithHttpInfo(VerifyRegistrationTokenParam verifyRegistrationTokenParam = default(VerifyRegistrationTokenParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAwsMarketplaceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Create customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomerParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> CreateCustomerAsync(CreateCustomerParam createCustomerParam = default(CreateCustomerParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Create customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomerParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> CreateCustomerWithHttpInfoAsync(CreateCustomerParam createCustomerParam = default(CreateCustomerParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Obtain product publication status from AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Retrieve the product&#39;s publication status from AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CatalogEntityVisibility</returns>
        System.Threading.Tasks.Task<CatalogEntityVisibility> GetCatalogEntityVisibilityAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Obtain product publication status from AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Retrieve the product&#39;s publication status from AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CatalogEntityVisibility)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogEntityVisibility>> GetCatalogEntityVisibilityWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the link to create the AWS CloudFormation stack
        /// </summary>
        /// <remarks>
        /// Get the CloudFormation Quick Create link. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFormationLaunchStackLink</returns>
        System.Threading.Tasks.Task<CloudFormationLaunchStackLink> GetCloudFormationLaunchStackLinkAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the link to create the AWS CloudFormation stack
        /// </summary>
        /// <remarks>
        /// Get the CloudFormation Quick Create link. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFormationLaunchStackLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudFormationLaunchStackLink>> GetCloudFormationLaunchStackLinkWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Get customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        System.Threading.Tasks.Task<Customer> GetCustomerAsync(string customerIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Get customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customer>> GetCustomerWithHttpInfoAsync(string customerIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a list of customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Get a list of customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantIds">指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customers</returns>
        System.Threading.Tasks.Task<Customers> GetCustomersAsync(List<string> tenantIds = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of customer information to be linked to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Get a list of customer information to be linked to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantIds">指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customers)</returns>
        System.Threading.Tasks.Task<ApiResponse<Customers>> GetCustomersWithHttpInfoAsync(List<string> tenantIds = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get AWS Marketplace Listing Status
        /// </summary>
        /// <remarks>
        /// Get AWS Marketplace Listing Status. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetListingStatusResult</returns>
        System.Threading.Tasks.Task<GetListingStatusResult> GetListingStatusAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get AWS Marketplace Listing Status
        /// </summary>
        /// <remarks>
        /// Get AWS Marketplace Listing Status. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetListingStatusResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListingStatusResult>> GetListingStatusWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Obtain plan information to link to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Obtain plan information to link to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName">AWS Marketplace linked plan name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plan</returns>
        System.Threading.Tasks.Task<Plan> GetPlanByPlanNameAsync(string planName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Obtain plan information to link to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName">AWS Marketplace linked plan name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plan>> GetPlanByPlanNameWithHttpInfoAsync(string planName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Obtain plan information to link to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Obtain plan information to link to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plans</returns>
        System.Threading.Tasks.Task<Plans> GetPlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace
        /// </summary>
        /// <remarks>
        /// Obtain plan information to link to AWS Marketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plans)</returns>
        System.Threading.Tasks.Task<ApiResponse<Plans>> GetPlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get AWS Marketplace Settings
        /// </summary>
        /// <remarks>
        /// Get AWS Marketplace Settings. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Settings</returns>
        System.Threading.Tasks.Task<Settings> GetSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get AWS Marketplace Settings
        /// </summary>
        /// <remarks>
        /// Get AWS Marketplace Settings. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        System.Threading.Tasks.Task<ApiResponse<Settings>> GetSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Save plan information to be linked to AWSMarketplace
        /// </summary>
        /// <remarks>
        /// Save plan information to be linked to AWSMarketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePlanParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SavePlanAsync(SavePlanParam savePlanParam = default(SavePlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Save plan information to be linked to AWSMarketplace
        /// </summary>
        /// <remarks>
        /// Save plan information to be linked to AWSMarketplace. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePlanParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SavePlanWithHttpInfoAsync(SavePlanParam savePlanParam = default(SavePlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sync AWS Marketplace customer information to SaaSus
        /// </summary>
        /// <remarks>
        /// Sync AWS Marketplace customer information to SaaSus. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncCustomerAsync(string customerIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sync AWS Marketplace customer information to SaaSus
        /// </summary>
        /// <remarks>
        /// Sync AWS Marketplace customer information to SaaSus. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncCustomerWithHttpInfoAsync(string customerIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update AWS Marketplace Listing Status
        /// </summary>
        /// <remarks>
        /// Update AWS Marketplace Listing Status. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateListingStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateListingStatusAsync(UpdateListingStatusParam updateListingStatusParam = default(UpdateListingStatusParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update AWS Marketplace Listing Status
        /// </summary>
        /// <remarks>
        /// Update AWS Marketplace Listing Status. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateListingStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateListingStatusWithHttpInfoAsync(UpdateListingStatusParam updateListingStatusParam = default(UpdateListingStatusParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update AWS Marketplace Settings
        /// </summary>
        /// <remarks>
        /// Update AWS Marketplace Settings. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSettingsAsync(UpdateSettingsParam updateSettingsParam = default(UpdateSettingsParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update AWS Marketplace Settings
        /// </summary>
        /// <remarks>
        /// Update AWS Marketplace Settings. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSettingsWithHttpInfoAsync(UpdateSettingsParam updateSettingsParam = default(UpdateSettingsParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify Registration Token
        /// </summary>
        /// <remarks>
        /// Verify Registration Token. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyRegistrationTokenParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VerifyRegistrationTokenAsync(VerifyRegistrationTokenParam verifyRegistrationTokenParam = default(VerifyRegistrationTokenParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify Registration Token
        /// </summary>
        /// <remarks>
        /// Verify Registration Token. 
        /// </remarks>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyRegistrationTokenParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerifyRegistrationTokenWithHttpInfoAsync(VerifyRegistrationTokenParam verifyRegistrationTokenParam = default(VerifyRegistrationTokenParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAwsMarketplaceApi : IAwsMarketplaceApiSync, IAwsMarketplaceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AwsMarketplaceApi : IAwsMarketplaceApi
    {
        private awsmarketplaceapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AwsMarketplaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AwsMarketplaceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AwsMarketplaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AwsMarketplaceApi(string basePath)
        {
            this.Configuration = awsmarketplaceapi.Client.Configuration.MergeConfigurations(
                awsmarketplaceapi.Client.GlobalConfiguration.Instance,
                new awsmarketplaceapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new awsmarketplaceapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new awsmarketplaceapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = awsmarketplaceapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AwsMarketplaceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AwsMarketplaceApi(awsmarketplaceapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = awsmarketplaceapi.Client.Configuration.MergeConfigurations(
                awsmarketplaceapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new awsmarketplaceapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new awsmarketplaceapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = awsmarketplaceapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AwsMarketplaceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AwsMarketplaceApi(awsmarketplaceapi.Client.ISynchronousClient client, awsmarketplaceapi.Client.IAsynchronousClient asyncClient, awsmarketplaceapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = awsmarketplaceapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public awsmarketplaceapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public awsmarketplaceapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public awsmarketplaceapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public awsmarketplaceapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create customer information to be linked to AWS Marketplace Create customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomerParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        public Customer CreateCustomer(CreateCustomerParam createCustomerParam = default(CreateCustomerParam), int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<Customer> localVarResponse = CreateCustomerWithHttpInfo(createCustomerParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create customer information to be linked to AWS Marketplace Create customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomerParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        public awsmarketplaceapi.Client.ApiResponse<Customer> CreateCustomerWithHttpInfo(CreateCustomerParam createCustomerParam = default(CreateCustomerParam), int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomerParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Customer>("/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create customer information to be linked to AWS Marketplace Create customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomerParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> CreateCustomerAsync(CreateCustomerParam createCustomerParam = default(CreateCustomerParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<Customer> localVarResponse = await CreateCustomerWithHttpInfoAsync(createCustomerParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create customer information to be linked to AWS Marketplace Create customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomerParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Customer>> CreateCustomerWithHttpInfoAsync(CreateCustomerParam createCustomerParam = default(CreateCustomerParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomerParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Customer>("/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain product publication status from AWS Marketplace Retrieve the product&#39;s publication status from AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CatalogEntityVisibility</returns>
        public CatalogEntityVisibility GetCatalogEntityVisibility(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<CatalogEntityVisibility> localVarResponse = GetCatalogEntityVisibilityWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain product publication status from AWS Marketplace Retrieve the product&#39;s publication status from AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CatalogEntityVisibility</returns>
        public awsmarketplaceapi.Client.ApiResponse<CatalogEntityVisibility> GetCatalogEntityVisibilityWithHttpInfo(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetCatalogEntityVisibility";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CatalogEntityVisibility>("/catalog-entity/visibility", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCatalogEntityVisibility", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain product publication status from AWS Marketplace Retrieve the product&#39;s publication status from AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CatalogEntityVisibility</returns>
        public async System.Threading.Tasks.Task<CatalogEntityVisibility> GetCatalogEntityVisibilityAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<CatalogEntityVisibility> localVarResponse = await GetCatalogEntityVisibilityWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain product publication status from AWS Marketplace Retrieve the product&#39;s publication status from AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CatalogEntityVisibility)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<CatalogEntityVisibility>> GetCatalogEntityVisibilityWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetCatalogEntityVisibility";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CatalogEntityVisibility>("/catalog-entity/visibility", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCatalogEntityVisibility", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the link to create the AWS CloudFormation stack Get the CloudFormation Quick Create link. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFormationLaunchStackLink</returns>
        public CloudFormationLaunchStackLink GetCloudFormationLaunchStackLink(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<CloudFormationLaunchStackLink> localVarResponse = GetCloudFormationLaunchStackLinkWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the link to create the AWS CloudFormation stack Get the CloudFormation Quick Create link. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFormationLaunchStackLink</returns>
        public awsmarketplaceapi.Client.ApiResponse<CloudFormationLaunchStackLink> GetCloudFormationLaunchStackLinkWithHttpInfo(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetCloudFormationLaunchStackLink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudFormationLaunchStackLink>("/cloudformation-launch-stack-link", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCloudFormationLaunchStackLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the link to create the AWS CloudFormation stack Get the CloudFormation Quick Create link. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFormationLaunchStackLink</returns>
        public async System.Threading.Tasks.Task<CloudFormationLaunchStackLink> GetCloudFormationLaunchStackLinkAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<CloudFormationLaunchStackLink> localVarResponse = await GetCloudFormationLaunchStackLinkWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the link to create the AWS CloudFormation stack Get the CloudFormation Quick Create link. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFormationLaunchStackLink)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<CloudFormationLaunchStackLink>> GetCloudFormationLaunchStackLinkWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetCloudFormationLaunchStackLink";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudFormationLaunchStackLink>("/cloudformation-launch-stack-link", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCloudFormationLaunchStackLink", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer information to be linked to AWS Marketplace Get customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customer</returns>
        public Customer GetCustomer(string customerIdentifier, int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<Customer> localVarResponse = GetCustomerWithHttpInfo(customerIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer information to be linked to AWS Marketplace Get customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customer</returns>
        public awsmarketplaceapi.Client.ApiResponse<Customer> GetCustomerWithHttpInfo(string customerIdentifier, int operationIndex = 0)
        {
            // verify the required parameter 'customerIdentifier' is set
            if (customerIdentifier == null)
            {
                throw new awsmarketplaceapi.Client.ApiException(400, "Missing required parameter 'customerIdentifier' when calling AwsMarketplaceApi->GetCustomer");
            }

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_identifier", awsmarketplaceapi.Client.ClientUtils.ParameterToString(customerIdentifier)); // path parameter

            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Customer>("/customers/{customer_identifier}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get customer information to be linked to AWS Marketplace Get customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customer</returns>
        public async System.Threading.Tasks.Task<Customer> GetCustomerAsync(string customerIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<Customer> localVarResponse = await GetCustomerWithHttpInfoAsync(customerIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get customer information to be linked to AWS Marketplace Get customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customer)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Customer>> GetCustomerWithHttpInfoAsync(string customerIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerIdentifier' is set
            if (customerIdentifier == null)
            {
                throw new awsmarketplaceapi.Client.ApiException(400, "Missing required parameter 'customerIdentifier' when calling AwsMarketplaceApi->GetCustomer");
            }


            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_identifier", awsmarketplaceapi.Client.ClientUtils.ParameterToString(customerIdentifier)); // path parameter

            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Customer>("/customers/{customer_identifier}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of customer information to be linked to AWS Marketplace Get a list of customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantIds">指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Customers</returns>
        public Customers GetCustomers(List<string> tenantIds = default(List<string>), int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<Customers> localVarResponse = GetCustomersWithHttpInfo(tenantIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of customer information to be linked to AWS Marketplace Get a list of customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantIds">指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Customers</returns>
        public awsmarketplaceapi.Client.ApiResponse<Customers> GetCustomersWithHttpInfo(List<string> tenantIds = default(List<string>), int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tenantIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(awsmarketplaceapi.Client.ClientUtils.ParameterToMultiMap("multi", "tenant_ids", tenantIds));
            }

            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Customers>("/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of customer information to be linked to AWS Marketplace Get a list of customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantIds">指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Customers</returns>
        public async System.Threading.Tasks.Task<Customers> GetCustomersAsync(List<string> tenantIds = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<Customers> localVarResponse = await GetCustomersWithHttpInfoAsync(tenantIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of customer information to be linked to AWS Marketplace Get a list of customer information to be linked to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantIds">指定したテナントIDの顧客を取得する(Get customers with the specified tenant ID) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Customers)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Customers>> GetCustomersWithHttpInfoAsync(List<string> tenantIds = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (tenantIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(awsmarketplaceapi.Client.ClientUtils.ParameterToMultiMap("multi", "tenant_ids", tenantIds));
            }

            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Customers>("/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get AWS Marketplace Listing Status Get AWS Marketplace Listing Status. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetListingStatusResult</returns>
        public GetListingStatusResult GetListingStatus(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<GetListingStatusResult> localVarResponse = GetListingStatusWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get AWS Marketplace Listing Status Get AWS Marketplace Listing Status. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetListingStatusResult</returns>
        public awsmarketplaceapi.Client.ApiResponse<GetListingStatusResult> GetListingStatusWithHttpInfo(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetListingStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetListingStatusResult>("/listing-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListingStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get AWS Marketplace Listing Status Get AWS Marketplace Listing Status. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetListingStatusResult</returns>
        public async System.Threading.Tasks.Task<GetListingStatusResult> GetListingStatusAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<GetListingStatusResult> localVarResponse = await GetListingStatusWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get AWS Marketplace Listing Status Get AWS Marketplace Listing Status. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetListingStatusResult)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<GetListingStatusResult>> GetListingStatusWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetListingStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetListingStatusResult>("/listing-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListingStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace Obtain plan information to link to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName">AWS Marketplace linked plan name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plan</returns>
        public Plan GetPlanByPlanName(string planName, int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<Plan> localVarResponse = GetPlanByPlanNameWithHttpInfo(planName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace Obtain plan information to link to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName">AWS Marketplace linked plan name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plan</returns>
        public awsmarketplaceapi.Client.ApiResponse<Plan> GetPlanByPlanNameWithHttpInfo(string planName, int operationIndex = 0)
        {
            // verify the required parameter 'planName' is set
            if (planName == null)
            {
                throw new awsmarketplaceapi.Client.ApiException(400, "Missing required parameter 'planName' when calling AwsMarketplaceApi->GetPlanByPlanName");
            }

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_name", awsmarketplaceapi.Client.ClientUtils.ParameterToString(planName)); // path parameter

            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetPlanByPlanName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Plan>("/plans/{plan_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlanByPlanName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace Obtain plan information to link to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName">AWS Marketplace linked plan name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plan</returns>
        public async System.Threading.Tasks.Task<Plan> GetPlanByPlanNameAsync(string planName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<Plan> localVarResponse = await GetPlanByPlanNameWithHttpInfoAsync(planName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace Obtain plan information to link to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planName">AWS Marketplace linked plan name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plan)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Plan>> GetPlanByPlanNameWithHttpInfoAsync(string planName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'planName' is set
            if (planName == null)
            {
                throw new awsmarketplaceapi.Client.ApiException(400, "Missing required parameter 'planName' when calling AwsMarketplaceApi->GetPlanByPlanName");
            }


            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_name", awsmarketplaceapi.Client.ClientUtils.ParameterToString(planName)); // path parameter

            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetPlanByPlanName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Plan>("/plans/{plan_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlanByPlanName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace Obtain plan information to link to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Plans</returns>
        public Plans GetPlans(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<Plans> localVarResponse = GetPlansWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace Obtain plan information to link to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Plans</returns>
        public awsmarketplaceapi.Client.ApiResponse<Plans> GetPlansWithHttpInfo(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Plans>("/plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace Obtain plan information to link to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Plans</returns>
        public async System.Threading.Tasks.Task<Plans> GetPlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<Plans> localVarResponse = await GetPlansWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain plan information to link to AWS Marketplace Obtain plan information to link to AWS Marketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Plans)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Plans>> GetPlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Plans>("/plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get AWS Marketplace Settings Get AWS Marketplace Settings. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Settings</returns>
        public Settings GetSettings(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.ApiResponse<Settings> localVarResponse = GetSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get AWS Marketplace Settings Get AWS Marketplace Settings. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Settings</returns>
        public awsmarketplaceapi.Client.ApiResponse<Settings> GetSettingsWithHttpInfo(int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Settings>("/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get AWS Marketplace Settings Get AWS Marketplace Settings. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Settings</returns>
        public async System.Threading.Tasks.Task<Settings> GetSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            awsmarketplaceapi.Client.ApiResponse<Settings> localVarResponse = await GetSettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get AWS Marketplace Settings Get AWS Marketplace Settings. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Settings)</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Settings>> GetSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AwsMarketplaceApi.GetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Settings>("/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save plan information to be linked to AWSMarketplace Save plan information to be linked to AWSMarketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePlanParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SavePlan(SavePlanParam savePlanParam = default(SavePlanParam), int operationIndex = 0)
        {
            SavePlanWithHttpInfo(savePlanParam);
        }

        /// <summary>
        /// Save plan information to be linked to AWSMarketplace Save plan information to be linked to AWSMarketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePlanParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public awsmarketplaceapi.Client.ApiResponse<Object> SavePlanWithHttpInfo(SavePlanParam savePlanParam = default(SavePlanParam), int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = savePlanParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.SavePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SavePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Save plan information to be linked to AWSMarketplace Save plan information to be linked to AWSMarketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePlanParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SavePlanAsync(SavePlanParam savePlanParam = default(SavePlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SavePlanWithHttpInfoAsync(savePlanParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Save plan information to be linked to AWSMarketplace Save plan information to be linked to AWSMarketplace. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="savePlanParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Object>> SavePlanWithHttpInfoAsync(SavePlanParam savePlanParam = default(SavePlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = savePlanParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.SavePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SavePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync AWS Marketplace customer information to SaaSus Sync AWS Marketplace customer information to SaaSus. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SyncCustomer(string customerIdentifier, int operationIndex = 0)
        {
            SyncCustomerWithHttpInfo(customerIdentifier);
        }

        /// <summary>
        /// Sync AWS Marketplace customer information to SaaSus Sync AWS Marketplace customer information to SaaSus. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public awsmarketplaceapi.Client.ApiResponse<Object> SyncCustomerWithHttpInfo(string customerIdentifier, int operationIndex = 0)
        {
            // verify the required parameter 'customerIdentifier' is set
            if (customerIdentifier == null)
            {
                throw new awsmarketplaceapi.Client.ApiException(400, "Missing required parameter 'customerIdentifier' when calling AwsMarketplaceApi->SyncCustomer");
            }

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_identifier", awsmarketplaceapi.Client.ClientUtils.ParameterToString(customerIdentifier)); // path parameter

            localVarRequestOptions.Operation = "AwsMarketplaceApi.SyncCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/customers/{customer_identifier}/sync", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync AWS Marketplace customer information to SaaSus Sync AWS Marketplace customer information to SaaSus. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncCustomerAsync(string customerIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SyncCustomerWithHttpInfoAsync(customerIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sync AWS Marketplace customer information to SaaSus Sync AWS Marketplace customer information to SaaSus. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerIdentifier">Customer ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Object>> SyncCustomerWithHttpInfoAsync(string customerIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerIdentifier' is set
            if (customerIdentifier == null)
            {
                throw new awsmarketplaceapi.Client.ApiException(400, "Missing required parameter 'customerIdentifier' when calling AwsMarketplaceApi->SyncCustomer");
            }


            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customer_identifier", awsmarketplaceapi.Client.ClientUtils.ParameterToString(customerIdentifier)); // path parameter

            localVarRequestOptions.Operation = "AwsMarketplaceApi.SyncCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/customers/{customer_identifier}/sync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update AWS Marketplace Listing Status Update AWS Marketplace Listing Status. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateListingStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateListingStatus(UpdateListingStatusParam updateListingStatusParam = default(UpdateListingStatusParam), int operationIndex = 0)
        {
            UpdateListingStatusWithHttpInfo(updateListingStatusParam);
        }

        /// <summary>
        /// Update AWS Marketplace Listing Status Update AWS Marketplace Listing Status. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateListingStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public awsmarketplaceapi.Client.ApiResponse<Object> UpdateListingStatusWithHttpInfo(UpdateListingStatusParam updateListingStatusParam = default(UpdateListingStatusParam), int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateListingStatusParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.UpdateListingStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/listing-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateListingStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update AWS Marketplace Listing Status Update AWS Marketplace Listing Status. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateListingStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateListingStatusAsync(UpdateListingStatusParam updateListingStatusParam = default(UpdateListingStatusParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateListingStatusWithHttpInfoAsync(updateListingStatusParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update AWS Marketplace Listing Status Update AWS Marketplace Listing Status. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateListingStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Object>> UpdateListingStatusWithHttpInfoAsync(UpdateListingStatusParam updateListingStatusParam = default(UpdateListingStatusParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateListingStatusParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.UpdateListingStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/listing-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateListingStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update AWS Marketplace Settings Update AWS Marketplace Settings. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateSettings(UpdateSettingsParam updateSettingsParam = default(UpdateSettingsParam), int operationIndex = 0)
        {
            UpdateSettingsWithHttpInfo(updateSettingsParam);
        }

        /// <summary>
        /// Update AWS Marketplace Settings Update AWS Marketplace Settings. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public awsmarketplaceapi.Client.ApiResponse<Object> UpdateSettingsWithHttpInfo(UpdateSettingsParam updateSettingsParam = default(UpdateSettingsParam), int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateSettingsParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.UpdateSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update AWS Marketplace Settings Update AWS Marketplace Settings. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSettingsAsync(UpdateSettingsParam updateSettingsParam = default(UpdateSettingsParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateSettingsWithHttpInfoAsync(updateSettingsParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update AWS Marketplace Settings Update AWS Marketplace Settings. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Object>> UpdateSettingsWithHttpInfoAsync(UpdateSettingsParam updateSettingsParam = default(UpdateSettingsParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateSettingsParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.UpdateSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Registration Token Verify Registration Token. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyRegistrationTokenParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void VerifyRegistrationToken(VerifyRegistrationTokenParam verifyRegistrationTokenParam = default(VerifyRegistrationTokenParam), int operationIndex = 0)
        {
            VerifyRegistrationTokenWithHttpInfo(verifyRegistrationTokenParam);
        }

        /// <summary>
        /// Verify Registration Token Verify Registration Token. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyRegistrationTokenParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public awsmarketplaceapi.Client.ApiResponse<Object> VerifyRegistrationTokenWithHttpInfo(VerifyRegistrationTokenParam verifyRegistrationTokenParam = default(VerifyRegistrationTokenParam), int operationIndex = 0)
        {
            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verifyRegistrationTokenParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.VerifyRegistrationToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/registration-token/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyRegistrationToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Registration Token Verify Registration Token. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyRegistrationTokenParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VerifyRegistrationTokenAsync(VerifyRegistrationTokenParam verifyRegistrationTokenParam = default(VerifyRegistrationTokenParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await VerifyRegistrationTokenWithHttpInfoAsync(verifyRegistrationTokenParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Verify Registration Token Verify Registration Token. 
        /// </summary>
        /// <exception cref="awsmarketplaceapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="verifyRegistrationTokenParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<awsmarketplaceapi.Client.ApiResponse<Object>> VerifyRegistrationTokenWithHttpInfoAsync(VerifyRegistrationTokenParam verifyRegistrationTokenParam = default(VerifyRegistrationTokenParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            awsmarketplaceapi.Client.RequestOptions localVarRequestOptions = new awsmarketplaceapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = awsmarketplaceapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = awsmarketplaceapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = verifyRegistrationTokenParam;

            localVarRequestOptions.Operation = "AwsMarketplaceApi.VerifyRegistrationToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/registration-token/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyRegistrationToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
