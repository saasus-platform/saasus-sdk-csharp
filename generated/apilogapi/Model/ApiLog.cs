/*
 * SaaSus ApiLog API Schema
 *
 * SaaSus ApiLog API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = apilogapi.Client.OpenAPIDateConverter;

namespace apilogapi.Model
{
    /// <summary>
    /// ApiLog
    /// </summary>
    [DataContract(Name = "ApiLog")]
    public partial class ApiLog : IEquatable<ApiLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLog" /> class.
        /// </summary>
        /// <param name="traceId">Trace ID (required).</param>
        /// <param name="apiLogId">apiLogId (required).</param>
        /// <param name="createdAt">Epoch second of API log registration timestamp (required).</param>
        /// <param name="createdDate">API log registration date (required).</param>
        /// <param name="ttl">Epoch second of planned API log deletion (required).</param>
        /// <param name="requestMethod">Request method (required).</param>
        /// <param name="saasId">saasId (required).</param>
        /// <param name="apiKey">API Key (required).</param>
        /// <param name="responseStatus">Response status (required).</param>
        /// <param name="requestUri">Request URI (required).</param>
        /// <param name="remoteAddress">Client IP Address (required).</param>
        /// <param name="referer">The referrer of the request (required).</param>
        /// <param name="requestBody">The body of the request (required).</param>
        /// <param name="responseBody">The body of the response (required).</param>
        public ApiLog(string traceId = default(string), string apiLogId = default(string), int createdAt = default(int), string createdDate = default(string), int ttl = default(int), string requestMethod = default(string), string saasId = default(string), string apiKey = default(string), string responseStatus = default(string), string requestUri = default(string), string remoteAddress = default(string), string referer = default(string), string requestBody = default(string), string responseBody = default(string))
        {
            // to ensure "traceId" is required (not null)
            if (traceId == null)
            {
                throw new ArgumentNullException("traceId is a required property for ApiLog and cannot be null");
            }
            this.TraceId = traceId;
            // to ensure "apiLogId" is required (not null)
            if (apiLogId == null)
            {
                throw new ArgumentNullException("apiLogId is a required property for ApiLog and cannot be null");
            }
            this.ApiLogId = apiLogId;
            this.CreatedAt = createdAt;
            // to ensure "createdDate" is required (not null)
            if (createdDate == null)
            {
                throw new ArgumentNullException("createdDate is a required property for ApiLog and cannot be null");
            }
            this.CreatedDate = createdDate;
            this.Ttl = ttl;
            // to ensure "requestMethod" is required (not null)
            if (requestMethod == null)
            {
                throw new ArgumentNullException("requestMethod is a required property for ApiLog and cannot be null");
            }
            this.RequestMethod = requestMethod;
            // to ensure "saasId" is required (not null)
            if (saasId == null)
            {
                throw new ArgumentNullException("saasId is a required property for ApiLog and cannot be null");
            }
            this.SaasId = saasId;
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new ArgumentNullException("apiKey is a required property for ApiLog and cannot be null");
            }
            this.ApiKey = apiKey;
            // to ensure "responseStatus" is required (not null)
            if (responseStatus == null)
            {
                throw new ArgumentNullException("responseStatus is a required property for ApiLog and cannot be null");
            }
            this.ResponseStatus = responseStatus;
            // to ensure "requestUri" is required (not null)
            if (requestUri == null)
            {
                throw new ArgumentNullException("requestUri is a required property for ApiLog and cannot be null");
            }
            this.RequestUri = requestUri;
            // to ensure "remoteAddress" is required (not null)
            if (remoteAddress == null)
            {
                throw new ArgumentNullException("remoteAddress is a required property for ApiLog and cannot be null");
            }
            this.RemoteAddress = remoteAddress;
            // to ensure "referer" is required (not null)
            if (referer == null)
            {
                throw new ArgumentNullException("referer is a required property for ApiLog and cannot be null");
            }
            this.Referer = referer;
            // to ensure "requestBody" is required (not null)
            if (requestBody == null)
            {
                throw new ArgumentNullException("requestBody is a required property for ApiLog and cannot be null");
            }
            this.RequestBody = requestBody;
            // to ensure "responseBody" is required (not null)
            if (responseBody == null)
            {
                throw new ArgumentNullException("responseBody is a required property for ApiLog and cannot be null");
            }
            this.ResponseBody = responseBody;
        }

        /// <summary>
        /// Trace ID
        /// </summary>
        /// <value>Trace ID</value>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "trace_id", IsRequired = true, EmitDefaultValue = true)]
        public string TraceId { get; set; }

        /// <summary>
        /// Gets or Sets ApiLogId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "api_log_id", IsRequired = true, EmitDefaultValue = true)]
        public string ApiLogId { get; set; }

        /// <summary>
        /// Epoch second of API log registration timestamp
        /// </summary>
        /// <value>Epoch second of API log registration timestamp</value>
        /// <example>1670997124</example>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// API log registration date
        /// </summary>
        /// <value>API log registration date</value>
        /// <example>2022-12-14</example>
        [DataMember(Name = "created_date", IsRequired = true, EmitDefaultValue = true)]
        public string CreatedDate { get; set; }

        /// <summary>
        /// Epoch second of planned API log deletion
        /// </summary>
        /// <value>Epoch second of planned API log deletion</value>
        /// <example>1670997124</example>
        [DataMember(Name = "ttl", IsRequired = true, EmitDefaultValue = true)]
        public int Ttl { get; set; }

        /// <summary>
        /// Request method
        /// </summary>
        /// <value>Request method</value>
        /// <example>GET</example>
        [DataMember(Name = "request_method", IsRequired = true, EmitDefaultValue = true)]
        public string RequestMethod { get; set; }

        /// <summary>
        /// Gets or Sets SaasId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "saas_id", IsRequired = true, EmitDefaultValue = true)]
        public string SaasId { get; set; }

        /// <summary>
        /// API Key
        /// </summary>
        /// <value>API Key</value>
        /// <example>icFS9Hit7jZjeSKMbNZP2cmfqBseyxnJZ</example>
        [DataMember(Name = "api_key", IsRequired = true, EmitDefaultValue = true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Response status
        /// </summary>
        /// <value>Response status</value>
        /// <example>200</example>
        [DataMember(Name = "response_status", IsRequired = true, EmitDefaultValue = true)]
        public string ResponseStatus { get; set; }

        /// <summary>
        /// Request URI
        /// </summary>
        /// <value>Request URI</value>
        /// <example>/v1/auth/tenants</example>
        [DataMember(Name = "request_uri", IsRequired = true, EmitDefaultValue = true)]
        public string RequestUri { get; set; }

        /// <summary>
        /// Client IP Address
        /// </summary>
        /// <value>Client IP Address</value>
        /// <example>192.168.0.20</example>
        [DataMember(Name = "remote_address", IsRequired = true, EmitDefaultValue = true)]
        public string RemoteAddress { get; set; }

        /// <summary>
        /// The referrer of the request
        /// </summary>
        /// <value>The referrer of the request</value>
        /// <example>/v1/auth/user_info</example>
        [DataMember(Name = "referer", IsRequired = true, EmitDefaultValue = true)]
        public string Referer { get; set; }

        /// <summary>
        /// The body of the request
        /// </summary>
        /// <value>The body of the request</value>
        /// <example>{&quot;name&quot;:&quot;1207 Tenant&quot;,&quot;back_office_staff_email&quot;:&quot;example.com&quot;}</example>
        [DataMember(Name = "request_body", IsRequired = true, EmitDefaultValue = true)]
        public string RequestBody { get; set; }

        /// <summary>
        /// The body of the response
        /// </summary>
        /// <value>The body of the response</value>
        /// <example>{&quot;id&quot;: &quot;98684c58-ca59-4046-9c2a-861ef6f12dd4&quot;, &quot;name&quot;:&quot;1207 Tenant&quot;}</example>
        [DataMember(Name = "response_body", IsRequired = true, EmitDefaultValue = true)]
        public string ResponseBody { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiLog {\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  ApiLogId: ").Append(ApiLogId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  RequestMethod: ").Append(RequestMethod).Append("\n");
            sb.Append("  SaasId: ").Append(SaasId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ResponseStatus: ").Append(ResponseStatus).Append("\n");
            sb.Append("  RequestUri: ").Append(RequestUri).Append("\n");
            sb.Append("  RemoteAddress: ").Append(RemoteAddress).Append("\n");
            sb.Append("  Referer: ").Append(Referer).Append("\n");
            sb.Append("  RequestBody: ").Append(RequestBody).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiLog);
        }

        /// <summary>
        /// Returns true if ApiLog instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TraceId == input.TraceId ||
                    (this.TraceId != null &&
                    this.TraceId.Equals(input.TraceId))
                ) && 
                (
                    this.ApiLogId == input.ApiLogId ||
                    (this.ApiLogId != null &&
                    this.ApiLogId.Equals(input.ApiLogId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Ttl == input.Ttl ||
                    this.Ttl.Equals(input.Ttl)
                ) && 
                (
                    this.RequestMethod == input.RequestMethod ||
                    (this.RequestMethod != null &&
                    this.RequestMethod.Equals(input.RequestMethod))
                ) && 
                (
                    this.SaasId == input.SaasId ||
                    (this.SaasId != null &&
                    this.SaasId.Equals(input.SaasId))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.ResponseStatus == input.ResponseStatus ||
                    (this.ResponseStatus != null &&
                    this.ResponseStatus.Equals(input.ResponseStatus))
                ) && 
                (
                    this.RequestUri == input.RequestUri ||
                    (this.RequestUri != null &&
                    this.RequestUri.Equals(input.RequestUri))
                ) && 
                (
                    this.RemoteAddress == input.RemoteAddress ||
                    (this.RemoteAddress != null &&
                    this.RemoteAddress.Equals(input.RemoteAddress))
                ) && 
                (
                    this.Referer == input.Referer ||
                    (this.Referer != null &&
                    this.Referer.Equals(input.Referer))
                ) && 
                (
                    this.RequestBody == input.RequestBody ||
                    (this.RequestBody != null &&
                    this.RequestBody.Equals(input.RequestBody))
                ) && 
                (
                    this.ResponseBody == input.ResponseBody ||
                    (this.ResponseBody != null &&
                    this.ResponseBody.Equals(input.ResponseBody))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TraceId != null)
                {
                    hashCode = (hashCode * 59) + this.TraceId.GetHashCode();
                }
                if (this.ApiLogId != null)
                {
                    hashCode = (hashCode * 59) + this.ApiLogId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ttl.GetHashCode();
                if (this.RequestMethod != null)
                {
                    hashCode = (hashCode * 59) + this.RequestMethod.GetHashCode();
                }
                if (this.SaasId != null)
                {
                    hashCode = (hashCode * 59) + this.SaasId.GetHashCode();
                }
                if (this.ApiKey != null)
                {
                    hashCode = (hashCode * 59) + this.ApiKey.GetHashCode();
                }
                if (this.ResponseStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseStatus.GetHashCode();
                }
                if (this.RequestUri != null)
                {
                    hashCode = (hashCode * 59) + this.RequestUri.GetHashCode();
                }
                if (this.RemoteAddress != null)
                {
                    hashCode = (hashCode * 59) + this.RemoteAddress.GetHashCode();
                }
                if (this.Referer != null)
                {
                    hashCode = (hashCode * 59) + this.Referer.GetHashCode();
                }
                if (this.RequestBody != null)
                {
                    hashCode = (hashCode * 59) + this.RequestBody.GetHashCode();
                }
                if (this.ResponseBody != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseBody.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
