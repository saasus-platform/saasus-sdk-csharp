/*
 * SaaSus ApiLog API Schema
 *
 * SaaSus ApiLog API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using apilogapi.Client;
using apilogapi.Model;

namespace apilogapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiLogApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get API execution log
        /// </summary>
        /// <remarks>
        /// Retrieve the log of the API execution with the specified ID.
        /// </remarks>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiLogId">API Log ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiLog</returns>
        ApiLog GetLog(string apiLogId, int operationIndex = 0);

        /// <summary>
        /// Get API execution log
        /// </summary>
        /// <remarks>
        /// Retrieve the log of the API execution with the specified ID.
        /// </remarks>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiLogId">API Log ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiLog</returns>
        ApiResponse<ApiLog> GetLogWithHttpInfo(string apiLogId, int operationIndex = 0);
        /// <summary>
        /// Get API execution log list
        /// </summary>
        /// <remarks>
        /// Retrieve the log of all API executions.
        /// </remarks>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDate">The date, in format of YYYY-MM-DD, to retrieve the log. (optional)</param>
        /// <param name="createdAt">The datetime, in ISO 8601 format, to retrieve the log. (optional)</param>
        /// <param name="limit">Maximum number of logs to retrieve. (optional)</param>
        /// <param name="cursor">Cursor for cursor pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiLogs</returns>
        ApiLogs GetLogs(DateTime? createdDate = default(DateTime?), DateTime? createdAt = default(DateTime?), long? limit = default(long?), string cursor = default(string), int operationIndex = 0);

        /// <summary>
        /// Get API execution log list
        /// </summary>
        /// <remarks>
        /// Retrieve the log of all API executions.
        /// </remarks>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDate">The date, in format of YYYY-MM-DD, to retrieve the log. (optional)</param>
        /// <param name="createdAt">The datetime, in ISO 8601 format, to retrieve the log. (optional)</param>
        /// <param name="limit">Maximum number of logs to retrieve. (optional)</param>
        /// <param name="cursor">Cursor for cursor pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiLogs</returns>
        ApiResponse<ApiLogs> GetLogsWithHttpInfo(DateTime? createdDate = default(DateTime?), DateTime? createdAt = default(DateTime?), long? limit = default(long?), string cursor = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiLogApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get API execution log
        /// </summary>
        /// <remarks>
        /// Retrieve the log of the API execution with the specified ID.
        /// </remarks>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiLogId">API Log ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiLog</returns>
        System.Threading.Tasks.Task<ApiLog> GetLogAsync(string apiLogId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get API execution log
        /// </summary>
        /// <remarks>
        /// Retrieve the log of the API execution with the specified ID.
        /// </remarks>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiLogId">API Log ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiLog>> GetLogWithHttpInfoAsync(string apiLogId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get API execution log list
        /// </summary>
        /// <remarks>
        /// Retrieve the log of all API executions.
        /// </remarks>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDate">The date, in format of YYYY-MM-DD, to retrieve the log. (optional)</param>
        /// <param name="createdAt">The datetime, in ISO 8601 format, to retrieve the log. (optional)</param>
        /// <param name="limit">Maximum number of logs to retrieve. (optional)</param>
        /// <param name="cursor">Cursor for cursor pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiLogs</returns>
        System.Threading.Tasks.Task<ApiLogs> GetLogsAsync(DateTime? createdDate = default(DateTime?), DateTime? createdAt = default(DateTime?), long? limit = default(long?), string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get API execution log list
        /// </summary>
        /// <remarks>
        /// Retrieve the log of all API executions.
        /// </remarks>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDate">The date, in format of YYYY-MM-DD, to retrieve the log. (optional)</param>
        /// <param name="createdAt">The datetime, in ISO 8601 format, to retrieve the log. (optional)</param>
        /// <param name="limit">Maximum number of logs to retrieve. (optional)</param>
        /// <param name="cursor">Cursor for cursor pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiLogs)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiLogs>> GetLogsWithHttpInfoAsync(DateTime? createdDate = default(DateTime?), DateTime? createdAt = default(DateTime?), long? limit = default(long?), string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiLogApi : IApiLogApiSync, IApiLogApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiLogApi : IApiLogApi
    {
        private apilogapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiLogApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiLogApi(string basePath)
        {
            this.Configuration = apilogapi.Client.Configuration.MergeConfigurations(
                apilogapi.Client.GlobalConfiguration.Instance,
                new apilogapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new apilogapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apilogapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = apilogapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiLogApi(apilogapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = apilogapi.Client.Configuration.MergeConfigurations(
                apilogapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new apilogapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apilogapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = apilogapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLogApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApiLogApi(apilogapi.Client.ISynchronousClient client, apilogapi.Client.IAsynchronousClient asyncClient, apilogapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = apilogapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public apilogapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public apilogapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public apilogapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public apilogapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get API execution log Retrieve the log of the API execution with the specified ID.
        /// </summary>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiLogId">API Log ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiLog</returns>
        public ApiLog GetLog(string apiLogId, int operationIndex = 0)
        {
            apilogapi.Client.ApiResponse<ApiLog> localVarResponse = GetLogWithHttpInfo(apiLogId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API execution log Retrieve the log of the API execution with the specified ID.
        /// </summary>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiLogId">API Log ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiLog</returns>
        public apilogapi.Client.ApiResponse<ApiLog> GetLogWithHttpInfo(string apiLogId, int operationIndex = 0)
        {
            // verify the required parameter 'apiLogId' is set
            if (apiLogId == null)
            {
                throw new apilogapi.Client.ApiException(400, "Missing required parameter 'apiLogId' when calling ApiLogApi->GetLog");
            }

            apilogapi.Client.RequestOptions localVarRequestOptions = new apilogapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apilogapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apilogapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_log_id", apilogapi.Client.ClientUtils.ParameterToString(apiLogId)); // path parameter

            localVarRequestOptions.Operation = "ApiLogApi.GetLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiLog>("/logs/{api_log_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API execution log Retrieve the log of the API execution with the specified ID.
        /// </summary>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiLogId">API Log ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiLog</returns>
        public async System.Threading.Tasks.Task<ApiLog> GetLogAsync(string apiLogId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apilogapi.Client.ApiResponse<ApiLog> localVarResponse = await GetLogWithHttpInfoAsync(apiLogId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API execution log Retrieve the log of the API execution with the specified ID.
        /// </summary>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiLogId">API Log ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiLog)</returns>
        public async System.Threading.Tasks.Task<apilogapi.Client.ApiResponse<ApiLog>> GetLogWithHttpInfoAsync(string apiLogId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'apiLogId' is set
            if (apiLogId == null)
            {
                throw new apilogapi.Client.ApiException(400, "Missing required parameter 'apiLogId' when calling ApiLogApi->GetLog");
            }


            apilogapi.Client.RequestOptions localVarRequestOptions = new apilogapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apilogapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apilogapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("api_log_id", apilogapi.Client.ClientUtils.ParameterToString(apiLogId)); // path parameter

            localVarRequestOptions.Operation = "ApiLogApi.GetLog";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiLog>("/logs/{api_log_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API execution log list Retrieve the log of all API executions.
        /// </summary>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDate">The date, in format of YYYY-MM-DD, to retrieve the log. (optional)</param>
        /// <param name="createdAt">The datetime, in ISO 8601 format, to retrieve the log. (optional)</param>
        /// <param name="limit">Maximum number of logs to retrieve. (optional)</param>
        /// <param name="cursor">Cursor for cursor pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiLogs</returns>
        public ApiLogs GetLogs(DateTime? createdDate = default(DateTime?), DateTime? createdAt = default(DateTime?), long? limit = default(long?), string cursor = default(string), int operationIndex = 0)
        {
            apilogapi.Client.ApiResponse<ApiLogs> localVarResponse = GetLogsWithHttpInfo(createdDate, createdAt, limit, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API execution log list Retrieve the log of all API executions.
        /// </summary>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDate">The date, in format of YYYY-MM-DD, to retrieve the log. (optional)</param>
        /// <param name="createdAt">The datetime, in ISO 8601 format, to retrieve the log. (optional)</param>
        /// <param name="limit">Maximum number of logs to retrieve. (optional)</param>
        /// <param name="cursor">Cursor for cursor pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiLogs</returns>
        public apilogapi.Client.ApiResponse<ApiLogs> GetLogsWithHttpInfo(DateTime? createdDate = default(DateTime?), DateTime? createdAt = default(DateTime?), long? limit = default(long?), string cursor = default(string), int operationIndex = 0)
        {
            apilogapi.Client.RequestOptions localVarRequestOptions = new apilogapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apilogapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apilogapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apilogapi.Client.ClientUtils.ParameterToMultiMap("", "created_date", createdDate));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(apilogapi.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(apilogapi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(apilogapi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ApiLogApi.GetLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiLogs>("/logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get API execution log list Retrieve the log of all API executions.
        /// </summary>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDate">The date, in format of YYYY-MM-DD, to retrieve the log. (optional)</param>
        /// <param name="createdAt">The datetime, in ISO 8601 format, to retrieve the log. (optional)</param>
        /// <param name="limit">Maximum number of logs to retrieve. (optional)</param>
        /// <param name="cursor">Cursor for cursor pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiLogs</returns>
        public async System.Threading.Tasks.Task<ApiLogs> GetLogsAsync(DateTime? createdDate = default(DateTime?), DateTime? createdAt = default(DateTime?), long? limit = default(long?), string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apilogapi.Client.ApiResponse<ApiLogs> localVarResponse = await GetLogsWithHttpInfoAsync(createdDate, createdAt, limit, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get API execution log list Retrieve the log of all API executions.
        /// </summary>
        /// <exception cref="apilogapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createdDate">The date, in format of YYYY-MM-DD, to retrieve the log. (optional)</param>
        /// <param name="createdAt">The datetime, in ISO 8601 format, to retrieve the log. (optional)</param>
        /// <param name="limit">Maximum number of logs to retrieve. (optional)</param>
        /// <param name="cursor">Cursor for cursor pagination. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiLogs)</returns>
        public async System.Threading.Tasks.Task<apilogapi.Client.ApiResponse<ApiLogs>> GetLogsWithHttpInfoAsync(DateTime? createdDate = default(DateTime?), DateTime? createdAt = default(DateTime?), long? limit = default(long?), string cursor = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apilogapi.Client.RequestOptions localVarRequestOptions = new apilogapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apilogapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apilogapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (createdDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apilogapi.Client.ClientUtils.ParameterToMultiMap("", "created_date", createdDate));
            }
            if (createdAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(apilogapi.Client.ClientUtils.ParameterToMultiMap("", "created_at", createdAt));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(apilogapi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(apilogapi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ApiLogApi.GetLogs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiLogs>("/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLogs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
