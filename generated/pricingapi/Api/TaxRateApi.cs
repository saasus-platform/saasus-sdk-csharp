/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using pricingapi.Client;
using pricingapi.Model;

namespace pricingapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxRateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Tax Rate
        /// </summary>
        /// <remarks>
        /// Creates a tax rate. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRate</returns>
        TaxRate CreateTaxRate(TaxRateProps body = default(TaxRateProps), int operationIndex = 0);

        /// <summary>
        /// Create Tax Rate
        /// </summary>
        /// <remarks>
        /// Creates a tax rate. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRate</returns>
        ApiResponse<TaxRate> CreateTaxRateWithHttpInfo(TaxRateProps body = default(TaxRateProps), int operationIndex = 0);
        /// <summary>
        /// Get Tax Rates
        /// </summary>
        /// <remarks>
        /// Get all Tax Rates 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        TaxRates GetTaxRates(int operationIndex = 0);

        /// <summary>
        /// Get Tax Rates
        /// </summary>
        /// <remarks>
        /// Get all Tax Rates 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        ApiResponse<TaxRates> GetTaxRatesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Tax Rate
        /// </summary>
        /// <remarks>
        /// Update tax rate. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateId">Tax Rate ID</param>
        /// <param name="updateTaxRateParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTaxRate(string taxRateId, UpdateTaxRateParam updateTaxRateParam = default(UpdateTaxRateParam), int operationIndex = 0);

        /// <summary>
        /// Update Tax Rate
        /// </summary>
        /// <remarks>
        /// Update tax rate. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateId">Tax Rate ID</param>
        /// <param name="updateTaxRateParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTaxRateWithHttpInfo(string taxRateId, UpdateTaxRateParam updateTaxRateParam = default(UpdateTaxRateParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxRateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Tax Rate
        /// </summary>
        /// <remarks>
        /// Creates a tax rate. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRate</returns>
        System.Threading.Tasks.Task<TaxRate> CreateTaxRateAsync(TaxRateProps body = default(TaxRateProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tax Rate
        /// </summary>
        /// <remarks>
        /// Creates a tax rate. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRate)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRate>> CreateTaxRateWithHttpInfoAsync(TaxRateProps body = default(TaxRateProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tax Rates
        /// </summary>
        /// <remarks>
        /// Get all Tax Rates 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        System.Threading.Tasks.Task<TaxRates> GetTaxRatesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tax Rates
        /// </summary>
        /// <remarks>
        /// Get all Tax Rates 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaxRates>> GetTaxRatesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tax Rate
        /// </summary>
        /// <remarks>
        /// Update tax rate. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateId">Tax Rate ID</param>
        /// <param name="updateTaxRateParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTaxRateAsync(string taxRateId, UpdateTaxRateParam updateTaxRateParam = default(UpdateTaxRateParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tax Rate
        /// </summary>
        /// <remarks>
        /// Update tax rate. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateId">Tax Rate ID</param>
        /// <param name="updateTaxRateParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTaxRateWithHttpInfoAsync(string taxRateId, UpdateTaxRateParam updateTaxRateParam = default(UpdateTaxRateParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaxRateApi : ITaxRateApiSync, ITaxRateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaxRateApi : ITaxRateApi
    {
        private pricingapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxRateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaxRateApi(string basePath)
        {
            this.Configuration = pricingapi.Client.Configuration.MergeConfigurations(
                pricingapi.Client.GlobalConfiguration.Instance,
                new pricingapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaxRateApi(pricingapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = pricingapi.Client.Configuration.MergeConfigurations(
                pricingapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaxRateApi(pricingapi.Client.ISynchronousClient client, pricingapi.Client.IAsynchronousClient asyncClient, pricingapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public pricingapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public pricingapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pricingapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pricingapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Tax Rate Creates a tax rate. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRate</returns>
        public TaxRate CreateTaxRate(TaxRateProps body = default(TaxRateProps), int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<TaxRate> localVarResponse = CreateTaxRateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tax Rate Creates a tax rate. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRate</returns>
        public pricingapi.Client.ApiResponse<TaxRate> CreateTaxRateWithHttpInfo(TaxRateProps body = default(TaxRateProps), int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TaxRateApi.CreateTaxRate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TaxRate>("/tax-rates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaxRate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tax Rate Creates a tax rate. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRate</returns>
        public async System.Threading.Tasks.Task<TaxRate> CreateTaxRateAsync(TaxRateProps body = default(TaxRateProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<TaxRate> localVarResponse = await CreateTaxRateWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tax Rate Creates a tax rate. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRate)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<TaxRate>> CreateTaxRateWithHttpInfoAsync(TaxRateProps body = default(TaxRateProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TaxRateApi.CreateTaxRate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TaxRate>("/tax-rates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaxRate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tax Rates Get all Tax Rates 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TaxRates</returns>
        public TaxRates GetTaxRates(int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<TaxRates> localVarResponse = GetTaxRatesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tax Rates Get all Tax Rates 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TaxRates</returns>
        public pricingapi.Client.ApiResponse<TaxRates> GetTaxRatesWithHttpInfo(int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TaxRateApi.GetTaxRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TaxRates>("/tax-rates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tax Rates Get all Tax Rates 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TaxRates</returns>
        public async System.Threading.Tasks.Task<TaxRates> GetTaxRatesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<TaxRates> localVarResponse = await GetTaxRatesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tax Rates Get all Tax Rates 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TaxRates)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<TaxRates>> GetTaxRatesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TaxRateApi.GetTaxRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TaxRates>("/tax-rates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaxRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tax Rate Update tax rate. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateId">Tax Rate ID</param>
        /// <param name="updateTaxRateParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTaxRate(string taxRateId, UpdateTaxRateParam updateTaxRateParam = default(UpdateTaxRateParam), int operationIndex = 0)
        {
            UpdateTaxRateWithHttpInfo(taxRateId, updateTaxRateParam);
        }

        /// <summary>
        /// Update Tax Rate Update tax rate. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateId">Tax Rate ID</param>
        /// <param name="updateTaxRateParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> UpdateTaxRateWithHttpInfo(string taxRateId, UpdateTaxRateParam updateTaxRateParam = default(UpdateTaxRateParam), int operationIndex = 0)
        {
            // verify the required parameter 'taxRateId' is set
            if (taxRateId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'taxRateId' when calling TaxRateApi->UpdateTaxRate");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tax_rate_id", pricingapi.Client.ClientUtils.ParameterToString(taxRateId)); // path parameter
            localVarRequestOptions.Data = updateTaxRateParam;

            localVarRequestOptions.Operation = "TaxRateApi.UpdateTaxRate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/tax-rates/{tax_rate_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaxRate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tax Rate Update tax rate. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateId">Tax Rate ID</param>
        /// <param name="updateTaxRateParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTaxRateAsync(string taxRateId, UpdateTaxRateParam updateTaxRateParam = default(UpdateTaxRateParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTaxRateWithHttpInfoAsync(taxRateId, updateTaxRateParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Tax Rate Update tax rate. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taxRateId">Tax Rate ID</param>
        /// <param name="updateTaxRateParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> UpdateTaxRateWithHttpInfoAsync(string taxRateId, UpdateTaxRateParam updateTaxRateParam = default(UpdateTaxRateParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'taxRateId' is set
            if (taxRateId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'taxRateId' when calling TaxRateApi->UpdateTaxRate");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tax_rate_id", pricingapi.Client.ClientUtils.ParameterToString(taxRateId)); // path parameter
            localVarRequestOptions.Data = updateTaxRateParam;

            localVarRequestOptions.Operation = "TaxRateApi.UpdateTaxRate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/tax-rates/{tax_rate_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaxRate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
