/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using pricingapi.Client;
using pricingapi.Model;

namespace pricingapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingPlansApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Pricing Plan
        /// </summary>
        /// <remarks>
        /// Create a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingPlan</returns>
        PricingPlan CreatePricingPlan(SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0);

        /// <summary>
        /// Create Pricing Plan
        /// </summary>
        /// <remarks>
        /// Create a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingPlan</returns>
        ApiResponse<PricingPlan> CreatePricingPlanWithHttpInfo(SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0);
        /// <summary>
        /// Delete all Plans, Menus, Units, Meters and Tax Rates
        /// </summary>
        /// <remarks>
        /// Unconditionally remove all rate plans, menus, units, meters and tax rates. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates(int operationIndex = 0);

        /// <summary>
        /// Delete all Plans, Menus, Units, Meters and Tax Rates
        /// </summary>
        /// <remarks>
        /// Unconditionally remove all rate plans, menus, units, meters and tax rates. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete Pricing Plan
        /// </summary>
        /// <remarks>
        /// Delete a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePricingPlan(string planId, int operationIndex = 0);

        /// <summary>
        /// Delete Pricing Plan
        /// </summary>
        /// <remarks>
        /// Delete a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePricingPlanWithHttpInfo(string planId, int operationIndex = 0);
        /// <summary>
        /// Delete Product Data from Stripe
        /// </summary>
        /// <remarks>
        /// Delete product data from Stripe. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteStripePlan(int operationIndex = 0);

        /// <summary>
        /// Delete Product Data from Stripe
        /// </summary>
        /// <remarks>
        /// Delete product data from Stripe. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStripePlanWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Pricing Plan
        /// </summary>
        /// <remarks>
        /// Get a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingPlan</returns>
        PricingPlan GetPricingPlan(string planId, int operationIndex = 0);

        /// <summary>
        /// Get Pricing Plan
        /// </summary>
        /// <remarks>
        /// Get a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingPlan</returns>
        ApiResponse<PricingPlan> GetPricingPlanWithHttpInfo(string planId, int operationIndex = 0);
        /// <summary>
        /// Get Pricing Plans
        /// </summary>
        /// <remarks>
        /// Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingPlans</returns>
        PricingPlans GetPricingPlans(int operationIndex = 0);

        /// <summary>
        /// Get Pricing Plans
        /// </summary>
        /// <remarks>
        /// Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingPlans</returns>
        ApiResponse<PricingPlans> GetPricingPlansWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Connect to Stripe
        /// </summary>
        /// <remarks>
        /// Connect information to Stripe. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void LinkPlanToStripe(int operationIndex = 0);

        /// <summary>
        /// Connect to Stripe
        /// </summary>
        /// <remarks>
        /// Connect information to Stripe. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LinkPlanToStripeWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Pricing Plan
        /// </summary>
        /// <remarks>
        /// Update a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdatePricingPlan(string planId, SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0);

        /// <summary>
        /// Update Pricing Plan
        /// </summary>
        /// <remarks>
        /// Update a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePricingPlanWithHttpInfo(string planId, SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0);
        /// <summary>
        /// Update Used Flag
        /// </summary>
        /// <remarks>
        /// Update price plan and feature menu/pricing unit to used. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePricingPlansUsedParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdatePricingPlansUsed(UpdatePricingPlansUsedParam updatePricingPlansUsedParam = default(UpdatePricingPlansUsedParam), int operationIndex = 0);

        /// <summary>
        /// Update Used Flag
        /// </summary>
        /// <remarks>
        /// Update price plan and feature menu/pricing unit to used. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePricingPlansUsedParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePricingPlansUsedWithHttpInfo(UpdatePricingPlansUsedParam updatePricingPlansUsedParam = default(UpdatePricingPlansUsedParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingPlansApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Pricing Plan
        /// </summary>
        /// <remarks>
        /// Create a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingPlan</returns>
        System.Threading.Tasks.Task<PricingPlan> CreatePricingPlanAsync(SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Pricing Plan
        /// </summary>
        /// <remarks>
        /// Create a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingPlan>> CreatePricingPlanWithHttpInfoAsync(SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all Plans, Menus, Units, Meters and Tax Rates
        /// </summary>
        /// <remarks>
        /// Unconditionally remove all rate plans, menus, units, meters and tax rates. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all Plans, Menus, Units, Meters and Tax Rates
        /// </summary>
        /// <remarks>
        /// Unconditionally remove all rate plans, menus, units, meters and tax rates. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Pricing Plan
        /// </summary>
        /// <remarks>
        /// Delete a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePricingPlanAsync(string planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Pricing Plan
        /// </summary>
        /// <remarks>
        /// Delete a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePricingPlanWithHttpInfoAsync(string planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Product Data from Stripe
        /// </summary>
        /// <remarks>
        /// Delete product data from Stripe. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStripePlanAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Product Data from Stripe
        /// </summary>
        /// <remarks>
        /// Delete product data from Stripe. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStripePlanWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Pricing Plan
        /// </summary>
        /// <remarks>
        /// Get a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingPlan</returns>
        System.Threading.Tasks.Task<PricingPlan> GetPricingPlanAsync(string planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Pricing Plan
        /// </summary>
        /// <remarks>
        /// Get a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingPlan>> GetPricingPlanWithHttpInfoAsync(string planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Pricing Plans
        /// </summary>
        /// <remarks>
        /// Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingPlans</returns>
        System.Threading.Tasks.Task<PricingPlans> GetPricingPlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Pricing Plans
        /// </summary>
        /// <remarks>
        /// Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingPlans)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingPlans>> GetPricingPlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Connect to Stripe
        /// </summary>
        /// <remarks>
        /// Connect information to Stripe. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LinkPlanToStripeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Connect to Stripe
        /// </summary>
        /// <remarks>
        /// Connect information to Stripe. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinkPlanToStripeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Pricing Plan
        /// </summary>
        /// <remarks>
        /// Update a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePricingPlanAsync(string planId, SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Pricing Plan
        /// </summary>
        /// <remarks>
        /// Update a pricing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePricingPlanWithHttpInfoAsync(string planId, SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Used Flag
        /// </summary>
        /// <remarks>
        /// Update price plan and feature menu/pricing unit to used. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePricingPlansUsedParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePricingPlansUsedAsync(UpdatePricingPlansUsedParam updatePricingPlansUsedParam = default(UpdatePricingPlansUsedParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Used Flag
        /// </summary>
        /// <remarks>
        /// Update price plan and feature menu/pricing unit to used. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePricingPlansUsedParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePricingPlansUsedWithHttpInfoAsync(UpdatePricingPlansUsedParam updatePricingPlansUsedParam = default(UpdatePricingPlansUsedParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingPlansApi : IPricingPlansApiSync, IPricingPlansApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PricingPlansApi : IPricingPlansApi
    {
        private pricingapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingPlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricingPlansApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingPlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricingPlansApi(string basePath)
        {
            this.Configuration = pricingapi.Client.Configuration.MergeConfigurations(
                pricingapi.Client.GlobalConfiguration.Instance,
                new pricingapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingPlansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricingPlansApi(pricingapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = pricingapi.Client.Configuration.MergeConfigurations(
                pricingapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingPlansApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PricingPlansApi(pricingapi.Client.ISynchronousClient client, pricingapi.Client.IAsynchronousClient asyncClient, pricingapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public pricingapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public pricingapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pricingapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pricingapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Pricing Plan Create a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingPlan</returns>
        public PricingPlan CreatePricingPlan(SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<PricingPlan> localVarResponse = CreatePricingPlanWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Pricing Plan Create a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingPlan</returns>
        public pricingapi.Client.ApiResponse<PricingPlan> CreatePricingPlanWithHttpInfo(SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PricingPlansApi.CreatePricingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricingPlan>("/plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePricingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Pricing Plan Create a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingPlan</returns>
        public async System.Threading.Tasks.Task<PricingPlan> CreatePricingPlanAsync(SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<PricingPlan> localVarResponse = await CreatePricingPlanWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Pricing Plan Create a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingPlan)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<PricingPlan>> CreatePricingPlanWithHttpInfoAsync(SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PricingPlansApi.CreatePricingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricingPlan>("/plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePricingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all Plans, Menus, Units, Meters and Tax Rates Unconditionally remove all rate plans, menus, units, meters and tax rates. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates(int operationIndex = 0)
        {
            DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithHttpInfo();
        }

        /// <summary>
        /// Delete all Plans, Menus, Units, Meters and Tax Rates Unconditionally remove all rate plans, menus, units, meters and tax rates. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithHttpInfo(int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingPlansApi.DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/plans-initialization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all Plans, Menus, Units, Meters and Tax Rates Unconditionally remove all rate plans, menus, units, meters and tax rates. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all Plans, Menus, Units, Meters and Tax Rates Unconditionally remove all rate plans, menus, units, meters and tax rates. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingPlansApi.DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/plans-initialization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Pricing Plan Delete a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePricingPlan(string planId, int operationIndex = 0)
        {
            DeletePricingPlanWithHttpInfo(planId);
        }

        /// <summary>
        /// Delete Pricing Plan Delete a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> DeletePricingPlanWithHttpInfo(string planId, int operationIndex = 0)
        {
            // verify the required parameter 'planId' is set
            if (planId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'planId' when calling PricingPlansApi->DeletePricingPlan");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_id", pricingapi.Client.ClientUtils.ParameterToString(planId)); // path parameter

            localVarRequestOptions.Operation = "PricingPlansApi.DeletePricingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/plans/{plan_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePricingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Pricing Plan Delete a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePricingPlanAsync(string planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePricingPlanWithHttpInfoAsync(planId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Pricing Plan Delete a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> DeletePricingPlanWithHttpInfoAsync(string planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'planId' is set
            if (planId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'planId' when calling PricingPlansApi->DeletePricingPlan");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_id", pricingapi.Client.ClientUtils.ParameterToString(planId)); // path parameter

            localVarRequestOptions.Operation = "PricingPlansApi.DeletePricingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/plans/{plan_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePricingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Product Data from Stripe Delete product data from Stripe. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteStripePlan(int operationIndex = 0)
        {
            DeleteStripePlanWithHttpInfo();
        }

        /// <summary>
        /// Delete Product Data from Stripe Delete product data from Stripe. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> DeleteStripePlanWithHttpInfo(int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingPlansApi.DeleteStripePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/stripe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStripePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Product Data from Stripe Delete product data from Stripe. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStripePlanAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteStripePlanWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Product Data from Stripe Delete product data from Stripe. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> DeleteStripePlanWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingPlansApi.DeleteStripePlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/stripe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStripePlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pricing Plan Get a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingPlan</returns>
        public PricingPlan GetPricingPlan(string planId, int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<PricingPlan> localVarResponse = GetPricingPlanWithHttpInfo(planId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pricing Plan Get a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingPlan</returns>
        public pricingapi.Client.ApiResponse<PricingPlan> GetPricingPlanWithHttpInfo(string planId, int operationIndex = 0)
        {
            // verify the required parameter 'planId' is set
            if (planId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'planId' when calling PricingPlansApi->GetPricingPlan");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_id", pricingapi.Client.ClientUtils.ParameterToString(planId)); // path parameter

            localVarRequestOptions.Operation = "PricingPlansApi.GetPricingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PricingPlan>("/plans/{plan_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pricing Plan Get a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingPlan</returns>
        public async System.Threading.Tasks.Task<PricingPlan> GetPricingPlanAsync(string planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<PricingPlan> localVarResponse = await GetPricingPlanWithHttpInfoAsync(planId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pricing Plan Get a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingPlan)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<PricingPlan>> GetPricingPlanWithHttpInfoAsync(string planId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'planId' is set
            if (planId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'planId' when calling PricingPlansApi->GetPricingPlan");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_id", pricingapi.Client.ClientUtils.ParameterToString(planId)); // path parameter

            localVarRequestOptions.Operation = "PricingPlansApi.GetPricingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PricingPlan>("/plans/{plan_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pricing Plans Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingPlans</returns>
        public PricingPlans GetPricingPlans(int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<PricingPlans> localVarResponse = GetPricingPlansWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pricing Plans Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingPlans</returns>
        public pricingapi.Client.ApiResponse<PricingPlans> GetPricingPlansWithHttpInfo(int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingPlansApi.GetPricingPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PricingPlans>("/plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricingPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pricing Plans Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingPlans</returns>
        public async System.Threading.Tasks.Task<PricingPlans> GetPricingPlansAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<PricingPlans> localVarResponse = await GetPricingPlansWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pricing Plans Get pricing plans. Multiple feature menus are grouped together and defined as one pricing plan. Each tenant can choose a pricing plan defined here. If you have a specific tenant-specific rate (private pricing), create and connect the pricing plan specifically for that tenant. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingPlans)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<PricingPlans>> GetPricingPlansWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingPlansApi.GetPricingPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PricingPlans>("/plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricingPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Connect to Stripe Connect information to Stripe. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void LinkPlanToStripe(int operationIndex = 0)
        {
            LinkPlanToStripeWithHttpInfo();
        }

        /// <summary>
        /// Connect to Stripe Connect information to Stripe. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> LinkPlanToStripeWithHttpInfo(int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingPlansApi.LinkPlanToStripe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/stripe/init", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkPlanToStripe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Connect to Stripe Connect information to Stripe. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LinkPlanToStripeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LinkPlanToStripeWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Connect to Stripe Connect information to Stripe. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> LinkPlanToStripeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingPlansApi.LinkPlanToStripe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/stripe/init", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkPlanToStripe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pricing Plan Update a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdatePricingPlan(string planId, SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0)
        {
            UpdatePricingPlanWithHttpInfo(planId, body);
        }

        /// <summary>
        /// Update Pricing Plan Update a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> UpdatePricingPlanWithHttpInfo(string planId, SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0)
        {
            // verify the required parameter 'planId' is set
            if (planId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'planId' when calling PricingPlansApi->UpdatePricingPlan");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_id", pricingapi.Client.ClientUtils.ParameterToString(planId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PricingPlansApi.UpdatePricingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/plans/{plan_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePricingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pricing Plan Update a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePricingPlanAsync(string planId, SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdatePricingPlanWithHttpInfoAsync(planId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Pricing Plan Update a pricing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="planId">Pricing Plan ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> UpdatePricingPlanWithHttpInfoAsync(string planId, SavePricingPlanParam body = default(SavePricingPlanParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'planId' is set
            if (planId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'planId' when calling PricingPlansApi->UpdatePricingPlan");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("plan_id", pricingapi.Client.ClientUtils.ParameterToString(planId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PricingPlansApi.UpdatePricingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/plans/{plan_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePricingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Used Flag Update price plan and feature menu/pricing unit to used. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePricingPlansUsedParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdatePricingPlansUsed(UpdatePricingPlansUsedParam updatePricingPlansUsedParam = default(UpdatePricingPlansUsedParam), int operationIndex = 0)
        {
            UpdatePricingPlansUsedWithHttpInfo(updatePricingPlansUsedParam);
        }

        /// <summary>
        /// Update Used Flag Update price plan and feature menu/pricing unit to used. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePricingPlansUsedParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> UpdatePricingPlansUsedWithHttpInfo(UpdatePricingPlansUsedParam updatePricingPlansUsedParam = default(UpdatePricingPlansUsedParam), int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updatePricingPlansUsedParam;

            localVarRequestOptions.Operation = "PricingPlansApi.UpdatePricingPlansUsed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/plans/used", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePricingPlansUsed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Used Flag Update price plan and feature menu/pricing unit to used. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePricingPlansUsedParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePricingPlansUsedAsync(UpdatePricingPlansUsedParam updatePricingPlansUsedParam = default(UpdatePricingPlansUsedParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdatePricingPlansUsedWithHttpInfoAsync(updatePricingPlansUsedParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Used Flag Update price plan and feature menu/pricing unit to used. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePricingPlansUsedParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> UpdatePricingPlansUsedWithHttpInfoAsync(UpdatePricingPlansUsedParam updatePricingPlansUsedParam = default(UpdatePricingPlansUsedParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updatePricingPlansUsedParam;

            localVarRequestOptions.Operation = "PricingPlansApi.UpdatePricingPlansUsed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/plans/used", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePricingPlansUsed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
