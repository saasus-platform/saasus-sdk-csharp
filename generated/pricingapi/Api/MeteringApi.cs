/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using pricingapi.Client;
using pricingapi.Model;

namespace pricingapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeteringApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Metering Unit
        /// </summary>
        /// <remarks>
        /// Create a metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnit</returns>
        MeteringUnit CreateMeteringUnit(MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0);

        /// <summary>
        /// Create Metering Unit
        /// </summary>
        /// <remarks>
        /// Create a metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnit</returns>
        ApiResponse<MeteringUnit> CreateMeteringUnitWithHttpInfo(MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0);
        /// <summary>
        /// Delete Metering Unit
        /// </summary>
        /// <remarks>
        /// Delete metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteMeteringUnitByID(string meteringUnitId, int operationIndex = 0);

        /// <summary>
        /// Delete Metering Unit
        /// </summary>
        /// <remarks>
        /// Delete metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMeteringUnitByIDWithHttpInfo(string meteringUnitId, int operationIndex = 0);
        /// <summary>
        /// Delete Metering Unit Count for Specified Timestamp
        /// </summary>
        /// <remarks>
        /// Deletes metering unit count for the specified timestamp. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteMeteringUnitTimestampCount(string tenantId, string meteringUnitName, int timestamp, int operationIndex = 0);

        /// <summary>
        /// Delete Metering Unit Count for Specified Timestamp
        /// </summary>
        /// <remarks>
        /// Deletes metering unit count for the specified timestamp. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMeteringUnitTimestampCountWithHttpInfo(string tenantId, string meteringUnitName, int timestamp, int operationIndex = 0);
        /// <summary>
        /// Get Metering Unit Count for Specific Date
        /// </summary>
        /// <remarks>
        /// Gets the metering unit count for a specific date. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitDateCount</returns>
        MeteringUnitDateCount GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate(string tenantId, string meteringUnitName, string date, int operationIndex = 0);

        /// <summary>
        /// Get Metering Unit Count for Specific Date
        /// </summary>
        /// <remarks>
        /// Gets the metering unit count for a specific date. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitDateCount</returns>
        ApiResponse<MeteringUnitDateCount> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithHttpInfo(string tenantId, string meteringUnitName, string date, int operationIndex = 0);
        /// <summary>
        /// Obtain metering unit counts for a specified date/time period
        /// </summary>
        /// <remarks>
        /// Obtain metering unit counts for a specified date/time period. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="startTimestamp">Start Date-Time (optional)</param>
        /// <param name="endTimestamp">End Date-Time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitDatePeriodCounts</returns>
        MeteringUnitDatePeriodCounts GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(string tenantId, string meteringUnitName, int? startTimestamp = default(int?), int? endTimestamp = default(int?), int operationIndex = 0);

        /// <summary>
        /// Obtain metering unit counts for a specified date/time period
        /// </summary>
        /// <remarks>
        /// Obtain metering unit counts for a specified date/time period. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="startTimestamp">Start Date-Time (optional)</param>
        /// <param name="endTimestamp">End Date-Time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitDatePeriodCounts</returns>
        ApiResponse<MeteringUnitDatePeriodCounts> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithHttpInfo(string tenantId, string meteringUnitName, int? startTimestamp = default(int?), int? endTimestamp = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Metering Unit Count for the Current Day
        /// </summary>
        /// <remarks>
        /// Get the metering unit count for the current day. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitDateCount</returns>
        MeteringUnitDateCount GetMeteringUnitDateCountByTenantIdAndUnitNameToday(string tenantId, string meteringUnitName, int operationIndex = 0);

        /// <summary>
        /// Get Metering Unit Count for the Current Day
        /// </summary>
        /// <remarks>
        /// Get the metering unit count for the current day. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitDateCount</returns>
        ApiResponse<MeteringUnitDateCount> GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithHttpInfo(string tenantId, string meteringUnitName, int operationIndex = 0);
        /// <summary>
        /// Get All Metering Unit Counts for a Specified Date
        /// </summary>
        /// <remarks>
        /// Gets the total metering unit count for the specified date. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitDateCounts</returns>
        MeteringUnitDateCounts GetMeteringUnitDateCountsByTenantIdAndDate(string tenantId, string date, int operationIndex = 0);

        /// <summary>
        /// Get All Metering Unit Counts for a Specified Date
        /// </summary>
        /// <remarks>
        /// Gets the total metering unit count for the specified date. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitDateCounts</returns>
        ApiResponse<MeteringUnitDateCounts> GetMeteringUnitDateCountsByTenantIdAndDateWithHttpInfo(string tenantId, string date, int operationIndex = 0);
        /// <summary>
        /// Get the Metering Unit Count for the Specified Month
        /// </summary>
        /// <remarks>
        /// Gets the metering unit count for the specified month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitMonthCount</returns>
        MeteringUnitMonthCount GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(string tenantId, string meteringUnitName, string month, int operationIndex = 0);

        /// <summary>
        /// Get the Metering Unit Count for the Specified Month
        /// </summary>
        /// <remarks>
        /// Gets the metering unit count for the specified month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitMonthCount</returns>
        ApiResponse<MeteringUnitMonthCount> GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithHttpInfo(string tenantId, string meteringUnitName, string month, int operationIndex = 0);
        /// <summary>
        /// Get Metering Unit Count for the Current Month
        /// </summary>
        /// <remarks>
        /// Get the metering unit count for the current month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitMonthCount</returns>
        MeteringUnitMonthCount GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(string tenantId, string meteringUnitName, int operationIndex = 0);

        /// <summary>
        /// Get Metering Unit Count for the Current Month
        /// </summary>
        /// <remarks>
        /// Get the metering unit count for the current month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitMonthCount</returns>
        ApiResponse<MeteringUnitMonthCount> GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithHttpInfo(string tenantId, string meteringUnitName, int operationIndex = 0);
        /// <summary>
        /// Get All Metering Unit Counts for the Specified Month
        /// </summary>
        /// <remarks>
        /// Gets all metering unit counts for the specified month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitMonthCounts</returns>
        MeteringUnitMonthCounts GetMeteringUnitMonthCountsByTenantIdAndMonth(string tenantId, string month, int operationIndex = 0);

        /// <summary>
        /// Get All Metering Unit Counts for the Specified Month
        /// </summary>
        /// <remarks>
        /// Gets all metering unit counts for the specified month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitMonthCounts</returns>
        ApiResponse<MeteringUnitMonthCounts> GetMeteringUnitMonthCountsByTenantIdAndMonthWithHttpInfo(string tenantId, string month, int operationIndex = 0);
        /// <summary>
        /// Get all metering units
        /// </summary>
        /// <remarks>
        /// Get all metering units. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnits</returns>
        MeteringUnits GetMeteringUnits(int operationIndex = 0);

        /// <summary>
        /// Get all metering units
        /// </summary>
        /// <remarks>
        /// Get all metering units. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnits</returns>
        ApiResponse<MeteringUnits> GetMeteringUnitsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Metering Unit
        /// </summary>
        /// <remarks>
        /// Update metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateMeteringUnitByID(string meteringUnitId, MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0);

        /// <summary>
        /// Update Metering Unit
        /// </summary>
        /// <remarks>
        /// Update metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMeteringUnitByIDWithHttpInfo(string meteringUnitId, MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0);
        /// <summary>
        /// Update Metering Unit Count for Specified Timestamp
        /// </summary>
        /// <remarks>
        /// Update metering unit count for the specified timestamp. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="updateMeteringUnitTimestampCountParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitTimestampCount</returns>
        MeteringUnitTimestampCount UpdateMeteringUnitTimestampCount(string tenantId, string meteringUnitName, int timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam = default(UpdateMeteringUnitTimestampCountParam), int operationIndex = 0);

        /// <summary>
        /// Update Metering Unit Count for Specified Timestamp
        /// </summary>
        /// <remarks>
        /// Update metering unit count for the specified timestamp. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="updateMeteringUnitTimestampCountParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitTimestampCount</returns>
        ApiResponse<MeteringUnitTimestampCount> UpdateMeteringUnitTimestampCountWithHttpInfo(string tenantId, string meteringUnitName, int timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam = default(UpdateMeteringUnitTimestampCountParam), int operationIndex = 0);
        /// <summary>
        /// Update Metering Unit Count for Current Time
        /// </summary>
        /// <remarks>
        /// Update the metering unit count for the current time. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="updateMeteringUnitTimestampCountNowParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitTimestampCount</returns>
        MeteringUnitTimestampCount UpdateMeteringUnitTimestampCountNow(string tenantId, string meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam = default(UpdateMeteringUnitTimestampCountNowParam), int operationIndex = 0);

        /// <summary>
        /// Update Metering Unit Count for Current Time
        /// </summary>
        /// <remarks>
        /// Update the metering unit count for the current time. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="updateMeteringUnitTimestampCountNowParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitTimestampCount</returns>
        ApiResponse<MeteringUnitTimestampCount> UpdateMeteringUnitTimestampCountNowWithHttpInfo(string tenantId, string meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam = default(UpdateMeteringUnitTimestampCountNowParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeteringApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Metering Unit
        /// </summary>
        /// <remarks>
        /// Create a metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnit</returns>
        System.Threading.Tasks.Task<MeteringUnit> CreateMeteringUnitAsync(MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Metering Unit
        /// </summary>
        /// <remarks>
        /// Create a metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnit)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnit>> CreateMeteringUnitWithHttpInfoAsync(MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Metering Unit
        /// </summary>
        /// <remarks>
        /// Delete metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMeteringUnitByIDAsync(string meteringUnitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Metering Unit
        /// </summary>
        /// <remarks>
        /// Delete metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeteringUnitByIDWithHttpInfoAsync(string meteringUnitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Metering Unit Count for Specified Timestamp
        /// </summary>
        /// <remarks>
        /// Deletes metering unit count for the specified timestamp. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMeteringUnitTimestampCountAsync(string tenantId, string meteringUnitName, int timestamp, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Metering Unit Count for Specified Timestamp
        /// </summary>
        /// <remarks>
        /// Deletes metering unit count for the specified timestamp. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMeteringUnitTimestampCountWithHttpInfoAsync(string tenantId, string meteringUnitName, int timestamp, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Metering Unit Count for Specific Date
        /// </summary>
        /// <remarks>
        /// Gets the metering unit count for a specific date. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitDateCount</returns>
        System.Threading.Tasks.Task<MeteringUnitDateCount> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateAsync(string tenantId, string meteringUnitName, string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Metering Unit Count for Specific Date
        /// </summary>
        /// <remarks>
        /// Gets the metering unit count for a specific date. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitDateCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitDateCount>> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithHttpInfoAsync(string tenantId, string meteringUnitName, string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Obtain metering unit counts for a specified date/time period
        /// </summary>
        /// <remarks>
        /// Obtain metering unit counts for a specified date/time period. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="startTimestamp">Start Date-Time (optional)</param>
        /// <param name="endTimestamp">End Date-Time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitDatePeriodCounts</returns>
        System.Threading.Tasks.Task<MeteringUnitDatePeriodCounts> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodAsync(string tenantId, string meteringUnitName, int? startTimestamp = default(int?), int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Obtain metering unit counts for a specified date/time period
        /// </summary>
        /// <remarks>
        /// Obtain metering unit counts for a specified date/time period. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="startTimestamp">Start Date-Time (optional)</param>
        /// <param name="endTimestamp">End Date-Time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitDatePeriodCounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitDatePeriodCounts>> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithHttpInfoAsync(string tenantId, string meteringUnitName, int? startTimestamp = default(int?), int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Metering Unit Count for the Current Day
        /// </summary>
        /// <remarks>
        /// Get the metering unit count for the current day. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitDateCount</returns>
        System.Threading.Tasks.Task<MeteringUnitDateCount> GetMeteringUnitDateCountByTenantIdAndUnitNameTodayAsync(string tenantId, string meteringUnitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Metering Unit Count for the Current Day
        /// </summary>
        /// <remarks>
        /// Get the metering unit count for the current day. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitDateCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitDateCount>> GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithHttpInfoAsync(string tenantId, string meteringUnitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Metering Unit Counts for a Specified Date
        /// </summary>
        /// <remarks>
        /// Gets the total metering unit count for the specified date. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitDateCounts</returns>
        System.Threading.Tasks.Task<MeteringUnitDateCounts> GetMeteringUnitDateCountsByTenantIdAndDateAsync(string tenantId, string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Metering Unit Counts for a Specified Date
        /// </summary>
        /// <remarks>
        /// Gets the total metering unit count for the specified date. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitDateCounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitDateCounts>> GetMeteringUnitDateCountsByTenantIdAndDateWithHttpInfoAsync(string tenantId, string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the Metering Unit Count for the Specified Month
        /// </summary>
        /// <remarks>
        /// Gets the metering unit count for the specified month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitMonthCount</returns>
        System.Threading.Tasks.Task<MeteringUnitMonthCount> GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthAsync(string tenantId, string meteringUnitName, string month, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the Metering Unit Count for the Specified Month
        /// </summary>
        /// <remarks>
        /// Gets the metering unit count for the specified month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitMonthCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitMonthCount>> GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithHttpInfoAsync(string tenantId, string meteringUnitName, string month, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Metering Unit Count for the Current Month
        /// </summary>
        /// <remarks>
        /// Get the metering unit count for the current month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitMonthCount</returns>
        System.Threading.Tasks.Task<MeteringUnitMonthCount> GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthAsync(string tenantId, string meteringUnitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Metering Unit Count for the Current Month
        /// </summary>
        /// <remarks>
        /// Get the metering unit count for the current month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitMonthCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitMonthCount>> GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithHttpInfoAsync(string tenantId, string meteringUnitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get All Metering Unit Counts for the Specified Month
        /// </summary>
        /// <remarks>
        /// Gets all metering unit counts for the specified month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitMonthCounts</returns>
        System.Threading.Tasks.Task<MeteringUnitMonthCounts> GetMeteringUnitMonthCountsByTenantIdAndMonthAsync(string tenantId, string month, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get All Metering Unit Counts for the Specified Month
        /// </summary>
        /// <remarks>
        /// Gets all metering unit counts for the specified month. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitMonthCounts)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitMonthCounts>> GetMeteringUnitMonthCountsByTenantIdAndMonthWithHttpInfoAsync(string tenantId, string month, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all metering units
        /// </summary>
        /// <remarks>
        /// Get all metering units. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnits</returns>
        System.Threading.Tasks.Task<MeteringUnits> GetMeteringUnitsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all metering units
        /// </summary>
        /// <remarks>
        /// Get all metering units. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnits)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnits>> GetMeteringUnitsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Metering Unit
        /// </summary>
        /// <remarks>
        /// Update metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMeteringUnitByIDAsync(string meteringUnitId, MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Metering Unit
        /// </summary>
        /// <remarks>
        /// Update metering unit. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMeteringUnitByIDWithHttpInfoAsync(string meteringUnitId, MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Metering Unit Count for Specified Timestamp
        /// </summary>
        /// <remarks>
        /// Update metering unit count for the specified timestamp. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="updateMeteringUnitTimestampCountParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitTimestampCount</returns>
        System.Threading.Tasks.Task<MeteringUnitTimestampCount> UpdateMeteringUnitTimestampCountAsync(string tenantId, string meteringUnitName, int timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam = default(UpdateMeteringUnitTimestampCountParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Metering Unit Count for Specified Timestamp
        /// </summary>
        /// <remarks>
        /// Update metering unit count for the specified timestamp. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="updateMeteringUnitTimestampCountParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitTimestampCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitTimestampCount>> UpdateMeteringUnitTimestampCountWithHttpInfoAsync(string tenantId, string meteringUnitName, int timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam = default(UpdateMeteringUnitTimestampCountParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Metering Unit Count for Current Time
        /// </summary>
        /// <remarks>
        /// Update the metering unit count for the current time. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="updateMeteringUnitTimestampCountNowParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitTimestampCount</returns>
        System.Threading.Tasks.Task<MeteringUnitTimestampCount> UpdateMeteringUnitTimestampCountNowAsync(string tenantId, string meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam = default(UpdateMeteringUnitTimestampCountNowParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Metering Unit Count for Current Time
        /// </summary>
        /// <remarks>
        /// Update the metering unit count for the current time. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="updateMeteringUnitTimestampCountNowParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitTimestampCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<MeteringUnitTimestampCount>> UpdateMeteringUnitTimestampCountNowWithHttpInfoAsync(string tenantId, string meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam = default(UpdateMeteringUnitTimestampCountNowParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeteringApi : IMeteringApiSync, IMeteringApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeteringApi : IMeteringApi
    {
        private pricingapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeteringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeteringApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeteringApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeteringApi(string basePath)
        {
            this.Configuration = pricingapi.Client.Configuration.MergeConfigurations(
                pricingapi.Client.GlobalConfiguration.Instance,
                new pricingapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeteringApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeteringApi(pricingapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = pricingapi.Client.Configuration.MergeConfigurations(
                pricingapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeteringApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MeteringApi(pricingapi.Client.ISynchronousClient client, pricingapi.Client.IAsynchronousClient asyncClient, pricingapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public pricingapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public pricingapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pricingapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pricingapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Metering Unit Create a metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnit</returns>
        public MeteringUnit CreateMeteringUnit(MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnit> localVarResponse = CreateMeteringUnitWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Metering Unit Create a metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnit</returns>
        public pricingapi.Client.ApiResponse<MeteringUnit> CreateMeteringUnitWithHttpInfo(MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MeteringApi.CreateMeteringUnit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MeteringUnit>("/metering/units", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeteringUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Metering Unit Create a metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnit</returns>
        public async System.Threading.Tasks.Task<MeteringUnit> CreateMeteringUnitAsync(MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnit> localVarResponse = await CreateMeteringUnitWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Metering Unit Create a metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnit)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnit>> CreateMeteringUnitWithHttpInfoAsync(MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MeteringApi.CreateMeteringUnit";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MeteringUnit>("/metering/units", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMeteringUnit", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Metering Unit Delete metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteMeteringUnitByID(string meteringUnitId, int operationIndex = 0)
        {
            DeleteMeteringUnitByIDWithHttpInfo(meteringUnitId);
        }

        /// <summary>
        /// Delete Metering Unit Delete metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> DeleteMeteringUnitByIDWithHttpInfo(string meteringUnitId, int operationIndex = 0)
        {
            // verify the required parameter 'meteringUnitId' is set
            if (meteringUnitId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitId' when calling MeteringApi->DeleteMeteringUnitByID");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("metering_unit_id", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitId)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.DeleteMeteringUnitByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/metering/units/{metering_unit_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeteringUnitByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Metering Unit Delete metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMeteringUnitByIDAsync(string meteringUnitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMeteringUnitByIDWithHttpInfoAsync(meteringUnitId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Metering Unit Delete metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> DeleteMeteringUnitByIDWithHttpInfoAsync(string meteringUnitId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'meteringUnitId' is set
            if (meteringUnitId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitId' when calling MeteringApi->DeleteMeteringUnitByID");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("metering_unit_id", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitId)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.DeleteMeteringUnitByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/metering/units/{metering_unit_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeteringUnitByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Metering Unit Count for Specified Timestamp Deletes metering unit count for the specified timestamp. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteMeteringUnitTimestampCount(string tenantId, string meteringUnitName, int timestamp, int operationIndex = 0)
        {
            DeleteMeteringUnitTimestampCountWithHttpInfo(tenantId, meteringUnitName, timestamp);
        }

        /// <summary>
        /// Delete Metering Unit Count for Specified Timestamp Deletes metering unit count for the specified timestamp. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> DeleteMeteringUnitTimestampCountWithHttpInfo(string tenantId, string meteringUnitName, int timestamp, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->DeleteMeteringUnitTimestampCount");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->DeleteMeteringUnitTimestampCount");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.PathParameters.Add("timestamp", pricingapi.Client.ClientUtils.ParameterToString(timestamp)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.DeleteMeteringUnitTimestampCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeteringUnitTimestampCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Metering Unit Count for Specified Timestamp Deletes metering unit count for the specified timestamp. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMeteringUnitTimestampCountAsync(string tenantId, string meteringUnitName, int timestamp, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteMeteringUnitTimestampCountWithHttpInfoAsync(tenantId, meteringUnitName, timestamp, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Metering Unit Count for Specified Timestamp Deletes metering unit count for the specified timestamp. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> DeleteMeteringUnitTimestampCountWithHttpInfoAsync(string tenantId, string meteringUnitName, int timestamp, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->DeleteMeteringUnitTimestampCount");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->DeleteMeteringUnitTimestampCount");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.PathParameters.Add("timestamp", pricingapi.Client.ClientUtils.ParameterToString(timestamp)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.DeleteMeteringUnitTimestampCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMeteringUnitTimestampCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metering Unit Count for Specific Date Gets the metering unit count for a specific date. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitDateCount</returns>
        public MeteringUnitDateCount GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate(string tenantId, string meteringUnitName, string date, int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitDateCount> localVarResponse = GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithHttpInfo(tenantId, meteringUnitName, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metering Unit Count for Specific Date Gets the metering unit count for a specific date. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitDateCount</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitDateCount> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithHttpInfo(string tenantId, string meteringUnitName, string date, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'date' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", pricingapi.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeteringUnitDateCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/date/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metering Unit Count for Specific Date Gets the metering unit count for a specific date. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitDateCount</returns>
        public async System.Threading.Tasks.Task<MeteringUnitDateCount> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateAsync(string tenantId, string meteringUnitName, string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitDateCount> localVarResponse = await GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithHttpInfoAsync(tenantId, meteringUnitName, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metering Unit Count for Specific Date Gets the metering unit count for a specific date. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitDateCount)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitDateCount>> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithHttpInfoAsync(string tenantId, string meteringUnitName, string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'date' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", pricingapi.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeteringUnitDateCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/date/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain metering unit counts for a specified date/time period Obtain metering unit counts for a specified date/time period. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="startTimestamp">Start Date-Time (optional)</param>
        /// <param name="endTimestamp">End Date-Time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitDatePeriodCounts</returns>
        public MeteringUnitDatePeriodCounts GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(string tenantId, string meteringUnitName, int? startTimestamp = default(int?), int? endTimestamp = default(int?), int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitDatePeriodCounts> localVarResponse = GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithHttpInfo(tenantId, meteringUnitName, startTimestamp, endTimestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain metering unit counts for a specified date/time period Obtain metering unit counts for a specified date/time period. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="startTimestamp">Start Date-Time (optional)</param>
        /// <param name="endTimestamp">End Date-Time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitDatePeriodCounts</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitDatePeriodCounts> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithHttpInfo(string tenantId, string meteringUnitName, int? startTimestamp = default(int?), int? endTimestamp = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            if (startTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(pricingapi.Client.ClientUtils.ParameterToMultiMap("", "start_timestamp", startTimestamp));
            }
            if (endTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(pricingapi.Client.ClientUtils.ParameterToMultiMap("", "end_timestamp", endTimestamp));
            }

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeteringUnitDatePeriodCounts>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/date-period", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Obtain metering unit counts for a specified date/time period Obtain metering unit counts for a specified date/time period. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="startTimestamp">Start Date-Time (optional)</param>
        /// <param name="endTimestamp">End Date-Time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitDatePeriodCounts</returns>
        public async System.Threading.Tasks.Task<MeteringUnitDatePeriodCounts> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodAsync(string tenantId, string meteringUnitName, int? startTimestamp = default(int?), int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitDatePeriodCounts> localVarResponse = await GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithHttpInfoAsync(tenantId, meteringUnitName, startTimestamp, endTimestamp, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Obtain metering unit counts for a specified date/time period Obtain metering unit counts for a specified date/time period. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="startTimestamp">Start Date-Time (optional)</param>
        /// <param name="endTimestamp">End Date-Time (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitDatePeriodCounts)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitDatePeriodCounts>> GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithHttpInfoAsync(string tenantId, string meteringUnitName, int? startTimestamp = default(int?), int? endTimestamp = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            if (startTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(pricingapi.Client.ClientUtils.ParameterToMultiMap("", "start_timestamp", startTimestamp));
            }
            if (endTimestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(pricingapi.Client.ClientUtils.ParameterToMultiMap("", "end_timestamp", endTimestamp));
            }

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeteringUnitDatePeriodCounts>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/date-period", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metering Unit Count for the Current Day Get the metering unit count for the current day. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitDateCount</returns>
        public MeteringUnitDateCount GetMeteringUnitDateCountByTenantIdAndUnitNameToday(string tenantId, string meteringUnitName, int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitDateCount> localVarResponse = GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithHttpInfo(tenantId, meteringUnitName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metering Unit Count for the Current Day Get the metering unit count for the current day. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitDateCount</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitDateCount> GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithHttpInfo(string tenantId, string meteringUnitName, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameToday");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameToday");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitDateCountByTenantIdAndUnitNameToday";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeteringUnitDateCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/today", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitDateCountByTenantIdAndUnitNameToday", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metering Unit Count for the Current Day Get the metering unit count for the current day. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitDateCount</returns>
        public async System.Threading.Tasks.Task<MeteringUnitDateCount> GetMeteringUnitDateCountByTenantIdAndUnitNameTodayAsync(string tenantId, string meteringUnitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitDateCount> localVarResponse = await GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithHttpInfoAsync(tenantId, meteringUnitName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metering Unit Count for the Current Day Get the metering unit count for the current day. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitDateCount)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitDateCount>> GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithHttpInfoAsync(string tenantId, string meteringUnitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameToday");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitDateCountByTenantIdAndUnitNameToday");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitDateCountByTenantIdAndUnitNameToday";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeteringUnitDateCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/today", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitDateCountByTenantIdAndUnitNameToday", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Metering Unit Counts for a Specified Date Gets the total metering unit count for the specified date. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitDateCounts</returns>
        public MeteringUnitDateCounts GetMeteringUnitDateCountsByTenantIdAndDate(string tenantId, string date, int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitDateCounts> localVarResponse = GetMeteringUnitDateCountsByTenantIdAndDateWithHttpInfo(tenantId, date);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Metering Unit Counts for a Specified Date Gets the total metering unit count for the specified date. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitDateCounts</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitDateCounts> GetMeteringUnitDateCountsByTenantIdAndDateWithHttpInfo(string tenantId, string date, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitDateCountsByTenantIdAndDate");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'date' when calling MeteringApi->GetMeteringUnitDateCountsByTenantIdAndDate");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", pricingapi.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitDateCountsByTenantIdAndDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeteringUnitDateCounts>("/metering/tenants/{tenant_id}/units/date/{date}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitDateCountsByTenantIdAndDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Metering Unit Counts for a Specified Date Gets the total metering unit count for the specified date. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitDateCounts</returns>
        public async System.Threading.Tasks.Task<MeteringUnitDateCounts> GetMeteringUnitDateCountsByTenantIdAndDateAsync(string tenantId, string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitDateCounts> localVarResponse = await GetMeteringUnitDateCountsByTenantIdAndDateWithHttpInfoAsync(tenantId, date, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Metering Unit Counts for a Specified Date Gets the total metering unit count for the specified date. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="date">Date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitDateCounts)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitDateCounts>> GetMeteringUnitDateCountsByTenantIdAndDateWithHttpInfoAsync(string tenantId, string date, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitDateCountsByTenantIdAndDate");
            }

            // verify the required parameter 'date' is set
            if (date == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'date' when calling MeteringApi->GetMeteringUnitDateCountsByTenantIdAndDate");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("date", pricingapi.Client.ClientUtils.ParameterToString(date)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitDateCountsByTenantIdAndDate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeteringUnitDateCounts>("/metering/tenants/{tenant_id}/units/date/{date}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitDateCountsByTenantIdAndDate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Metering Unit Count for the Specified Month Gets the metering unit count for the specified month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitMonthCount</returns>
        public MeteringUnitMonthCount GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(string tenantId, string meteringUnitName, string month, int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitMonthCount> localVarResponse = GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithHttpInfo(tenantId, meteringUnitName, month);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Metering Unit Count for the Specified Month Gets the metering unit count for the specified month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitMonthCount</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitMonthCount> GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithHttpInfo(string tenantId, string meteringUnitName, string month, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth");
            }

            // verify the required parameter 'month' is set
            if (month == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'month' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", pricingapi.Client.ClientUtils.ParameterToString(month)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeteringUnitMonthCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/month/{month}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the Metering Unit Count for the Specified Month Gets the metering unit count for the specified month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitMonthCount</returns>
        public async System.Threading.Tasks.Task<MeteringUnitMonthCount> GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthAsync(string tenantId, string meteringUnitName, string month, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitMonthCount> localVarResponse = await GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithHttpInfoAsync(tenantId, meteringUnitName, month, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the Metering Unit Count for the Specified Month Gets the metering unit count for the specified month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitMonthCount)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitMonthCount>> GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithHttpInfoAsync(string tenantId, string meteringUnitName, string month, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth");
            }

            // verify the required parameter 'month' is set
            if (month == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'month' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", pricingapi.Client.ClientUtils.ParameterToString(month)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeteringUnitMonthCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/month/{month}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metering Unit Count for the Current Month Get the metering unit count for the current month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitMonthCount</returns>
        public MeteringUnitMonthCount GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(string tenantId, string meteringUnitName, int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitMonthCount> localVarResponse = GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithHttpInfo(tenantId, meteringUnitName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metering Unit Count for the Current Month Get the metering unit count for the current month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitMonthCount</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitMonthCount> GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithHttpInfo(string tenantId, string meteringUnitName, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeteringUnitMonthCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/thismonth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metering Unit Count for the Current Month Get the metering unit count for the current month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitMonthCount</returns>
        public async System.Threading.Tasks.Task<MeteringUnitMonthCount> GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthAsync(string tenantId, string meteringUnitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitMonthCount> localVarResponse = await GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithHttpInfoAsync(tenantId, meteringUnitName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metering Unit Count for the Current Month Get the metering unit count for the current month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitMonthCount)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitMonthCount>> GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithHttpInfoAsync(string tenantId, string meteringUnitName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeteringUnitMonthCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/thismonth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Metering Unit Counts for the Specified Month Gets all metering unit counts for the specified month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitMonthCounts</returns>
        public MeteringUnitMonthCounts GetMeteringUnitMonthCountsByTenantIdAndMonth(string tenantId, string month, int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitMonthCounts> localVarResponse = GetMeteringUnitMonthCountsByTenantIdAndMonthWithHttpInfo(tenantId, month);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Metering Unit Counts for the Specified Month Gets all metering unit counts for the specified month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitMonthCounts</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitMonthCounts> GetMeteringUnitMonthCountsByTenantIdAndMonthWithHttpInfo(string tenantId, string month, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitMonthCountsByTenantIdAndMonth");
            }

            // verify the required parameter 'month' is set
            if (month == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'month' when calling MeteringApi->GetMeteringUnitMonthCountsByTenantIdAndMonth");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", pricingapi.Client.ClientUtils.ParameterToString(month)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitMonthCountsByTenantIdAndMonth";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeteringUnitMonthCounts>("/metering/tenants/{tenant_id}/units/month/{month}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitMonthCountsByTenantIdAndMonth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Metering Unit Counts for the Specified Month Gets all metering unit counts for the specified month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitMonthCounts</returns>
        public async System.Threading.Tasks.Task<MeteringUnitMonthCounts> GetMeteringUnitMonthCountsByTenantIdAndMonthAsync(string tenantId, string month, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitMonthCounts> localVarResponse = await GetMeteringUnitMonthCountsByTenantIdAndMonthWithHttpInfoAsync(tenantId, month, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Metering Unit Counts for the Specified Month Gets all metering unit counts for the specified month. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="month">Month</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitMonthCounts)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitMonthCounts>> GetMeteringUnitMonthCountsByTenantIdAndMonthWithHttpInfoAsync(string tenantId, string month, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->GetMeteringUnitMonthCountsByTenantIdAndMonth");
            }

            // verify the required parameter 'month' is set
            if (month == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'month' when calling MeteringApi->GetMeteringUnitMonthCountsByTenantIdAndMonth");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("month", pricingapi.Client.ClientUtils.ParameterToString(month)); // path parameter

            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnitMonthCountsByTenantIdAndMonth";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeteringUnitMonthCounts>("/metering/tenants/{tenant_id}/units/month/{month}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnitMonthCountsByTenantIdAndMonth", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all metering units Get all metering units. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnits</returns>
        public MeteringUnits GetMeteringUnits(int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnits> localVarResponse = GetMeteringUnitsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all metering units Get all metering units. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnits</returns>
        public pricingapi.Client.ApiResponse<MeteringUnits> GetMeteringUnitsWithHttpInfo(int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnits";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MeteringUnits>("/metering/units", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all metering units Get all metering units. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnits</returns>
        public async System.Threading.Tasks.Task<MeteringUnits> GetMeteringUnitsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnits> localVarResponse = await GetMeteringUnitsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all metering units Get all metering units. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnits)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnits>> GetMeteringUnitsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MeteringApi.GetMeteringUnits";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MeteringUnits>("/metering/units", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMeteringUnits", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Metering Unit Update metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateMeteringUnitByID(string meteringUnitId, MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0)
        {
            UpdateMeteringUnitByIDWithHttpInfo(meteringUnitId, body);
        }

        /// <summary>
        /// Update Metering Unit Update metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> UpdateMeteringUnitByIDWithHttpInfo(string meteringUnitId, MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0)
        {
            // verify the required parameter 'meteringUnitId' is set
            if (meteringUnitId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitId' when calling MeteringApi->UpdateMeteringUnitByID");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("metering_unit_id", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MeteringApi.UpdateMeteringUnitByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/metering/units/{metering_unit_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeteringUnitByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Metering Unit Update metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMeteringUnitByIDAsync(string meteringUnitId, MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateMeteringUnitByIDWithHttpInfoAsync(meteringUnitId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Metering Unit Update metering unit. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="meteringUnitId">Metering Unit ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> UpdateMeteringUnitByIDWithHttpInfoAsync(string meteringUnitId, MeteringUnitProps body = default(MeteringUnitProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'meteringUnitId' is set
            if (meteringUnitId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitId' when calling MeteringApi->UpdateMeteringUnitByID");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("metering_unit_id", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MeteringApi.UpdateMeteringUnitByID";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/metering/units/{metering_unit_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeteringUnitByID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Metering Unit Count for Specified Timestamp Update metering unit count for the specified timestamp. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="updateMeteringUnitTimestampCountParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitTimestampCount</returns>
        public MeteringUnitTimestampCount UpdateMeteringUnitTimestampCount(string tenantId, string meteringUnitName, int timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam = default(UpdateMeteringUnitTimestampCountParam), int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitTimestampCount> localVarResponse = UpdateMeteringUnitTimestampCountWithHttpInfo(tenantId, meteringUnitName, timestamp, updateMeteringUnitTimestampCountParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Metering Unit Count for Specified Timestamp Update metering unit count for the specified timestamp. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="updateMeteringUnitTimestampCountParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitTimestampCount</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitTimestampCount> UpdateMeteringUnitTimestampCountWithHttpInfo(string tenantId, string meteringUnitName, int timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam = default(UpdateMeteringUnitTimestampCountParam), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->UpdateMeteringUnitTimestampCount");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->UpdateMeteringUnitTimestampCount");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.PathParameters.Add("timestamp", pricingapi.Client.ClientUtils.ParameterToString(timestamp)); // path parameter
            localVarRequestOptions.Data = updateMeteringUnitTimestampCountParam;

            localVarRequestOptions.Operation = "MeteringApi.UpdateMeteringUnitTimestampCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeteringUnitTimestampCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeteringUnitTimestampCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Metering Unit Count for Specified Timestamp Update metering unit count for the specified timestamp. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="updateMeteringUnitTimestampCountParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitTimestampCount</returns>
        public async System.Threading.Tasks.Task<MeteringUnitTimestampCount> UpdateMeteringUnitTimestampCountAsync(string tenantId, string meteringUnitName, int timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam = default(UpdateMeteringUnitTimestampCountParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitTimestampCount> localVarResponse = await UpdateMeteringUnitTimestampCountWithHttpInfoAsync(tenantId, meteringUnitName, timestamp, updateMeteringUnitTimestampCountParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Metering Unit Count for Specified Timestamp Update metering unit count for the specified timestamp. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="timestamp">Timestamp</param>
        /// <param name="updateMeteringUnitTimestampCountParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitTimestampCount)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitTimestampCount>> UpdateMeteringUnitTimestampCountWithHttpInfoAsync(string tenantId, string meteringUnitName, int timestamp, UpdateMeteringUnitTimestampCountParam updateMeteringUnitTimestampCountParam = default(UpdateMeteringUnitTimestampCountParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->UpdateMeteringUnitTimestampCount");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->UpdateMeteringUnitTimestampCount");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.PathParameters.Add("timestamp", pricingapi.Client.ClientUtils.ParameterToString(timestamp)); // path parameter
            localVarRequestOptions.Data = updateMeteringUnitTimestampCountParam;

            localVarRequestOptions.Operation = "MeteringApi.UpdateMeteringUnitTimestampCount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MeteringUnitTimestampCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/timestamp/{timestamp}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeteringUnitTimestampCount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Metering Unit Count for Current Time Update the metering unit count for the current time. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="updateMeteringUnitTimestampCountNowParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MeteringUnitTimestampCount</returns>
        public MeteringUnitTimestampCount UpdateMeteringUnitTimestampCountNow(string tenantId, string meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam = default(UpdateMeteringUnitTimestampCountNowParam), int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<MeteringUnitTimestampCount> localVarResponse = UpdateMeteringUnitTimestampCountNowWithHttpInfo(tenantId, meteringUnitName, updateMeteringUnitTimestampCountNowParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Metering Unit Count for Current Time Update the metering unit count for the current time. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="updateMeteringUnitTimestampCountNowParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MeteringUnitTimestampCount</returns>
        public pricingapi.Client.ApiResponse<MeteringUnitTimestampCount> UpdateMeteringUnitTimestampCountNowWithHttpInfo(string tenantId, string meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam = default(UpdateMeteringUnitTimestampCountNowParam), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->UpdateMeteringUnitTimestampCountNow");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->UpdateMeteringUnitTimestampCountNow");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.Data = updateMeteringUnitTimestampCountNowParam;

            localVarRequestOptions.Operation = "MeteringApi.UpdateMeteringUnitTimestampCountNow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<MeteringUnitTimestampCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/now", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeteringUnitTimestampCountNow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Metering Unit Count for Current Time Update the metering unit count for the current time. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="updateMeteringUnitTimestampCountNowParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MeteringUnitTimestampCount</returns>
        public async System.Threading.Tasks.Task<MeteringUnitTimestampCount> UpdateMeteringUnitTimestampCountNowAsync(string tenantId, string meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam = default(UpdateMeteringUnitTimestampCountNowParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<MeteringUnitTimestampCount> localVarResponse = await UpdateMeteringUnitTimestampCountNowWithHttpInfoAsync(tenantId, meteringUnitName, updateMeteringUnitTimestampCountNowParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Metering Unit Count for Current Time Update the metering unit count for the current time. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="meteringUnitName">Metering Unit Name</param>
        /// <param name="updateMeteringUnitTimestampCountNowParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MeteringUnitTimestampCount)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<MeteringUnitTimestampCount>> UpdateMeteringUnitTimestampCountNowWithHttpInfoAsync(string tenantId, string meteringUnitName, UpdateMeteringUnitTimestampCountNowParam updateMeteringUnitTimestampCountNowParam = default(UpdateMeteringUnitTimestampCountNowParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling MeteringApi->UpdateMeteringUnitTimestampCountNow");
            }

            // verify the required parameter 'meteringUnitName' is set
            if (meteringUnitName == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'meteringUnitName' when calling MeteringApi->UpdateMeteringUnitTimestampCountNow");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", pricingapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metering_unit_name", pricingapi.Client.ClientUtils.ParameterToString(meteringUnitName)); // path parameter
            localVarRequestOptions.Data = updateMeteringUnitTimestampCountNowParam;

            localVarRequestOptions.Operation = "MeteringApi.UpdateMeteringUnitTimestampCountNow";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<MeteringUnitTimestampCount>("/metering/tenants/{tenant_id}/units/{metering_unit_name}/now", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMeteringUnitTimestampCountNow", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
