/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using pricingapi.Client;
using pricingapi.Model;

namespace pricingapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingMenusApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Create a pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingMenu</returns>
        PricingMenu CreatePricingMenu(SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0);

        /// <summary>
        /// Create a Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Create a pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingMenu</returns>
        ApiResponse<PricingMenu> CreatePricingMenuWithHttpInfo(SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0);
        /// <summary>
        /// Delete Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Delete pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePricingMenu(string menuId, int operationIndex = 0);

        /// <summary>
        /// Delete Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Delete pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePricingMenuWithHttpInfo(string menuId, int operationIndex = 0);
        /// <summary>
        /// Get Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Get a pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingMenu</returns>
        PricingMenu GetPricingMenu(string menuId, int operationIndex = 0);

        /// <summary>
        /// Get Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Get a pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingMenu</returns>
        ApiResponse<PricingMenu> GetPricingMenuWithHttpInfo(string menuId, int operationIndex = 0);
        /// <summary>
        /// Get Pricing Feature Menus
        /// </summary>
        /// <remarks>
        /// Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingMenus</returns>
        PricingMenus GetPricingMenus(int operationIndex = 0);

        /// <summary>
        /// Get Pricing Feature Menus
        /// </summary>
        /// <remarks>
        /// Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingMenus</returns>
        ApiResponse<PricingMenus> GetPricingMenusWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Update pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdatePricingMenu(string menuId, SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0);

        /// <summary>
        /// Update Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Update pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePricingMenuWithHttpInfo(string menuId, SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingMenusApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Create a pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingMenu</returns>
        System.Threading.Tasks.Task<PricingMenu> CreatePricingMenuAsync(SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Create a pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingMenu>> CreatePricingMenuWithHttpInfoAsync(SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Delete pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePricingMenuAsync(string menuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Delete pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePricingMenuWithHttpInfoAsync(string menuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Get a pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingMenu</returns>
        System.Threading.Tasks.Task<PricingMenu> GetPricingMenuAsync(string menuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Get a pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingMenu>> GetPricingMenuWithHttpInfoAsync(string menuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Pricing Feature Menus
        /// </summary>
        /// <remarks>
        /// Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingMenus</returns>
        System.Threading.Tasks.Task<PricingMenus> GetPricingMenusAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Pricing Feature Menus
        /// </summary>
        /// <remarks>
        /// Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingMenus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PricingMenus>> GetPricingMenusWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Update pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePricingMenuAsync(string menuId, SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Pricing Feature Menu
        /// </summary>
        /// <remarks>
        /// Update pricing feature menu. 
        /// </remarks>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePricingMenuWithHttpInfoAsync(string menuId, SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPricingMenusApi : IPricingMenusApiSync, IPricingMenusApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PricingMenusApi : IPricingMenusApi
    {
        private pricingapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingMenusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricingMenusApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingMenusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PricingMenusApi(string basePath)
        {
            this.Configuration = pricingapi.Client.Configuration.MergeConfigurations(
                pricingapi.Client.GlobalConfiguration.Instance,
                new pricingapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingMenusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PricingMenusApi(pricingapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = pricingapi.Client.Configuration.MergeConfigurations(
                pricingapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new pricingapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PricingMenusApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PricingMenusApi(pricingapi.Client.ISynchronousClient client, pricingapi.Client.IAsynchronousClient asyncClient, pricingapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = pricingapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public pricingapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public pricingapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pricingapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pricingapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Pricing Feature Menu Create a pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingMenu</returns>
        public PricingMenu CreatePricingMenu(SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<PricingMenu> localVarResponse = CreatePricingMenuWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Pricing Feature Menu Create a pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingMenu</returns>
        public pricingapi.Client.ApiResponse<PricingMenu> CreatePricingMenuWithHttpInfo(SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PricingMenusApi.CreatePricingMenu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PricingMenu>("/menus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePricingMenu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Pricing Feature Menu Create a pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingMenu</returns>
        public async System.Threading.Tasks.Task<PricingMenu> CreatePricingMenuAsync(SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<PricingMenu> localVarResponse = await CreatePricingMenuWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Pricing Feature Menu Create a pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingMenu)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<PricingMenu>> CreatePricingMenuWithHttpInfoAsync(SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PricingMenusApi.CreatePricingMenu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PricingMenu>("/menus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePricingMenu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Pricing Feature Menu Delete pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePricingMenu(string menuId, int operationIndex = 0)
        {
            DeletePricingMenuWithHttpInfo(menuId);
        }

        /// <summary>
        /// Delete Pricing Feature Menu Delete pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> DeletePricingMenuWithHttpInfo(string menuId, int operationIndex = 0)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'menuId' when calling PricingMenusApi->DeletePricingMenu");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("menu_id", pricingapi.Client.ClientUtils.ParameterToString(menuId)); // path parameter

            localVarRequestOptions.Operation = "PricingMenusApi.DeletePricingMenu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/menus/{menu_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePricingMenu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Pricing Feature Menu Delete pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePricingMenuAsync(string menuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePricingMenuWithHttpInfoAsync(menuId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Pricing Feature Menu Delete pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> DeletePricingMenuWithHttpInfoAsync(string menuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'menuId' when calling PricingMenusApi->DeletePricingMenu");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("menu_id", pricingapi.Client.ClientUtils.ParameterToString(menuId)); // path parameter

            localVarRequestOptions.Operation = "PricingMenusApi.DeletePricingMenu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/menus/{menu_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePricingMenu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pricing Feature Menu Get a pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingMenu</returns>
        public PricingMenu GetPricingMenu(string menuId, int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<PricingMenu> localVarResponse = GetPricingMenuWithHttpInfo(menuId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pricing Feature Menu Get a pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingMenu</returns>
        public pricingapi.Client.ApiResponse<PricingMenu> GetPricingMenuWithHttpInfo(string menuId, int operationIndex = 0)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'menuId' when calling PricingMenusApi->GetPricingMenu");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("menu_id", pricingapi.Client.ClientUtils.ParameterToString(menuId)); // path parameter

            localVarRequestOptions.Operation = "PricingMenusApi.GetPricingMenu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PricingMenu>("/menus/{menu_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricingMenu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pricing Feature Menu Get a pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingMenu</returns>
        public async System.Threading.Tasks.Task<PricingMenu> GetPricingMenuAsync(string menuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<PricingMenu> localVarResponse = await GetPricingMenuWithHttpInfoAsync(menuId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pricing Feature Menu Get a pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingMenu)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<PricingMenu>> GetPricingMenuWithHttpInfoAsync(string menuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'menuId' when calling PricingMenusApi->GetPricingMenu");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("menu_id", pricingapi.Client.ClientUtils.ParameterToString(menuId)); // path parameter

            localVarRequestOptions.Operation = "PricingMenusApi.GetPricingMenu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PricingMenu>("/menus/{menu_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricingMenu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pricing Feature Menus Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PricingMenus</returns>
        public PricingMenus GetPricingMenus(int operationIndex = 0)
        {
            pricingapi.Client.ApiResponse<PricingMenus> localVarResponse = GetPricingMenusWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pricing Feature Menus Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PricingMenus</returns>
        public pricingapi.Client.ApiResponse<PricingMenus> GetPricingMenusWithHttpInfo(int operationIndex = 0)
        {
            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingMenusApi.GetPricingMenus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PricingMenus>("/menus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricingMenus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pricing Feature Menus Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PricingMenus</returns>
        public async System.Threading.Tasks.Task<PricingMenus> GetPricingMenusAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            pricingapi.Client.ApiResponse<PricingMenus> localVarResponse = await GetPricingMenusWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pricing Feature Menus Get the feature menu list. Multiple measurement units are grouped together and defined as one feature menu. Multiple feature menus defined here are combined into one billing plan. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PricingMenus)</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<PricingMenus>> GetPricingMenusWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PricingMenusApi.GetPricingMenus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PricingMenus>("/menus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPricingMenus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pricing Feature Menu Update pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdatePricingMenu(string menuId, SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0)
        {
            UpdatePricingMenuWithHttpInfo(menuId, body);
        }

        /// <summary>
        /// Update Pricing Feature Menu Update pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public pricingapi.Client.ApiResponse<Object> UpdatePricingMenuWithHttpInfo(string menuId, SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0)
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'menuId' when calling PricingMenusApi->UpdatePricingMenu");
            }

            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("menu_id", pricingapi.Client.ClientUtils.ParameterToString(menuId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PricingMenusApi.UpdatePricingMenu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/menus/{menu_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePricingMenu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pricing Feature Menu Update pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePricingMenuAsync(string menuId, SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdatePricingMenuWithHttpInfoAsync(menuId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Pricing Feature Menu Update pricing feature menu. 
        /// </summary>
        /// <exception cref="pricingapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="menuId">Menu ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<pricingapi.Client.ApiResponse<Object>> UpdatePricingMenuWithHttpInfoAsync(string menuId, SavePricingMenuParam body = default(SavePricingMenuParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'menuId' is set
            if (menuId == null)
            {
                throw new pricingapi.Client.ApiException(400, "Missing required parameter 'menuId' when calling PricingMenusApi->UpdatePricingMenu");
            }


            pricingapi.Client.RequestOptions localVarRequestOptions = new pricingapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = pricingapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = pricingapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("menu_id", pricingapi.Client.ClientUtils.ParameterToString(menuId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PricingMenusApi.UpdatePricingMenu";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/menus/{menu_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePricingMenu", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
