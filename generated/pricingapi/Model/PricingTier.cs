/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pricingapi.Client.OpenAPIDateConverter;

namespace pricingapi.Model
{
    /// <summary>
    /// PricingTier
    /// </summary>
    [DataContract(Name = "PricingTier")]
    public partial class PricingTier : IEquatable<PricingTier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingTier" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PricingTier() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingTier" /> class.
        /// </summary>
        /// <param name="upTo">Upper limit (required).</param>
        /// <param name="unitAmount">Amount per unit (required).</param>
        /// <param name="flatAmount">Fixed amount (required).</param>
        /// <param name="inf">Indefinite (required).</param>
        public PricingTier(int upTo = default(int), int unitAmount = default(int), int flatAmount = default(int), bool inf = default(bool))
        {
            this.UpTo = upTo;
            this.UnitAmount = unitAmount;
            this.FlatAmount = flatAmount;
            this.Inf = inf;
        }

        /// <summary>
        /// Upper limit
        /// </summary>
        /// <value>Upper limit</value>
        /// <example>5</example>
        [DataMember(Name = "up_to", IsRequired = true, EmitDefaultValue = true)]
        public int UpTo { get; set; }

        /// <summary>
        /// Amount per unit
        /// </summary>
        /// <value>Amount per unit</value>
        /// <example>1000</example>
        [DataMember(Name = "unit_amount", IsRequired = true, EmitDefaultValue = true)]
        public int UnitAmount { get; set; }

        /// <summary>
        /// Fixed amount
        /// </summary>
        /// <value>Fixed amount</value>
        /// <example>500</example>
        [DataMember(Name = "flat_amount", IsRequired = true, EmitDefaultValue = true)]
        public int FlatAmount { get; set; }

        /// <summary>
        /// Indefinite
        /// </summary>
        /// <value>Indefinite</value>
        [DataMember(Name = "inf", IsRequired = true, EmitDefaultValue = true)]
        public bool Inf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PricingTier {\n");
            sb.Append("  UpTo: ").Append(UpTo).Append("\n");
            sb.Append("  UnitAmount: ").Append(UnitAmount).Append("\n");
            sb.Append("  FlatAmount: ").Append(FlatAmount).Append("\n");
            sb.Append("  Inf: ").Append(Inf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PricingTier);
        }

        /// <summary>
        /// Returns true if PricingTier instances are equal
        /// </summary>
        /// <param name="input">Instance of PricingTier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PricingTier input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpTo == input.UpTo ||
                    this.UpTo.Equals(input.UpTo)
                ) && 
                (
                    this.UnitAmount == input.UnitAmount ||
                    this.UnitAmount.Equals(input.UnitAmount)
                ) && 
                (
                    this.FlatAmount == input.FlatAmount ||
                    this.FlatAmount.Equals(input.FlatAmount)
                ) && 
                (
                    this.Inf == input.Inf ||
                    this.Inf.Equals(input.Inf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UpTo.GetHashCode();
                hashCode = (hashCode * 59) + this.UnitAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.FlatAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.Inf.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
