/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pricingapi.Client.OpenAPIDateConverter;

namespace pricingapi.Model
{
    /// <summary>
    /// PricingTieredUnit
    /// </summary>
    [DataContract(Name = "PricingTieredUnit")]
    public partial class PricingTieredUnit : IEquatable<PricingTieredUnit>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AggregateUsage
        /// </summary>
        [DataMember(Name = "aggregate_usage", EmitDefaultValue = false)]
        public AggregateUsage? AggregateUsage { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public UnitType Type { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets RecurringInterval
        /// </summary>
        [DataMember(Name = "recurring_interval", IsRequired = true, EmitDefaultValue = true)]
        public RecurringInterval RecurringInterval { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingTieredUnit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PricingTieredUnit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingTieredUnit" /> class.
        /// </summary>
        /// <param name="upperCount">Upper limit (required).</param>
        /// <param name="meteringUnitName">Metering unit name (required).</param>
        /// <param name="aggregateUsage">aggregateUsage.</param>
        /// <param name="name">Name (required).</param>
        /// <param name="displayName">Display Name (required).</param>
        /// <param name="description">Description (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="tiers">tiers (required).</param>
        /// <param name="id">Universally Unique Identifier (required).</param>
        /// <param name="meteringUnitId">Universally Unique Identifier (required).</param>
        /// <param name="recurringInterval">recurringInterval (required).</param>
        /// <param name="used">Indicates if the unit is used (required).</param>
        public PricingTieredUnit(int upperCount = default(int), string meteringUnitName = default(string), AggregateUsage? aggregateUsage = default(AggregateUsage?), string name = default(string), string displayName = default(string), string description = default(string), UnitType type = default(UnitType), Currency currency = default(Currency), List<PricingTier> tiers = default(List<PricingTier>), string id = default(string), string meteringUnitId = default(string), RecurringInterval recurringInterval = default(RecurringInterval), bool used = default(bool))
        {
            this.UpperCount = upperCount;
            // to ensure "meteringUnitName" is required (not null)
            if (meteringUnitName == null)
            {
                throw new ArgumentNullException("meteringUnitName is a required property for PricingTieredUnit and cannot be null");
            }
            this.MeteringUnitName = meteringUnitName;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PricingTieredUnit and cannot be null");
            }
            this.Name = name;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for PricingTieredUnit and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for PricingTieredUnit and cannot be null");
            }
            this.Description = description;
            this.Type = type;
            this.Currency = currency;
            // to ensure "tiers" is required (not null)
            if (tiers == null)
            {
                throw new ArgumentNullException("tiers is a required property for PricingTieredUnit and cannot be null");
            }
            this.Tiers = tiers;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PricingTieredUnit and cannot be null");
            }
            this.Id = id;
            // to ensure "meteringUnitId" is required (not null)
            if (meteringUnitId == null)
            {
                throw new ArgumentNullException("meteringUnitId is a required property for PricingTieredUnit and cannot be null");
            }
            this.MeteringUnitId = meteringUnitId;
            this.RecurringInterval = recurringInterval;
            this.Used = used;
            this.AggregateUsage = aggregateUsage;
        }

        /// <summary>
        /// Upper limit
        /// </summary>
        /// <value>Upper limit</value>
        /// <example>100</example>
        [DataMember(Name = "upper_count", IsRequired = true, EmitDefaultValue = true)]
        public int UpperCount { get; set; }

        /// <summary>
        /// Metering unit name
        /// </summary>
        /// <value>Metering unit name</value>
        /// <example>test_unit</example>
        [DataMember(Name = "metering_unit_name", IsRequired = true, EmitDefaultValue = true)]
        public string MeteringUnitName { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        /// <example>storage_unit</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Display Name
        /// </summary>
        /// <value>Display Name</value>
        /// <example>ストレージユニット</example>
        [DataMember(Name = "display_name", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        /// <example>KB unit for storage usage</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Tiers
        /// </summary>
        [DataMember(Name = "tiers", IsRequired = true, EmitDefaultValue = true)]
        public List<PricingTier> Tiers { get; set; }

        /// <summary>
        /// Universally Unique Identifier
        /// </summary>
        /// <value>Universally Unique Identifier</value>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Universally Unique Identifier
        /// </summary>
        /// <value>Universally Unique Identifier</value>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "metering_unit_id", IsRequired = true, EmitDefaultValue = true)]
        public string MeteringUnitId { get; set; }

        /// <summary>
        /// Indicates if the unit is used
        /// </summary>
        /// <value>Indicates if the unit is used</value>
        /// <example>false</example>
        [DataMember(Name = "used", IsRequired = true, EmitDefaultValue = true)]
        public bool Used { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PricingTieredUnit {\n");
            sb.Append("  UpperCount: ").Append(UpperCount).Append("\n");
            sb.Append("  MeteringUnitName: ").Append(MeteringUnitName).Append("\n");
            sb.Append("  AggregateUsage: ").Append(AggregateUsage).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Tiers: ").Append(Tiers).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MeteringUnitId: ").Append(MeteringUnitId).Append("\n");
            sb.Append("  RecurringInterval: ").Append(RecurringInterval).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PricingTieredUnit);
        }

        /// <summary>
        /// Returns true if PricingTieredUnit instances are equal
        /// </summary>
        /// <param name="input">Instance of PricingTieredUnit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PricingTieredUnit input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UpperCount == input.UpperCount ||
                    this.UpperCount.Equals(input.UpperCount)
                ) && 
                (
                    this.MeteringUnitName == input.MeteringUnitName ||
                    (this.MeteringUnitName != null &&
                    this.MeteringUnitName.Equals(input.MeteringUnitName))
                ) && 
                (
                    this.AggregateUsage == input.AggregateUsage ||
                    this.AggregateUsage.Equals(input.AggregateUsage)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.Tiers == input.Tiers ||
                    this.Tiers != null &&
                    input.Tiers != null &&
                    this.Tiers.SequenceEqual(input.Tiers)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MeteringUnitId == input.MeteringUnitId ||
                    (this.MeteringUnitId != null &&
                    this.MeteringUnitId.Equals(input.MeteringUnitId))
                ) && 
                (
                    this.RecurringInterval == input.RecurringInterval ||
                    this.RecurringInterval.Equals(input.RecurringInterval)
                ) && 
                (
                    this.Used == input.Used ||
                    this.Used.Equals(input.Used)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UpperCount.GetHashCode();
                if (this.MeteringUnitName != null)
                {
                    hashCode = (hashCode * 59) + this.MeteringUnitName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AggregateUsage.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                if (this.Tiers != null)
                {
                    hashCode = (hashCode * 59) + this.Tiers.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.MeteringUnitId != null)
                {
                    hashCode = (hashCode * 59) + this.MeteringUnitId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RecurringInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.Used.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
