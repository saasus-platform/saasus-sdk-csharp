/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pricingapi.Client.OpenAPIDateConverter;

namespace pricingapi.Model
{
    /// <summary>
    /// TaxRateProps
    /// </summary>
    [DataContract(Name = "TaxRateProps")]
    public partial class TaxRateProps : IEquatable<TaxRateProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRateProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxRateProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRateProps" /> class.
        /// </summary>
        /// <param name="name">Name of tax rate (required).</param>
        /// <param name="displayName">Display name (required).</param>
        /// <param name="percentage">Percentage (required).</param>
        /// <param name="inclusive">Inclusive or not (required).</param>
        /// <param name="country">Country code of ISO 3166-1 alpha-2 (required).</param>
        /// <param name="description">Description (required).</param>
        public TaxRateProps(string name = default(string), string displayName = default(string), decimal percentage = default(decimal), bool inclusive = default(bool), string country = default(string), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TaxRateProps and cannot be null");
            }
            this.Name = name;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for TaxRateProps and cannot be null");
            }
            this.DisplayName = displayName;
            this.Percentage = percentage;
            this.Inclusive = inclusive;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for TaxRateProps and cannot be null");
            }
            this.Country = country;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for TaxRateProps and cannot be null");
            }
            this.Description = description;
        }

        /// <summary>
        /// Name of tax rate
        /// </summary>
        /// <value>Name of tax rate</value>
        /// <example>japanese_consumption_tax_inclusive</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        /// <example>消費税(外税)</example>
        [DataMember(Name = "display_name", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Percentage
        /// </summary>
        /// <value>Percentage</value>
        /// <example>10</example>
        [DataMember(Name = "percentage", IsRequired = true, EmitDefaultValue = true)]
        public decimal Percentage { get; set; }

        /// <summary>
        /// Inclusive or not
        /// </summary>
        /// <value>Inclusive or not</value>
        /// <example>false</example>
        [DataMember(Name = "inclusive", IsRequired = true, EmitDefaultValue = true)]
        public bool Inclusive { get; set; }

        /// <summary>
        /// Country code of ISO 3166-1 alpha-2
        /// </summary>
        /// <value>Country code of ISO 3166-1 alpha-2</value>
        /// <example>JP</example>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        /// <example>SaaSusとの連携用の税率</example>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxRateProps {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  Inclusive: ").Append(Inclusive).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxRateProps);
        }

        /// <summary>
        /// Returns true if TaxRateProps instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxRateProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxRateProps input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Percentage == input.Percentage ||
                    this.Percentage.Equals(input.Percentage)
                ) && 
                (
                    this.Inclusive == input.Inclusive ||
                    this.Inclusive.Equals(input.Inclusive)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Percentage.GetHashCode();
                hashCode = (hashCode * 59) + this.Inclusive.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Country != null) {
                // Country (string) pattern
                Regex regexCountry = new Regex(@"^[A-Z]{2}$", RegexOptions.CultureInvariant);
                if (!regexCountry.Match(this.Country).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, must match a pattern of " + regexCountry, new [] { "Country" });
                }
            }

            yield break;
        }
    }

}
