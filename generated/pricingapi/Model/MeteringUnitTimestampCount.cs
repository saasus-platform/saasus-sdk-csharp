/*
 * SaaSus Pricing API Schema
 *
 * SaaSus Pricing API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pricingapi.Client.OpenAPIDateConverter;

namespace pricingapi.Model
{
    /// <summary>
    /// MeteringUnitTimestampCount
    /// </summary>
    [DataContract(Name = "MeteringUnitTimestampCount")]
    public partial class MeteringUnitTimestampCount : IEquatable<MeteringUnitTimestampCount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MeteringUnitTimestampCount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MeteringUnitTimestampCount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MeteringUnitTimestampCount" /> class.
        /// </summary>
        /// <param name="meteringUnitName">Metering unit name (required).</param>
        /// <param name="timestamp">Timestamp (required).</param>
        /// <param name="count">Count (required).</param>
        public MeteringUnitTimestampCount(string meteringUnitName = default(string), int timestamp = default(int), int count = default(int))
        {
            // to ensure "meteringUnitName" is required (not null)
            if (meteringUnitName == null)
            {
                throw new ArgumentNullException("meteringUnitName is a required property for MeteringUnitTimestampCount and cannot be null");
            }
            this.MeteringUnitName = meteringUnitName;
            this.Timestamp = timestamp;
            this.Count = count;
        }

        /// <summary>
        /// Metering unit name
        /// </summary>
        /// <value>Metering unit name</value>
        /// <example>storage_unit</example>
        [DataMember(Name = "metering_unit_name", IsRequired = true, EmitDefaultValue = true)]
        public string MeteringUnitName { get; set; }

        /// <summary>
        /// Timestamp
        /// </summary>
        /// <value>Timestamp</value>
        /// <example>1640995200</example>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Count
        /// </summary>
        /// <value>Count</value>
        /// <example>10000</example>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MeteringUnitTimestampCount {\n");
            sb.Append("  MeteringUnitName: ").Append(MeteringUnitName).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MeteringUnitTimestampCount);
        }

        /// <summary>
        /// Returns true if MeteringUnitTimestampCount instances are equal
        /// </summary>
        /// <param name="input">Instance of MeteringUnitTimestampCount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeteringUnitTimestampCount input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MeteringUnitName == input.MeteringUnitName ||
                    (this.MeteringUnitName != null &&
                    this.MeteringUnitName.Equals(input.MeteringUnitName))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MeteringUnitName != null)
                {
                    hashCode = (hashCode * 59) + this.MeteringUnitName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
