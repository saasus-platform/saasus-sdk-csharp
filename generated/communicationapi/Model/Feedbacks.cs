/*
 * SaaSus Communication API Schema
 *
 * SaaSus Communication API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = communicationapi.Client.OpenAPIDateConverter;

namespace communicationapi.Model
{
    /// <summary>
    /// Feedbacks
    /// </summary>
    [DataContract(Name = "Feedbacks")]
    public partial class Feedbacks : IEquatable<Feedbacks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedbacks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Feedbacks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedbacks" /> class.
        /// </summary>
        /// <param name="varFeedbacks">varFeedbacks (required).</param>
        public Feedbacks(List<Feedback> varFeedbacks = default(List<Feedback>))
        {
            // to ensure "varFeedbacks" is required (not null)
            if (varFeedbacks == null)
            {
                throw new ArgumentNullException("varFeedbacks is a required property for Feedbacks and cannot be null");
            }
            this.VarFeedbacks = varFeedbacks;
        }

        /// <summary>
        /// Gets or Sets VarFeedbacks
        /// </summary>
        [DataMember(Name = "feedbacks", IsRequired = true, EmitDefaultValue = true)]
        public List<Feedback> VarFeedbacks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Feedbacks {\n");
            sb.Append("  VarFeedbacks: ").Append(VarFeedbacks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Feedbacks);
        }

        /// <summary>
        /// Returns true if Feedbacks instances are equal
        /// </summary>
        /// <param name="input">Instance of Feedbacks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Feedbacks input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarFeedbacks == input.VarFeedbacks ||
                    this.VarFeedbacks != null &&
                    input.VarFeedbacks != null &&
                    this.VarFeedbacks.SequenceEqual(input.VarFeedbacks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarFeedbacks != null)
                {
                    hashCode = (hashCode * 59) + this.VarFeedbacks.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
