/*
 * SaaSus Communication API Schema
 *
 * SaaSus Communication API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = communicationapi.Client.OpenAPIDateConverter;

namespace communicationapi.Model
{
    /// <summary>
    /// CreateFeedbackParam
    /// </summary>
    [DataContract(Name = "CreateFeedbackParam")]
    public partial class CreateFeedbackParam : IEquatable<CreateFeedbackParam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedbackParam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFeedbackParam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFeedbackParam" /> class.
        /// </summary>
        /// <param name="feedbackTitle">feedbackTitle (required).</param>
        /// <param name="feedbackDescription">feedbackDescription (required).</param>
        /// <param name="userId">userId (required).</param>
        public CreateFeedbackParam(string feedbackTitle = default(string), string feedbackDescription = default(string), string userId = default(string))
        {
            // to ensure "feedbackTitle" is required (not null)
            if (feedbackTitle == null)
            {
                throw new ArgumentNullException("feedbackTitle is a required property for CreateFeedbackParam and cannot be null");
            }
            this.FeedbackTitle = feedbackTitle;
            // to ensure "feedbackDescription" is required (not null)
            if (feedbackDescription == null)
            {
                throw new ArgumentNullException("feedbackDescription is a required property for CreateFeedbackParam and cannot be null");
            }
            this.FeedbackDescription = feedbackDescription;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for CreateFeedbackParam and cannot be null");
            }
            this.UserId = userId;
        }

        /// <summary>
        /// Gets or Sets FeedbackTitle
        /// </summary>
        /// <example>保存ボタンの位置を変えてほしい</example>
        [DataMember(Name = "feedback_title", IsRequired = true, EmitDefaultValue = true)]
        public string FeedbackTitle { get; set; }

        /// <summary>
        /// Gets or Sets FeedbackDescription
        /// </summary>
        /// <example>編集ダイアログの保存ボタンが押しにくいので、位置を変えてほしい</example>
        [DataMember(Name = "feedback_description", IsRequired = true, EmitDefaultValue = true)]
        public string FeedbackDescription { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateFeedbackParam {\n");
            sb.Append("  FeedbackTitle: ").Append(FeedbackTitle).Append("\n");
            sb.Append("  FeedbackDescription: ").Append(FeedbackDescription).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFeedbackParam);
        }

        /// <summary>
        /// Returns true if CreateFeedbackParam instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFeedbackParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFeedbackParam input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FeedbackTitle == input.FeedbackTitle ||
                    (this.FeedbackTitle != null &&
                    this.FeedbackTitle.Equals(input.FeedbackTitle))
                ) && 
                (
                    this.FeedbackDescription == input.FeedbackDescription ||
                    (this.FeedbackDescription != null &&
                    this.FeedbackDescription.Equals(input.FeedbackDescription))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedbackTitle != null)
                {
                    hashCode = (hashCode * 59) + this.FeedbackTitle.GetHashCode();
                }
                if (this.FeedbackDescription != null)
                {
                    hashCode = (hashCode * 59) + this.FeedbackDescription.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
