/*
 * SaaSus Communication API Schema
 *
 * SaaSus Communication API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = communicationapi.Client.OpenAPIDateConverter;

namespace communicationapi.Model
{
    /// <summary>
    /// Feedback
    /// </summary>
    [DataContract(Name = "Feedback")]
    public partial class Feedback : IEquatable<Feedback>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedback" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Feedback() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Feedback" /> class.
        /// </summary>
        /// <param name="feedbackTitle">feedbackTitle (required).</param>
        /// <param name="feedbackDescription">feedbackDescription (required).</param>
        /// <param name="comments">comments (required).</param>
        /// <param name="count">count (required).</param>
        /// <param name="users">users (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="status">status (required).</param>
        public Feedback(string feedbackTitle = default(string), string feedbackDescription = default(string), List<Comment> comments = default(List<Comment>), int count = default(int), List<User> users = default(List<User>), string id = default(string), string userId = default(string), int createdAt = default(int), int status = default(int))
        {
            // to ensure "feedbackTitle" is required (not null)
            if (feedbackTitle == null)
            {
                throw new ArgumentNullException("feedbackTitle is a required property for Feedback and cannot be null");
            }
            this.FeedbackTitle = feedbackTitle;
            // to ensure "feedbackDescription" is required (not null)
            if (feedbackDescription == null)
            {
                throw new ArgumentNullException("feedbackDescription is a required property for Feedback and cannot be null");
            }
            this.FeedbackDescription = feedbackDescription;
            // to ensure "comments" is required (not null)
            if (comments == null)
            {
                throw new ArgumentNullException("comments is a required property for Feedback and cannot be null");
            }
            this.Comments = comments;
            this.Count = count;
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new ArgumentNullException("users is a required property for Feedback and cannot be null");
            }
            this.Users = users;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Feedback and cannot be null");
            }
            this.Id = id;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for Feedback and cannot be null");
            }
            this.UserId = userId;
            this.CreatedAt = createdAt;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets FeedbackTitle
        /// </summary>
        /// <example>保存ボタンの位置を変えてほしい</example>
        [DataMember(Name = "feedback_title", IsRequired = true, EmitDefaultValue = true)]
        public string FeedbackTitle { get; set; }

        /// <summary>
        /// Gets or Sets FeedbackDescription
        /// </summary>
        /// <example>編集ダイアログの保存ボタンが押しにくいので、位置を変えてほしい</example>
        [DataMember(Name = "feedback_description", IsRequired = true, EmitDefaultValue = true)]
        public string FeedbackDescription { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name = "comments", IsRequired = true, EmitDefaultValue = true)]
        public List<Comment> Comments { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name = "users", IsRequired = true, EmitDefaultValue = true)]
        public List<User> Users { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>1640995200</example>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public int Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Feedback {\n");
            sb.Append("  FeedbackTitle: ").Append(FeedbackTitle).Append("\n");
            sb.Append("  FeedbackDescription: ").Append(FeedbackDescription).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Feedback);
        }

        /// <summary>
        /// Returns true if Feedback instances are equal
        /// </summary>
        /// <param name="input">Instance of Feedback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Feedback input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FeedbackTitle == input.FeedbackTitle ||
                    (this.FeedbackTitle != null &&
                    this.FeedbackTitle.Equals(input.FeedbackTitle))
                ) && 
                (
                    this.FeedbackDescription == input.FeedbackDescription ||
                    (this.FeedbackDescription != null &&
                    this.FeedbackDescription.Equals(input.FeedbackDescription))
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    input.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    input.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeedbackTitle != null)
                {
                    hashCode = (hashCode * 59) + this.FeedbackTitle.GetHashCode();
                }
                if (this.FeedbackDescription != null)
                {
                    hashCode = (hashCode * 59) + this.FeedbackDescription.GetHashCode();
                }
                if (this.Comments != null)
                {
                    hashCode = (hashCode * 59) + this.Comments.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.Users != null)
                {
                    hashCode = (hashCode * 59) + this.Users.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
