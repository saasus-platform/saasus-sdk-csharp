/*
 * SaaSus Communication API Schema
 *
 * SaaSus Communication API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using communicationapi.Client;
using communicationapi.Model;

namespace communicationapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeedbackApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Feedback
        /// </summary>
        /// <remarks>
        /// Create Feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feedback</returns>
        Feedback CreateFeedback(CreateFeedbackParam createFeedbackParam = default(CreateFeedbackParam), int operationIndex = 0);

        /// <summary>
        /// Create Feedback
        /// </summary>
        /// <remarks>
        /// Create Feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feedback</returns>
        ApiResponse<Feedback> CreateFeedbackWithHttpInfo(CreateFeedbackParam createFeedbackParam = default(CreateFeedbackParam), int operationIndex = 0);
        /// <summary>
        /// Create Feedback Comment
        /// </summary>
        /// <remarks>
        /// Post comment to feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Comment</returns>
        Comment CreateFeedbackComment(string feedbackId, CreateFeedbackCommentParam createFeedbackCommentParam = default(CreateFeedbackCommentParam), int operationIndex = 0);

        /// <summary>
        /// Create Feedback Comment
        /// </summary>
        /// <remarks>
        /// Post comment to feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Comment</returns>
        ApiResponse<Comment> CreateFeedbackCommentWithHttpInfo(string feedbackId, CreateFeedbackCommentParam createFeedbackCommentParam = default(CreateFeedbackCommentParam), int operationIndex = 0);
        /// <summary>
        /// Create Vote User
        /// </summary>
        /// <remarks>
        /// Vote for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createVoteUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Votes</returns>
        Votes CreateVoteUser(string feedbackId, CreateVoteUserParam createVoteUserParam = default(CreateVoteUserParam), int operationIndex = 0);

        /// <summary>
        /// Create Vote User
        /// </summary>
        /// <remarks>
        /// Vote for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createVoteUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Votes</returns>
        ApiResponse<Votes> CreateVoteUserWithHttpInfo(string feedbackId, CreateVoteUserParam createVoteUserParam = default(CreateVoteUserParam), int operationIndex = 0);
        /// <summary>
        /// Delete Feedback
        /// </summary>
        /// <remarks>
        /// Delete Feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteFeedback(string feedbackId, int operationIndex = 0);

        /// <summary>
        /// Delete Feedback
        /// </summary>
        /// <remarks>
        /// Delete Feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFeedbackWithHttpInfo(string feedbackId, int operationIndex = 0);
        /// <summary>
        /// Delete Feedback Comment
        /// </summary>
        /// <remarks>
        /// Delete comment for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteFeedbackComment(string feedbackId, string commentId, int operationIndex = 0);

        /// <summary>
        /// Delete Feedback Comment
        /// </summary>
        /// <remarks>
        /// Delete comment for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFeedbackCommentWithHttpInfo(string feedbackId, string commentId, int operationIndex = 0);
        /// <summary>
        /// Delete Vote For Feedback
        /// </summary>
        /// <remarks>
        /// Cancel vote for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteVoteForFeedback(string feedbackId, string userId, int operationIndex = 0);

        /// <summary>
        /// Delete Vote For Feedback
        /// </summary>
        /// <remarks>
        /// Cancel vote for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVoteForFeedbackWithHttpInfo(string feedbackId, string userId, int operationIndex = 0);
        /// <summary>
        /// Get Feedback
        /// </summary>
        /// <remarks>
        /// Retrieve feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feedback</returns>
        Feedback GetFeedback(string feedbackId, int operationIndex = 0);

        /// <summary>
        /// Get Feedback
        /// </summary>
        /// <remarks>
        /// Retrieve feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feedback</returns>
        ApiResponse<Feedback> GetFeedbackWithHttpInfo(string feedbackId, int operationIndex = 0);
        /// <summary>
        /// Get Feedback Comment
        /// </summary>
        /// <remarks>
        /// Retrieve comment from feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Comment</returns>
        Comment GetFeedbackComment(string feedbackId, string commentId, int operationIndex = 0);

        /// <summary>
        /// Get Feedback Comment
        /// </summary>
        /// <remarks>
        /// Retrieve comment from feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Comment</returns>
        ApiResponse<Comment> GetFeedbackCommentWithHttpInfo(string feedbackId, string commentId, int operationIndex = 0);
        /// <summary>
        /// Get Feedbacks
        /// </summary>
        /// <remarks>
        /// Get the list of feedbacks.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feedbacks</returns>
        Feedbacks GetFeedbacks(int operationIndex = 0);

        /// <summary>
        /// Get Feedbacks
        /// </summary>
        /// <remarks>
        /// Get the list of feedbacks.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feedbacks</returns>
        ApiResponse<Feedbacks> GetFeedbacksWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Feedback
        /// </summary>
        /// <remarks>
        /// Edit feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateFeedback(string feedbackId, UpdateFeedbackParam updateFeedbackParam = default(UpdateFeedbackParam), int operationIndex = 0);

        /// <summary>
        /// Update Feedback
        /// </summary>
        /// <remarks>
        /// Edit feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFeedbackWithHttpInfo(string feedbackId, UpdateFeedbackParam updateFeedbackParam = default(UpdateFeedbackParam), int operationIndex = 0);
        /// <summary>
        /// Update Feedback Comment
        /// </summary>
        /// <remarks>
        /// Edit comment for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="updateFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateFeedbackComment(string feedbackId, string commentId, UpdateFeedbackCommentParam updateFeedbackCommentParam = default(UpdateFeedbackCommentParam), int operationIndex = 0);

        /// <summary>
        /// Update Feedback Comment
        /// </summary>
        /// <remarks>
        /// Edit comment for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="updateFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFeedbackCommentWithHttpInfo(string feedbackId, string commentId, UpdateFeedbackCommentParam updateFeedbackCommentParam = default(UpdateFeedbackCommentParam), int operationIndex = 0);
        /// <summary>
        /// Update Feedback Status
        /// </summary>
        /// <remarks>
        /// Update Feedback Status.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateFeedbackStatus(string feedbackId, UpdateFeedbackStatusParam updateFeedbackStatusParam = default(UpdateFeedbackStatusParam), int operationIndex = 0);

        /// <summary>
        /// Update Feedback Status
        /// </summary>
        /// <remarks>
        /// Update Feedback Status.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateFeedbackStatusWithHttpInfo(string feedbackId, UpdateFeedbackStatusParam updateFeedbackStatusParam = default(UpdateFeedbackStatusParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeedbackApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Feedback
        /// </summary>
        /// <remarks>
        /// Create Feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feedback</returns>
        System.Threading.Tasks.Task<Feedback> CreateFeedbackAsync(CreateFeedbackParam createFeedbackParam = default(CreateFeedbackParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Feedback
        /// </summary>
        /// <remarks>
        /// Create Feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feedback)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feedback>> CreateFeedbackWithHttpInfoAsync(CreateFeedbackParam createFeedbackParam = default(CreateFeedbackParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Feedback Comment
        /// </summary>
        /// <remarks>
        /// Post comment to feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Comment</returns>
        System.Threading.Tasks.Task<Comment> CreateFeedbackCommentAsync(string feedbackId, CreateFeedbackCommentParam createFeedbackCommentParam = default(CreateFeedbackCommentParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Feedback Comment
        /// </summary>
        /// <remarks>
        /// Post comment to feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Comment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Comment>> CreateFeedbackCommentWithHttpInfoAsync(string feedbackId, CreateFeedbackCommentParam createFeedbackCommentParam = default(CreateFeedbackCommentParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Vote User
        /// </summary>
        /// <remarks>
        /// Vote for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createVoteUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Votes</returns>
        System.Threading.Tasks.Task<Votes> CreateVoteUserAsync(string feedbackId, CreateVoteUserParam createVoteUserParam = default(CreateVoteUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Vote User
        /// </summary>
        /// <remarks>
        /// Vote for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createVoteUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Votes)</returns>
        System.Threading.Tasks.Task<ApiResponse<Votes>> CreateVoteUserWithHttpInfoAsync(string feedbackId, CreateVoteUserParam createVoteUserParam = default(CreateVoteUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Feedback
        /// </summary>
        /// <remarks>
        /// Delete Feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFeedbackAsync(string feedbackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Feedback
        /// </summary>
        /// <remarks>
        /// Delete Feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeedbackWithHttpInfoAsync(string feedbackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Feedback Comment
        /// </summary>
        /// <remarks>
        /// Delete comment for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFeedbackCommentAsync(string feedbackId, string commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Feedback Comment
        /// </summary>
        /// <remarks>
        /// Delete comment for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFeedbackCommentWithHttpInfoAsync(string feedbackId, string commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Vote For Feedback
        /// </summary>
        /// <remarks>
        /// Cancel vote for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVoteForFeedbackAsync(string feedbackId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Vote For Feedback
        /// </summary>
        /// <remarks>
        /// Cancel vote for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVoteForFeedbackWithHttpInfoAsync(string feedbackId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Feedback
        /// </summary>
        /// <remarks>
        /// Retrieve feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feedback</returns>
        System.Threading.Tasks.Task<Feedback> GetFeedbackAsync(string feedbackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Feedback
        /// </summary>
        /// <remarks>
        /// Retrieve feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feedback)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feedback>> GetFeedbackWithHttpInfoAsync(string feedbackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Feedback Comment
        /// </summary>
        /// <remarks>
        /// Retrieve comment from feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Comment</returns>
        System.Threading.Tasks.Task<Comment> GetFeedbackCommentAsync(string feedbackId, string commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Feedback Comment
        /// </summary>
        /// <remarks>
        /// Retrieve comment from feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Comment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Comment>> GetFeedbackCommentWithHttpInfoAsync(string feedbackId, string commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Feedbacks
        /// </summary>
        /// <remarks>
        /// Get the list of feedbacks.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feedbacks</returns>
        System.Threading.Tasks.Task<Feedbacks> GetFeedbacksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Feedbacks
        /// </summary>
        /// <remarks>
        /// Get the list of feedbacks.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feedbacks)</returns>
        System.Threading.Tasks.Task<ApiResponse<Feedbacks>> GetFeedbacksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Feedback
        /// </summary>
        /// <remarks>
        /// Edit feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFeedbackAsync(string feedbackId, UpdateFeedbackParam updateFeedbackParam = default(UpdateFeedbackParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Feedback
        /// </summary>
        /// <remarks>
        /// Edit feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFeedbackWithHttpInfoAsync(string feedbackId, UpdateFeedbackParam updateFeedbackParam = default(UpdateFeedbackParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Feedback Comment
        /// </summary>
        /// <remarks>
        /// Edit comment for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="updateFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFeedbackCommentAsync(string feedbackId, string commentId, UpdateFeedbackCommentParam updateFeedbackCommentParam = default(UpdateFeedbackCommentParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Feedback Comment
        /// </summary>
        /// <remarks>
        /// Edit comment for feedback.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="updateFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFeedbackCommentWithHttpInfoAsync(string feedbackId, string commentId, UpdateFeedbackCommentParam updateFeedbackCommentParam = default(UpdateFeedbackCommentParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Feedback Status
        /// </summary>
        /// <remarks>
        /// Update Feedback Status.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateFeedbackStatusAsync(string feedbackId, UpdateFeedbackStatusParam updateFeedbackStatusParam = default(UpdateFeedbackStatusParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Feedback Status
        /// </summary>
        /// <remarks>
        /// Update Feedback Status.
        /// </remarks>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateFeedbackStatusWithHttpInfoAsync(string feedbackId, UpdateFeedbackStatusParam updateFeedbackStatusParam = default(UpdateFeedbackStatusParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeedbackApi : IFeedbackApiSync, IFeedbackApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeedbackApi : IFeedbackApi
    {
        private communicationapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeedbackApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeedbackApi(string basePath)
        {
            this.Configuration = communicationapi.Client.Configuration.MergeConfigurations(
                communicationapi.Client.GlobalConfiguration.Instance,
                new communicationapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new communicationapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new communicationapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = communicationapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeedbackApi(communicationapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = communicationapi.Client.Configuration.MergeConfigurations(
                communicationapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new communicationapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new communicationapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = communicationapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeedbackApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FeedbackApi(communicationapi.Client.ISynchronousClient client, communicationapi.Client.IAsynchronousClient asyncClient, communicationapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = communicationapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public communicationapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public communicationapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public communicationapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public communicationapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Feedback Create Feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feedback</returns>
        public Feedback CreateFeedback(CreateFeedbackParam createFeedbackParam = default(CreateFeedbackParam), int operationIndex = 0)
        {
            communicationapi.Client.ApiResponse<Feedback> localVarResponse = CreateFeedbackWithHttpInfo(createFeedbackParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Feedback Create Feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feedback</returns>
        public communicationapi.Client.ApiResponse<Feedback> CreateFeedbackWithHttpInfo(CreateFeedbackParam createFeedbackParam = default(CreateFeedbackParam), int operationIndex = 0)
        {
            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFeedbackParam;

            localVarRequestOptions.Operation = "FeedbackApi.CreateFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Feedback>("/feedbacks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Feedback Create Feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feedback</returns>
        public async System.Threading.Tasks.Task<Feedback> CreateFeedbackAsync(CreateFeedbackParam createFeedbackParam = default(CreateFeedbackParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            communicationapi.Client.ApiResponse<Feedback> localVarResponse = await CreateFeedbackWithHttpInfoAsync(createFeedbackParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Feedback Create Feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feedback)</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Feedback>> CreateFeedbackWithHttpInfoAsync(CreateFeedbackParam createFeedbackParam = default(CreateFeedbackParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFeedbackParam;

            localVarRequestOptions.Operation = "FeedbackApi.CreateFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Feedback>("/feedbacks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Feedback Comment Post comment to feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Comment</returns>
        public Comment CreateFeedbackComment(string feedbackId, CreateFeedbackCommentParam createFeedbackCommentParam = default(CreateFeedbackCommentParam), int operationIndex = 0)
        {
            communicationapi.Client.ApiResponse<Comment> localVarResponse = CreateFeedbackCommentWithHttpInfo(feedbackId, createFeedbackCommentParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Feedback Comment Post comment to feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Comment</returns>
        public communicationapi.Client.ApiResponse<Comment> CreateFeedbackCommentWithHttpInfo(string feedbackId, CreateFeedbackCommentParam createFeedbackCommentParam = default(CreateFeedbackCommentParam), int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->CreateFeedbackComment");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.Data = createFeedbackCommentParam;

            localVarRequestOptions.Operation = "FeedbackApi.CreateFeedbackComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Comment>("/feedbacks/{feedback_id}/comments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFeedbackComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Feedback Comment Post comment to feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Comment</returns>
        public async System.Threading.Tasks.Task<Comment> CreateFeedbackCommentAsync(string feedbackId, CreateFeedbackCommentParam createFeedbackCommentParam = default(CreateFeedbackCommentParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            communicationapi.Client.ApiResponse<Comment> localVarResponse = await CreateFeedbackCommentWithHttpInfoAsync(feedbackId, createFeedbackCommentParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Feedback Comment Post comment to feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Comment)</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Comment>> CreateFeedbackCommentWithHttpInfoAsync(string feedbackId, CreateFeedbackCommentParam createFeedbackCommentParam = default(CreateFeedbackCommentParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->CreateFeedbackComment");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.Data = createFeedbackCommentParam;

            localVarRequestOptions.Operation = "FeedbackApi.CreateFeedbackComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Comment>("/feedbacks/{feedback_id}/comments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFeedbackComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Vote User Vote for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createVoteUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Votes</returns>
        public Votes CreateVoteUser(string feedbackId, CreateVoteUserParam createVoteUserParam = default(CreateVoteUserParam), int operationIndex = 0)
        {
            communicationapi.Client.ApiResponse<Votes> localVarResponse = CreateVoteUserWithHttpInfo(feedbackId, createVoteUserParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Vote User Vote for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createVoteUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Votes</returns>
        public communicationapi.Client.ApiResponse<Votes> CreateVoteUserWithHttpInfo(string feedbackId, CreateVoteUserParam createVoteUserParam = default(CreateVoteUserParam), int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->CreateVoteUser");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.Data = createVoteUserParam;

            localVarRequestOptions.Operation = "FeedbackApi.CreateVoteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Votes>("/feedbacks/{feedback_id}/votes/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVoteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Vote User Vote for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createVoteUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Votes</returns>
        public async System.Threading.Tasks.Task<Votes> CreateVoteUserAsync(string feedbackId, CreateVoteUserParam createVoteUserParam = default(CreateVoteUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            communicationapi.Client.ApiResponse<Votes> localVarResponse = await CreateVoteUserWithHttpInfoAsync(feedbackId, createVoteUserParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Vote User Vote for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="createVoteUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Votes)</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Votes>> CreateVoteUserWithHttpInfoAsync(string feedbackId, CreateVoteUserParam createVoteUserParam = default(CreateVoteUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->CreateVoteUser");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.Data = createVoteUserParam;

            localVarRequestOptions.Operation = "FeedbackApi.CreateVoteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Votes>("/feedbacks/{feedback_id}/votes/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateVoteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Feedback Delete Feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteFeedback(string feedbackId, int operationIndex = 0)
        {
            DeleteFeedbackWithHttpInfo(feedbackId);
        }

        /// <summary>
        /// Delete Feedback Delete Feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public communicationapi.Client.ApiResponse<Object> DeleteFeedbackWithHttpInfo(string feedbackId, int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->DeleteFeedback");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.DeleteFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/feedbacks/{feedback_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Feedback Delete Feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFeedbackAsync(string feedbackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFeedbackWithHttpInfoAsync(feedbackId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Feedback Delete Feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Object>> DeleteFeedbackWithHttpInfoAsync(string feedbackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->DeleteFeedback");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.DeleteFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/feedbacks/{feedback_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Feedback Comment Delete comment for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteFeedbackComment(string feedbackId, string commentId, int operationIndex = 0)
        {
            DeleteFeedbackCommentWithHttpInfo(feedbackId, commentId);
        }

        /// <summary>
        /// Delete Feedback Comment Delete comment for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public communicationapi.Client.ApiResponse<Object> DeleteFeedbackCommentWithHttpInfo(string feedbackId, string commentId, int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->DeleteFeedbackComment");
            }

            // verify the required parameter 'commentId' is set
            if (commentId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'commentId' when calling FeedbackApi->DeleteFeedbackComment");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", communicationapi.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.DeleteFeedbackComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/feedbacks/{feedback_id}/comments/{comment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFeedbackComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Feedback Comment Delete comment for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFeedbackCommentAsync(string feedbackId, string commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteFeedbackCommentWithHttpInfoAsync(feedbackId, commentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Feedback Comment Delete comment for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Object>> DeleteFeedbackCommentWithHttpInfoAsync(string feedbackId, string commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->DeleteFeedbackComment");
            }

            // verify the required parameter 'commentId' is set
            if (commentId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'commentId' when calling FeedbackApi->DeleteFeedbackComment");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", communicationapi.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.DeleteFeedbackComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/feedbacks/{feedback_id}/comments/{comment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFeedbackComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Vote For Feedback Cancel vote for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteVoteForFeedback(string feedbackId, string userId, int operationIndex = 0)
        {
            DeleteVoteForFeedbackWithHttpInfo(feedbackId, userId);
        }

        /// <summary>
        /// Delete Vote For Feedback Cancel vote for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public communicationapi.Client.ApiResponse<Object> DeleteVoteForFeedbackWithHttpInfo(string feedbackId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->DeleteVoteForFeedback");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FeedbackApi->DeleteVoteForFeedback");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", communicationapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.DeleteVoteForFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/feedbacks/{feedback_id}/votes/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVoteForFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Vote For Feedback Cancel vote for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVoteForFeedbackAsync(string feedbackId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteVoteForFeedbackWithHttpInfoAsync(feedbackId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Vote For Feedback Cancel vote for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Object>> DeleteVoteForFeedbackWithHttpInfoAsync(string feedbackId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->DeleteVoteForFeedback");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'userId' when calling FeedbackApi->DeleteVoteForFeedback");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", communicationapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.DeleteVoteForFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/feedbacks/{feedback_id}/votes/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVoteForFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feedback Retrieve feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feedback</returns>
        public Feedback GetFeedback(string feedbackId, int operationIndex = 0)
        {
            communicationapi.Client.ApiResponse<Feedback> localVarResponse = GetFeedbackWithHttpInfo(feedbackId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feedback Retrieve feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feedback</returns>
        public communicationapi.Client.ApiResponse<Feedback> GetFeedbackWithHttpInfo(string feedbackId, int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->GetFeedback");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.GetFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feedback>("/feedbacks/{feedback_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feedback Retrieve feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feedback</returns>
        public async System.Threading.Tasks.Task<Feedback> GetFeedbackAsync(string feedbackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            communicationapi.Client.ApiResponse<Feedback> localVarResponse = await GetFeedbackWithHttpInfoAsync(feedbackId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feedback Retrieve feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feedback)</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Feedback>> GetFeedbackWithHttpInfoAsync(string feedbackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->GetFeedback");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.GetFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feedback>("/feedbacks/{feedback_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feedback Comment Retrieve comment from feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Comment</returns>
        public Comment GetFeedbackComment(string feedbackId, string commentId, int operationIndex = 0)
        {
            communicationapi.Client.ApiResponse<Comment> localVarResponse = GetFeedbackCommentWithHttpInfo(feedbackId, commentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feedback Comment Retrieve comment from feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Comment</returns>
        public communicationapi.Client.ApiResponse<Comment> GetFeedbackCommentWithHttpInfo(string feedbackId, string commentId, int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->GetFeedbackComment");
            }

            // verify the required parameter 'commentId' is set
            if (commentId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'commentId' when calling FeedbackApi->GetFeedbackComment");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", communicationapi.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.GetFeedbackComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Comment>("/feedbacks/{feedback_id}/comments/{comment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeedbackComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feedback Comment Retrieve comment from feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Comment</returns>
        public async System.Threading.Tasks.Task<Comment> GetFeedbackCommentAsync(string feedbackId, string commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            communicationapi.Client.ApiResponse<Comment> localVarResponse = await GetFeedbackCommentWithHttpInfoAsync(feedbackId, commentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feedback Comment Retrieve comment from feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Comment)</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Comment>> GetFeedbackCommentWithHttpInfoAsync(string feedbackId, string commentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->GetFeedbackComment");
            }

            // verify the required parameter 'commentId' is set
            if (commentId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'commentId' when calling FeedbackApi->GetFeedbackComment");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", communicationapi.Client.ClientUtils.ParameterToString(commentId)); // path parameter

            localVarRequestOptions.Operation = "FeedbackApi.GetFeedbackComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Comment>("/feedbacks/{feedback_id}/comments/{comment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeedbackComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feedbacks Get the list of feedbacks.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Feedbacks</returns>
        public Feedbacks GetFeedbacks(int operationIndex = 0)
        {
            communicationapi.Client.ApiResponse<Feedbacks> localVarResponse = GetFeedbacksWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feedbacks Get the list of feedbacks.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Feedbacks</returns>
        public communicationapi.Client.ApiResponse<Feedbacks> GetFeedbacksWithHttpInfo(int operationIndex = 0)
        {
            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FeedbackApi.GetFeedbacks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Feedbacks>("/feedbacks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeedbacks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Feedbacks Get the list of feedbacks.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Feedbacks</returns>
        public async System.Threading.Tasks.Task<Feedbacks> GetFeedbacksAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            communicationapi.Client.ApiResponse<Feedbacks> localVarResponse = await GetFeedbacksWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Feedbacks Get the list of feedbacks.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Feedbacks)</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Feedbacks>> GetFeedbacksWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "FeedbackApi.GetFeedbacks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Feedbacks>("/feedbacks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFeedbacks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Feedback Edit feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateFeedback(string feedbackId, UpdateFeedbackParam updateFeedbackParam = default(UpdateFeedbackParam), int operationIndex = 0)
        {
            UpdateFeedbackWithHttpInfo(feedbackId, updateFeedbackParam);
        }

        /// <summary>
        /// Update Feedback Edit feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public communicationapi.Client.ApiResponse<Object> UpdateFeedbackWithHttpInfo(string feedbackId, UpdateFeedbackParam updateFeedbackParam = default(UpdateFeedbackParam), int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->UpdateFeedback");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.Data = updateFeedbackParam;

            localVarRequestOptions.Operation = "FeedbackApi.UpdateFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/feedbacks/{feedback_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Feedback Edit feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFeedbackAsync(string feedbackId, UpdateFeedbackParam updateFeedbackParam = default(UpdateFeedbackParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateFeedbackWithHttpInfoAsync(feedbackId, updateFeedbackParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Feedback Edit feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Object>> UpdateFeedbackWithHttpInfoAsync(string feedbackId, UpdateFeedbackParam updateFeedbackParam = default(UpdateFeedbackParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->UpdateFeedback");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.Data = updateFeedbackParam;

            localVarRequestOptions.Operation = "FeedbackApi.UpdateFeedback";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/feedbacks/{feedback_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFeedback", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Feedback Comment Edit comment for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="updateFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateFeedbackComment(string feedbackId, string commentId, UpdateFeedbackCommentParam updateFeedbackCommentParam = default(UpdateFeedbackCommentParam), int operationIndex = 0)
        {
            UpdateFeedbackCommentWithHttpInfo(feedbackId, commentId, updateFeedbackCommentParam);
        }

        /// <summary>
        /// Update Feedback Comment Edit comment for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="updateFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public communicationapi.Client.ApiResponse<Object> UpdateFeedbackCommentWithHttpInfo(string feedbackId, string commentId, UpdateFeedbackCommentParam updateFeedbackCommentParam = default(UpdateFeedbackCommentParam), int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->UpdateFeedbackComment");
            }

            // verify the required parameter 'commentId' is set
            if (commentId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'commentId' when calling FeedbackApi->UpdateFeedbackComment");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", communicationapi.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.Data = updateFeedbackCommentParam;

            localVarRequestOptions.Operation = "FeedbackApi.UpdateFeedbackComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/feedbacks/{feedback_id}/comments/{comment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFeedbackComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Feedback Comment Edit comment for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="updateFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFeedbackCommentAsync(string feedbackId, string commentId, UpdateFeedbackCommentParam updateFeedbackCommentParam = default(UpdateFeedbackCommentParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateFeedbackCommentWithHttpInfoAsync(feedbackId, commentId, updateFeedbackCommentParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Feedback Comment Edit comment for feedback.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="commentId"></param>
        /// <param name="updateFeedbackCommentParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Object>> UpdateFeedbackCommentWithHttpInfoAsync(string feedbackId, string commentId, UpdateFeedbackCommentParam updateFeedbackCommentParam = default(UpdateFeedbackCommentParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->UpdateFeedbackComment");
            }

            // verify the required parameter 'commentId' is set
            if (commentId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'commentId' when calling FeedbackApi->UpdateFeedbackComment");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.PathParameters.Add("comment_id", communicationapi.Client.ClientUtils.ParameterToString(commentId)); // path parameter
            localVarRequestOptions.Data = updateFeedbackCommentParam;

            localVarRequestOptions.Operation = "FeedbackApi.UpdateFeedbackComment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/feedbacks/{feedback_id}/comments/{comment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFeedbackComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Feedback Status Update Feedback Status.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateFeedbackStatus(string feedbackId, UpdateFeedbackStatusParam updateFeedbackStatusParam = default(UpdateFeedbackStatusParam), int operationIndex = 0)
        {
            UpdateFeedbackStatusWithHttpInfo(feedbackId, updateFeedbackStatusParam);
        }

        /// <summary>
        /// Update Feedback Status Update Feedback Status.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public communicationapi.Client.ApiResponse<Object> UpdateFeedbackStatusWithHttpInfo(string feedbackId, UpdateFeedbackStatusParam updateFeedbackStatusParam = default(UpdateFeedbackStatusParam), int operationIndex = 0)
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->UpdateFeedbackStatus");
            }

            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.Data = updateFeedbackStatusParam;

            localVarRequestOptions.Operation = "FeedbackApi.UpdateFeedbackStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/feedbacks/{feedback_id}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFeedbackStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Feedback Status Update Feedback Status.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateFeedbackStatusAsync(string feedbackId, UpdateFeedbackStatusParam updateFeedbackStatusParam = default(UpdateFeedbackStatusParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateFeedbackStatusWithHttpInfoAsync(feedbackId, updateFeedbackStatusParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Feedback Status Update Feedback Status.
        /// </summary>
        /// <exception cref="communicationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feedbackId"></param>
        /// <param name="updateFeedbackStatusParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<communicationapi.Client.ApiResponse<Object>> UpdateFeedbackStatusWithHttpInfoAsync(string feedbackId, UpdateFeedbackStatusParam updateFeedbackStatusParam = default(UpdateFeedbackStatusParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'feedbackId' is set
            if (feedbackId == null)
            {
                throw new communicationapi.Client.ApiException(400, "Missing required parameter 'feedbackId' when calling FeedbackApi->UpdateFeedbackStatus");
            }


            communicationapi.Client.RequestOptions localVarRequestOptions = new communicationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = communicationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = communicationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("feedback_id", communicationapi.Client.ClientUtils.ParameterToString(feedbackId)); // path parameter
            localVarRequestOptions.Data = updateFeedbackStatusParam;

            localVarRequestOptions.Operation = "FeedbackApi.UpdateFeedbackStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/feedbacks/{feedback_id}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFeedbackStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
