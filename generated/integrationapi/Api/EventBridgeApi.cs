/*
 * SaaSus Eventbridge API Schema
 *
 * SaaSus Eventbridge API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using integrationapi.Client;
using integrationapi.Model;

namespace integrationapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventBridgeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send Events
        /// </summary>
        /// <remarks>
        /// Send events to Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEventBridgeEventParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateEventBridgeEvent(CreateEventBridgeEventParam createEventBridgeEventParam = default(CreateEventBridgeEventParam), int operationIndex = 0);

        /// <summary>
        /// Send Events
        /// </summary>
        /// <remarks>
        /// Send events to Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEventBridgeEventParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateEventBridgeEventWithHttpInfo(CreateEventBridgeEventParam createEventBridgeEventParam = default(CreateEventBridgeEventParam), int operationIndex = 0);
        /// <summary>
        /// Test EventBridge Connection
        /// </summary>
        /// <remarks>
        /// Send events to test the connection with Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateEventBridgeTestEvent(int operationIndex = 0);

        /// <summary>
        /// Test EventBridge Connection
        /// </summary>
        /// <remarks>
        /// Send events to test the connection with Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateEventBridgeTestEventWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Delete settings used to provide host state via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteEventBridgeSettings(int operationIndex = 0);

        /// <summary>
        /// Delete EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Delete settings used to provide host state via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEventBridgeSettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventBridgeSettings</returns>
        EventBridgeSettings GetEventBridgeSettings(int operationIndex = 0);

        /// <summary>
        /// Get EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventBridgeSettings</returns>
        ApiResponse<EventBridgeSettings> GetEventBridgeSettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Update configuration used to provide the host state via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SaveEventBridgeSettings(EventBridgeSettings body = default(EventBridgeSettings), int operationIndex = 0);

        /// <summary>
        /// Update EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Update configuration used to provide the host state via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SaveEventBridgeSettingsWithHttpInfo(EventBridgeSettings body = default(EventBridgeSettings), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventBridgeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Send Events
        /// </summary>
        /// <remarks>
        /// Send events to Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEventBridgeEventParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateEventBridgeEventAsync(CreateEventBridgeEventParam createEventBridgeEventParam = default(CreateEventBridgeEventParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Events
        /// </summary>
        /// <remarks>
        /// Send events to Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEventBridgeEventParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEventBridgeEventWithHttpInfoAsync(CreateEventBridgeEventParam createEventBridgeEventParam = default(CreateEventBridgeEventParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test EventBridge Connection
        /// </summary>
        /// <remarks>
        /// Send events to test the connection with Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateEventBridgeTestEventAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test EventBridge Connection
        /// </summary>
        /// <remarks>
        /// Send events to test the connection with Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEventBridgeTestEventWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Delete settings used to provide host state via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEventBridgeSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Delete settings used to provide host state via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEventBridgeSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventBridgeSettings</returns>
        System.Threading.Tasks.Task<EventBridgeSettings> GetEventBridgeSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventBridgeSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventBridgeSettings>> GetEventBridgeSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Update configuration used to provide the host state via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SaveEventBridgeSettingsAsync(EventBridgeSettings body = default(EventBridgeSettings), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update EventBridge Settings
        /// </summary>
        /// <remarks>
        /// Update configuration used to provide the host state via Amazon EventBridge. 
        /// </remarks>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SaveEventBridgeSettingsWithHttpInfoAsync(EventBridgeSettings body = default(EventBridgeSettings), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventBridgeApi : IEventBridgeApiSync, IEventBridgeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventBridgeApi : IEventBridgeApi
    {
        private integrationapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventBridgeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventBridgeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventBridgeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventBridgeApi(string basePath)
        {
            this.Configuration = integrationapi.Client.Configuration.MergeConfigurations(
                integrationapi.Client.GlobalConfiguration.Instance,
                new integrationapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new integrationapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new integrationapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = integrationapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventBridgeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventBridgeApi(integrationapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = integrationapi.Client.Configuration.MergeConfigurations(
                integrationapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new integrationapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new integrationapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = integrationapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventBridgeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventBridgeApi(integrationapi.Client.ISynchronousClient client, integrationapi.Client.IAsynchronousClient asyncClient, integrationapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = integrationapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public integrationapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public integrationapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public integrationapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public integrationapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Send Events Send events to Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEventBridgeEventParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateEventBridgeEvent(CreateEventBridgeEventParam createEventBridgeEventParam = default(CreateEventBridgeEventParam), int operationIndex = 0)
        {
            CreateEventBridgeEventWithHttpInfo(createEventBridgeEventParam);
        }

        /// <summary>
        /// Send Events Send events to Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEventBridgeEventParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public integrationapi.Client.ApiResponse<Object> CreateEventBridgeEventWithHttpInfo(CreateEventBridgeEventParam createEventBridgeEventParam = default(CreateEventBridgeEventParam), int operationIndex = 0)
        {
            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEventBridgeEventParam;

            localVarRequestOptions.Operation = "EventBridgeApi.CreateEventBridgeEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/eventbridge/event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEventBridgeEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Events Send events to Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEventBridgeEventParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateEventBridgeEventAsync(CreateEventBridgeEventParam createEventBridgeEventParam = default(CreateEventBridgeEventParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateEventBridgeEventWithHttpInfoAsync(createEventBridgeEventParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send Events Send events to Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEventBridgeEventParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<integrationapi.Client.ApiResponse<Object>> CreateEventBridgeEventWithHttpInfoAsync(CreateEventBridgeEventParam createEventBridgeEventParam = default(CreateEventBridgeEventParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEventBridgeEventParam;

            localVarRequestOptions.Operation = "EventBridgeApi.CreateEventBridgeEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/eventbridge/event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEventBridgeEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test EventBridge Connection Send events to test the connection with Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateEventBridgeTestEvent(int operationIndex = 0)
        {
            CreateEventBridgeTestEventWithHttpInfo();
        }

        /// <summary>
        /// Test EventBridge Connection Send events to test the connection with Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public integrationapi.Client.ApiResponse<Object> CreateEventBridgeTestEventWithHttpInfo(int operationIndex = 0)
        {
            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventBridgeApi.CreateEventBridgeTestEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/eventbridge/test-event", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEventBridgeTestEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test EventBridge Connection Send events to test the connection with Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateEventBridgeTestEventAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateEventBridgeTestEventWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Test EventBridge Connection Send events to test the connection with Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<integrationapi.Client.ApiResponse<Object>> CreateEventBridgeTestEventWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventBridgeApi.CreateEventBridgeTestEvent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/eventbridge/test-event", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEventBridgeTestEvent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete EventBridge Settings Delete settings used to provide host state via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteEventBridgeSettings(int operationIndex = 0)
        {
            DeleteEventBridgeSettingsWithHttpInfo();
        }

        /// <summary>
        /// Delete EventBridge Settings Delete settings used to provide host state via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public integrationapi.Client.ApiResponse<Object> DeleteEventBridgeSettingsWithHttpInfo(int operationIndex = 0)
        {
            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventBridgeApi.DeleteEventBridgeSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/eventbridge/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEventBridgeSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete EventBridge Settings Delete settings used to provide host state via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEventBridgeSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEventBridgeSettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete EventBridge Settings Delete settings used to provide host state via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<integrationapi.Client.ApiResponse<Object>> DeleteEventBridgeSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventBridgeApi.DeleteEventBridgeSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/eventbridge/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEventBridgeSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get EventBridge Settings Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EventBridgeSettings</returns>
        public EventBridgeSettings GetEventBridgeSettings(int operationIndex = 0)
        {
            integrationapi.Client.ApiResponse<EventBridgeSettings> localVarResponse = GetEventBridgeSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get EventBridge Settings Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EventBridgeSettings</returns>
        public integrationapi.Client.ApiResponse<EventBridgeSettings> GetEventBridgeSettingsWithHttpInfo(int operationIndex = 0)
        {
            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventBridgeApi.GetEventBridgeSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EventBridgeSettings>("/eventbridge/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventBridgeSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get EventBridge Settings Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EventBridgeSettings</returns>
        public async System.Threading.Tasks.Task<EventBridgeSettings> GetEventBridgeSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            integrationapi.Client.ApiResponse<EventBridgeSettings> localVarResponse = await GetEventBridgeSettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get EventBridge Settings Gets the settings for providing real-time status of all monitored hosts via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EventBridgeSettings)</returns>
        public async System.Threading.Tasks.Task<integrationapi.Client.ApiResponse<EventBridgeSettings>> GetEventBridgeSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "EventBridgeApi.GetEventBridgeSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EventBridgeSettings>("/eventbridge/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventBridgeSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update EventBridge Settings Update configuration used to provide the host state via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SaveEventBridgeSettings(EventBridgeSettings body = default(EventBridgeSettings), int operationIndex = 0)
        {
            SaveEventBridgeSettingsWithHttpInfo(body);
        }

        /// <summary>
        /// Update EventBridge Settings Update configuration used to provide the host state via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public integrationapi.Client.ApiResponse<Object> SaveEventBridgeSettingsWithHttpInfo(EventBridgeSettings body = default(EventBridgeSettings), int operationIndex = 0)
        {
            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EventBridgeApi.SaveEventBridgeSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/eventbridge/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveEventBridgeSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update EventBridge Settings Update configuration used to provide the host state via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SaveEventBridgeSettingsAsync(EventBridgeSettings body = default(EventBridgeSettings), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SaveEventBridgeSettingsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update EventBridge Settings Update configuration used to provide the host state via Amazon EventBridge. 
        /// </summary>
        /// <exception cref="integrationapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<integrationapi.Client.ApiResponse<Object>> SaveEventBridgeSettingsWithHttpInfoAsync(EventBridgeSettings body = default(EventBridgeSettings), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            integrationapi.Client.RequestOptions localVarRequestOptions = new integrationapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = integrationapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = integrationapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "EventBridgeApi.SaveEventBridgeSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/eventbridge/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveEventBridgeSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
