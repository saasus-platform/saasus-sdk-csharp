/*
 * SaaSus Eventbridge API Schema
 *
 * SaaSus Eventbridge API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = integrationapi.Client.OpenAPIDateConverter;

namespace integrationapi.Model
{
    /// <summary>
    /// EventMessage
    /// </summary>
    [DataContract(Name = "EventMessage")]
    public partial class EventMessage : IEquatable<EventMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventMessage" /> class.
        /// </summary>
        /// <param name="eventType">event type (required).</param>
        /// <param name="eventDetailType">detailed event type (required).</param>
        /// <param name="message">event message (required).</param>
        public EventMessage(string eventType = default(string), string eventDetailType = default(string), string message = default(string))
        {
            // to ensure "eventType" is required (not null)
            if (eventType == null)
            {
                throw new ArgumentNullException("eventType is a required property for EventMessage and cannot be null");
            }
            this.EventType = eventType;
            // to ensure "eventDetailType" is required (not null)
            if (eventDetailType == null)
            {
                throw new ArgumentNullException("eventDetailType is a required property for EventMessage and cannot be null");
            }
            this.EventDetailType = eventDetailType;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for EventMessage and cannot be null");
            }
            this.Message = message;
        }

        /// <summary>
        /// event type
        /// </summary>
        /// <value>event type</value>
        /// <example>api_call</example>
        [DataMember(Name = "event_type", IsRequired = true, EmitDefaultValue = true)]
        public string EventType { get; set; }

        /// <summary>
        /// detailed event type
        /// </summary>
        /// <value>detailed event type</value>
        /// <example>create_user</example>
        [DataMember(Name = "event_detail_type", IsRequired = true, EmitDefaultValue = true)]
        public string EventDetailType { get; set; }

        /// <summary>
        /// event message
        /// </summary>
        /// <value>event message</value>
        /// <example>{id:8b79528a-ec3b-4f68-b7c4-d793e3894561,name:test222}</example>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventMessage {\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventDetailType: ").Append(EventDetailType).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventMessage);
        }

        /// <summary>
        /// Returns true if EventMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of EventMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.EventDetailType == input.EventDetailType ||
                    (this.EventDetailType != null &&
                    this.EventDetailType.Equals(input.EventDetailType))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.EventDetailType != null)
                {
                    hashCode = (hashCode * 59) + this.EventDetailType.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
