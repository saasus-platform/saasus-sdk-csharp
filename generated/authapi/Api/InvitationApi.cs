/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using authapi.Client;
using authapi.Model;

namespace authapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Create an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invitation</returns>
        Invitation CreateTenantInvitation(string tenantId, CreateTenantInvitationParam createTenantInvitationParam = default(CreateTenantInvitationParam), int operationIndex = 0);

        /// <summary>
        /// Create Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Create an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invitation</returns>
        ApiResponse<Invitation> CreateTenantInvitationWithHttpInfo(string tenantId, CreateTenantInvitationParam createTenantInvitationParam = default(CreateTenantInvitationParam), int operationIndex = 0);
        /// <summary>
        /// Delete Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Delete an invitation for the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTenantInvitation(string tenantId, string invitationId, int operationIndex = 0);

        /// <summary>
        /// Delete Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Delete an invitation for the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTenantInvitationWithHttpInfo(string tenantId, string invitationId, int operationIndex = 0);
        /// <summary>
        /// Get Invitation Validity
        /// </summary>
        /// <remarks>
        /// Get the validity of an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvitationValidity</returns>
        InvitationValidity GetInvitationValidity(string invitationId, int operationIndex = 0);

        /// <summary>
        /// Get Invitation Validity
        /// </summary>
        /// <remarks>
        /// Get the validity of an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvitationValidity</returns>
        ApiResponse<InvitationValidity> GetInvitationValidityWithHttpInfo(string invitationId, int operationIndex = 0);
        /// <summary>
        /// Get Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Get invitation information for the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invitation</returns>
        Invitation GetTenantInvitation(string tenantId, string invitationId, int operationIndex = 0);

        /// <summary>
        /// Get Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Get invitation information for the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invitation</returns>
        ApiResponse<Invitation> GetTenantInvitationWithHttpInfo(string tenantId, string invitationId, int operationIndex = 0);
        /// <summary>
        /// Get Tenant Invitations
        /// </summary>
        /// <remarks>
        /// Get a list of invitations to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invitations</returns>
        Invitations GetTenantInvitations(string tenantId, int operationIndex = 0);

        /// <summary>
        /// Get Tenant Invitations
        /// </summary>
        /// <remarks>
        /// Get a list of invitations to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invitations</returns>
        ApiResponse<Invitations> GetTenantInvitationsWithHttpInfo(string tenantId, int operationIndex = 0);
        /// <summary>
        /// Validate Invitation
        /// </summary>
        /// <remarks>
        /// Validate an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="validateInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ValidateInvitation(string invitationId, ValidateInvitationParam validateInvitationParam = default(ValidateInvitationParam), int operationIndex = 0);

        /// <summary>
        /// Validate Invitation
        /// </summary>
        /// <remarks>
        /// Validate an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="validateInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateInvitationWithHttpInfo(string invitationId, ValidateInvitationParam validateInvitationParam = default(ValidateInvitationParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Create an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invitation</returns>
        System.Threading.Tasks.Task<Invitation> CreateTenantInvitationAsync(string tenantId, CreateTenantInvitationParam createTenantInvitationParam = default(CreateTenantInvitationParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Create an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invitation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invitation>> CreateTenantInvitationWithHttpInfoAsync(string tenantId, CreateTenantInvitationParam createTenantInvitationParam = default(CreateTenantInvitationParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Delete an invitation for the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTenantInvitationAsync(string tenantId, string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Delete an invitation for the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTenantInvitationWithHttpInfoAsync(string tenantId, string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Invitation Validity
        /// </summary>
        /// <remarks>
        /// Get the validity of an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvitationValidity</returns>
        System.Threading.Tasks.Task<InvitationValidity> GetInvitationValidityAsync(string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Invitation Validity
        /// </summary>
        /// <remarks>
        /// Get the validity of an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvitationValidity)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationValidity>> GetInvitationValidityWithHttpInfoAsync(string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Get invitation information for the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invitation</returns>
        System.Threading.Tasks.Task<Invitation> GetTenantInvitationAsync(string tenantId, string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tenant Invitation
        /// </summary>
        /// <remarks>
        /// Get invitation information for the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invitation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invitation>> GetTenantInvitationWithHttpInfoAsync(string tenantId, string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tenant Invitations
        /// </summary>
        /// <remarks>
        /// Get a list of invitations to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invitations</returns>
        System.Threading.Tasks.Task<Invitations> GetTenantInvitationsAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tenant Invitations
        /// </summary>
        /// <remarks>
        /// Get a list of invitations to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invitations)</returns>
        System.Threading.Tasks.Task<ApiResponse<Invitations>> GetTenantInvitationsWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Invitation
        /// </summary>
        /// <remarks>
        /// Validate an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="validateInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateInvitationAsync(string invitationId, ValidateInvitationParam validateInvitationParam = default(ValidateInvitationParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Invitation
        /// </summary>
        /// <remarks>
        /// Validate an invitation to the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="validateInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateInvitationWithHttpInfoAsync(string invitationId, ValidateInvitationParam validateInvitationParam = default(ValidateInvitationParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationApi : IInvitationApiSync, IInvitationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvitationApi : IInvitationApi
    {
        private authapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvitationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvitationApi(string basePath)
        {
            this.Configuration = authapi.Client.Configuration.MergeConfigurations(
                authapi.Client.GlobalConfiguration.Instance,
                new authapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvitationApi(authapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = authapi.Client.Configuration.MergeConfigurations(
                authapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new authapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InvitationApi(authapi.Client.ISynchronousClient client, authapi.Client.IAsynchronousClient asyncClient, authapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public authapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public authapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public authapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public authapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Tenant Invitation Create an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invitation</returns>
        public Invitation CreateTenantInvitation(string tenantId, CreateTenantInvitationParam createTenantInvitationParam = default(CreateTenantInvitationParam), int operationIndex = 0)
        {
            authapi.Client.ApiResponse<Invitation> localVarResponse = CreateTenantInvitationWithHttpInfo(tenantId, createTenantInvitationParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tenant Invitation Create an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invitation</returns>
        public authapi.Client.ApiResponse<Invitation> CreateTenantInvitationWithHttpInfo(string tenantId, CreateTenantInvitationParam createTenantInvitationParam = default(CreateTenantInvitationParam), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InvitationApi->CreateTenantInvitation");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = createTenantInvitationParam;

            localVarRequestOptions.Operation = "InvitationApi.CreateTenantInvitation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Invitation>("/tenants/{tenant_id}/invitations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tenant Invitation Create an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invitation</returns>
        public async System.Threading.Tasks.Task<Invitation> CreateTenantInvitationAsync(string tenantId, CreateTenantInvitationParam createTenantInvitationParam = default(CreateTenantInvitationParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<Invitation> localVarResponse = await CreateTenantInvitationWithHttpInfoAsync(tenantId, createTenantInvitationParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tenant Invitation Create an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invitation)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Invitation>> CreateTenantInvitationWithHttpInfoAsync(string tenantId, CreateTenantInvitationParam createTenantInvitationParam = default(CreateTenantInvitationParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InvitationApi->CreateTenantInvitation");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = createTenantInvitationParam;

            localVarRequestOptions.Operation = "InvitationApi.CreateTenantInvitation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Invitation>("/tenants/{tenant_id}/invitations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tenant Invitation Delete an invitation for the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTenantInvitation(string tenantId, string invitationId, int operationIndex = 0)
        {
            DeleteTenantInvitationWithHttpInfo(tenantId, invitationId);
        }

        /// <summary>
        /// Delete Tenant Invitation Delete an invitation for the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> DeleteTenantInvitationWithHttpInfo(string tenantId, string invitationId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InvitationApi->DeleteTenantInvitation");
            }

            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->DeleteTenantInvitation");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("invitation_id", authapi.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            localVarRequestOptions.Operation = "InvitationApi.DeleteTenantInvitation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenant_id}/invitations/{invitation_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tenant Invitation Delete an invitation for the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTenantInvitationAsync(string tenantId, string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTenantInvitationWithHttpInfoAsync(tenantId, invitationId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Tenant Invitation Delete an invitation for the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> DeleteTenantInvitationWithHttpInfoAsync(string tenantId, string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InvitationApi->DeleteTenantInvitation");
            }

            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->DeleteTenantInvitation");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("invitation_id", authapi.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            localVarRequestOptions.Operation = "InvitationApi.DeleteTenantInvitation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenant_id}/invitations/{invitation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invitation Validity Get the validity of an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InvitationValidity</returns>
        public InvitationValidity GetInvitationValidity(string invitationId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<InvitationValidity> localVarResponse = GetInvitationValidityWithHttpInfo(invitationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invitation Validity Get the validity of an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InvitationValidity</returns>
        public authapi.Client.ApiResponse<InvitationValidity> GetInvitationValidityWithHttpInfo(string invitationId, int operationIndex = 0)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->GetInvitationValidity");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invitation_id", authapi.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            localVarRequestOptions.Operation = "InvitationApi.GetInvitationValidity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InvitationValidity>("/invitations/{invitation_id}/validity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvitationValidity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Invitation Validity Get the validity of an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InvitationValidity</returns>
        public async System.Threading.Tasks.Task<InvitationValidity> GetInvitationValidityAsync(string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<InvitationValidity> localVarResponse = await GetInvitationValidityWithHttpInfoAsync(invitationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Invitation Validity Get the validity of an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InvitationValidity)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<InvitationValidity>> GetInvitationValidityWithHttpInfoAsync(string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->GetInvitationValidity");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invitation_id", authapi.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            localVarRequestOptions.Operation = "InvitationApi.GetInvitationValidity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InvitationValidity>("/invitations/{invitation_id}/validity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInvitationValidity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant Invitation Get invitation information for the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invitation</returns>
        public Invitation GetTenantInvitation(string tenantId, string invitationId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<Invitation> localVarResponse = GetTenantInvitationWithHttpInfo(tenantId, invitationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant Invitation Get invitation information for the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invitation</returns>
        public authapi.Client.ApiResponse<Invitation> GetTenantInvitationWithHttpInfo(string tenantId, string invitationId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InvitationApi->GetTenantInvitation");
            }

            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->GetTenantInvitation");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("invitation_id", authapi.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            localVarRequestOptions.Operation = "InvitationApi.GetTenantInvitation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Invitation>("/tenants/{tenant_id}/invitations/{invitation_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant Invitation Get invitation information for the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invitation</returns>
        public async System.Threading.Tasks.Task<Invitation> GetTenantInvitationAsync(string tenantId, string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<Invitation> localVarResponse = await GetTenantInvitationWithHttpInfoAsync(tenantId, invitationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant Invitation Get invitation information for the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invitation)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Invitation>> GetTenantInvitationWithHttpInfoAsync(string tenantId, string invitationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InvitationApi->GetTenantInvitation");
            }

            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->GetTenantInvitation");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("invitation_id", authapi.Client.ClientUtils.ParameterToString(invitationId)); // path parameter

            localVarRequestOptions.Operation = "InvitationApi.GetTenantInvitation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Invitation>("/tenants/{tenant_id}/invitations/{invitation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant Invitations Get a list of invitations to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Invitations</returns>
        public Invitations GetTenantInvitations(string tenantId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<Invitations> localVarResponse = GetTenantInvitationsWithHttpInfo(tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant Invitations Get a list of invitations to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Invitations</returns>
        public authapi.Client.ApiResponse<Invitations> GetTenantInvitationsWithHttpInfo(string tenantId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InvitationApi->GetTenantInvitations");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "InvitationApi.GetTenantInvitations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Invitations>("/tenants/{tenant_id}/invitations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantInvitations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant Invitations Get a list of invitations to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Invitations</returns>
        public async System.Threading.Tasks.Task<Invitations> GetTenantInvitationsAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<Invitations> localVarResponse = await GetTenantInvitationsWithHttpInfoAsync(tenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant Invitations Get a list of invitations to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Invitations)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Invitations>> GetTenantInvitationsWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling InvitationApi->GetTenantInvitations");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "InvitationApi.GetTenantInvitations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Invitations>("/tenants/{tenant_id}/invitations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantInvitations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Invitation Validate an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="validateInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ValidateInvitation(string invitationId, ValidateInvitationParam validateInvitationParam = default(ValidateInvitationParam), int operationIndex = 0)
        {
            ValidateInvitationWithHttpInfo(invitationId, validateInvitationParam);
        }

        /// <summary>
        /// Validate Invitation Validate an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="validateInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> ValidateInvitationWithHttpInfo(string invitationId, ValidateInvitationParam validateInvitationParam = default(ValidateInvitationParam), int operationIndex = 0)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->ValidateInvitation");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invitation_id", authapi.Client.ClientUtils.ParameterToString(invitationId)); // path parameter
            localVarRequestOptions.Data = validateInvitationParam;

            localVarRequestOptions.Operation = "InvitationApi.ValidateInvitation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/invitations/{invitation_id}/validate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Invitation Validate an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="validateInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateInvitationAsync(string invitationId, ValidateInvitationParam validateInvitationParam = default(ValidateInvitationParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateInvitationWithHttpInfoAsync(invitationId, validateInvitationParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validate Invitation Validate an invitation to the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">Invitation ID</param>
        /// <param name="validateInvitationParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> ValidateInvitationWithHttpInfoAsync(string invitationId, ValidateInvitationParam validateInvitationParam = default(ValidateInvitationParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->ValidateInvitation");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("invitation_id", authapi.Client.ClientUtils.ParameterToString(invitationId)); // path parameter
            localVarRequestOptions.Data = validateInvitationParam;

            localVarRequestOptions.Operation = "InvitationApi.ValidateInvitation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/invitations/{invitation_id}/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateInvitation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
