/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using authapi.Client;
using authapi.Model;

namespace authapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Tenant
        /// </summary>
        /// <remarks>
        /// Create a tenant managed by the SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tenant</returns>
        Tenant CreateTenant(TenantProps body = default(TenantProps), int operationIndex = 0);

        /// <summary>
        /// Create Tenant
        /// </summary>
        /// <remarks>
        /// Create a tenant managed by the SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tenant</returns>
        ApiResponse<Tenant> CreateTenantWithHttpInfo(TenantProps body = default(TenantProps), int operationIndex = 0);
        /// <summary>
        /// Stripe Initial Setting
        /// </summary>
        /// <remarks>
        /// Set Stripe initial information via billing 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateTenantAndPricing(int operationIndex = 0);

        /// <summary>
        /// Stripe Initial Setting
        /// </summary>
        /// <remarks>
        /// Set Stripe initial information via billing 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateTenantAndPricingWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete Customer and Product From Stripe
        /// </summary>
        /// <remarks>
        /// Delete customer and product from Stripe. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteStripeTenantAndPricing(int operationIndex = 0);

        /// <summary>
        /// Delete Customer and Product From Stripe
        /// </summary>
        /// <remarks>
        /// Delete customer and product from Stripe. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStripeTenantAndPricingWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete Tenant
        /// </summary>
        /// <remarks>
        /// Delete SaaSus Platform tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTenant(string tenantId, int operationIndex = 0);

        /// <summary>
        /// Delete Tenant
        /// </summary>
        /// <remarks>
        /// Delete SaaSus Platform tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTenantWithHttpInfo(string tenantId, int operationIndex = 0);
        /// <summary>
        /// Get Stripe Customer
        /// </summary>
        /// <remarks>
        /// Get the Stripe Customer information associated with the tenant, including their subscriptions. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StripeCustomer</returns>
        StripeCustomer GetStripeCustomer(string tenantId, int operationIndex = 0);

        /// <summary>
        /// Get Stripe Customer
        /// </summary>
        /// <remarks>
        /// Get the Stripe Customer information associated with the tenant, including their subscriptions. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StripeCustomer</returns>
        ApiResponse<StripeCustomer> GetStripeCustomerWithHttpInfo(string tenantId, int operationIndex = 0);
        /// <summary>
        /// Get Tenant Details
        /// </summary>
        /// <remarks>
        /// Get the details of tenant managed on the SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantDetail</returns>
        TenantDetail GetTenant(string tenantId, int operationIndex = 0);

        /// <summary>
        /// Get Tenant Details
        /// </summary>
        /// <remarks>
        /// Get the details of tenant managed on the SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantDetail</returns>
        ApiResponse<TenantDetail> GetTenantWithHttpInfo(string tenantId, int operationIndex = 0);
        /// <summary>
        /// Get identity provider per tenant
        /// </summary>
        /// <remarks>
        /// Get sign-in information via external identity provider per tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantIdentityProviders</returns>
        TenantIdentityProviders GetTenantIdentityProviders(string tenantId, int operationIndex = 0);

        /// <summary>
        /// Get identity provider per tenant
        /// </summary>
        /// <remarks>
        /// Get sign-in information via external identity provider per tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantIdentityProviders</returns>
        ApiResponse<TenantIdentityProviders> GetTenantIdentityProvidersWithHttpInfo(string tenantId, int operationIndex = 0);
        /// <summary>
        /// Get Tenants
        /// </summary>
        /// <remarks>
        /// Get tenants managed by SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tenants</returns>
        Tenants GetTenants(int operationIndex = 0);

        /// <summary>
        /// Get Tenants
        /// </summary>
        /// <remarks>
        /// Get tenants managed by SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tenants</returns>
        ApiResponse<Tenants> GetTenantsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete all information related to rate plans
        /// </summary>
        /// <remarks>
        /// Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResetPlan(int operationIndex = 0);

        /// <summary>
        /// Delete all information related to rate plans
        /// </summary>
        /// <remarks>
        /// Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResetPlanWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Tenant Details
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant details. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTenant(string tenantId, TenantProps body = default(TenantProps), int operationIndex = 0);

        /// <summary>
        /// Update Tenant Details
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant details. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTenantWithHttpInfo(string tenantId, TenantProps body = default(TenantProps), int operationIndex = 0);
        /// <summary>
        /// Update Tenant Billing Information
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant billing information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTenantBillingInfo(string tenantId, BillingInfo body = default(BillingInfo), int operationIndex = 0);

        /// <summary>
        /// Update Tenant Billing Information
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant billing information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTenantBillingInfoWithHttpInfo(string tenantId, BillingInfo body = default(BillingInfo), int operationIndex = 0);
        /// <summary>
        /// Update identity provider per tenant
        /// </summary>
        /// <remarks>
        /// Update sign-in information via external identity provider per tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="updateTenantIdentityProviderParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTenantIdentityProvider(string tenantId, UpdateTenantIdentityProviderParam updateTenantIdentityProviderParam = default(UpdateTenantIdentityProviderParam), int operationIndex = 0);

        /// <summary>
        /// Update identity provider per tenant
        /// </summary>
        /// <remarks>
        /// Update sign-in information via external identity provider per tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="updateTenantIdentityProviderParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTenantIdentityProviderWithHttpInfo(string tenantId, UpdateTenantIdentityProviderParam updateTenantIdentityProviderParam = default(UpdateTenantIdentityProviderParam), int operationIndex = 0);
        /// <summary>
        /// Update Tenant Plan Information
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant plan information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTenantPlan(string tenantId, PlanReservation body = default(PlanReservation), int operationIndex = 0);

        /// <summary>
        /// Update Tenant Plan Information
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant plan information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTenantPlanWithHttpInfo(string tenantId, PlanReservation body = default(PlanReservation), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Tenant
        /// </summary>
        /// <remarks>
        /// Create a tenant managed by the SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tenant</returns>
        System.Threading.Tasks.Task<Tenant> CreateTenantAsync(TenantProps body = default(TenantProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tenant
        /// </summary>
        /// <remarks>
        /// Create a tenant managed by the SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenant>> CreateTenantWithHttpInfoAsync(TenantProps body = default(TenantProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stripe Initial Setting
        /// </summary>
        /// <remarks>
        /// Set Stripe initial information via billing 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateTenantAndPricingAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stripe Initial Setting
        /// </summary>
        /// <remarks>
        /// Set Stripe initial information via billing 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTenantAndPricingWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Customer and Product From Stripe
        /// </summary>
        /// <remarks>
        /// Delete customer and product from Stripe. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStripeTenantAndPricingAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Customer and Product From Stripe
        /// </summary>
        /// <remarks>
        /// Delete customer and product from Stripe. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStripeTenantAndPricingWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Tenant
        /// </summary>
        /// <remarks>
        /// Delete SaaSus Platform tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTenantAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Tenant
        /// </summary>
        /// <remarks>
        /// Delete SaaSus Platform tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTenantWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Stripe Customer
        /// </summary>
        /// <remarks>
        /// Get the Stripe Customer information associated with the tenant, including their subscriptions. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StripeCustomer</returns>
        System.Threading.Tasks.Task<StripeCustomer> GetStripeCustomerAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Stripe Customer
        /// </summary>
        /// <remarks>
        /// Get the Stripe Customer information associated with the tenant, including their subscriptions. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StripeCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<StripeCustomer>> GetStripeCustomerWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tenant Details
        /// </summary>
        /// <remarks>
        /// Get the details of tenant managed on the SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantDetail</returns>
        System.Threading.Tasks.Task<TenantDetail> GetTenantAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tenant Details
        /// </summary>
        /// <remarks>
        /// Get the details of tenant managed on the SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantDetail>> GetTenantWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get identity provider per tenant
        /// </summary>
        /// <remarks>
        /// Get sign-in information via external identity provider per tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantIdentityProviders</returns>
        System.Threading.Tasks.Task<TenantIdentityProviders> GetTenantIdentityProvidersAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get identity provider per tenant
        /// </summary>
        /// <remarks>
        /// Get sign-in information via external identity provider per tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantIdentityProviders)</returns>
        System.Threading.Tasks.Task<ApiResponse<TenantIdentityProviders>> GetTenantIdentityProvidersWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tenants
        /// </summary>
        /// <remarks>
        /// Get tenants managed by SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tenants</returns>
        System.Threading.Tasks.Task<Tenants> GetTenantsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tenants
        /// </summary>
        /// <remarks>
        /// Get tenants managed by SaaSus Platform. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tenants)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tenants>> GetTenantsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all information related to rate plans
        /// </summary>
        /// <remarks>
        /// Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResetPlanAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all information related to rate plans
        /// </summary>
        /// <remarks>
        /// Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResetPlanWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tenant Details
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant details. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTenantAsync(string tenantId, TenantProps body = default(TenantProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tenant Details
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant details. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTenantWithHttpInfoAsync(string tenantId, TenantProps body = default(TenantProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tenant Billing Information
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant billing information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTenantBillingInfoAsync(string tenantId, BillingInfo body = default(BillingInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tenant Billing Information
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant billing information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTenantBillingInfoWithHttpInfoAsync(string tenantId, BillingInfo body = default(BillingInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update identity provider per tenant
        /// </summary>
        /// <remarks>
        /// Update sign-in information via external identity provider per tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="updateTenantIdentityProviderParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTenantIdentityProviderAsync(string tenantId, UpdateTenantIdentityProviderParam updateTenantIdentityProviderParam = default(UpdateTenantIdentityProviderParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update identity provider per tenant
        /// </summary>
        /// <remarks>
        /// Update sign-in information via external identity provider per tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="updateTenantIdentityProviderParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTenantIdentityProviderWithHttpInfoAsync(string tenantId, UpdateTenantIdentityProviderParam updateTenantIdentityProviderParam = default(UpdateTenantIdentityProviderParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tenant Plan Information
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant plan information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTenantPlanAsync(string tenantId, PlanReservation body = default(PlanReservation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tenant Plan Information
        /// </summary>
        /// <remarks>
        /// Update SaaSus Platform tenant plan information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTenantPlanWithHttpInfoAsync(string tenantId, PlanReservation body = default(PlanReservation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantApi : ITenantApiSync, ITenantApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TenantApi : ITenantApi
    {
        private authapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantApi(string basePath)
        {
            this.Configuration = authapi.Client.Configuration.MergeConfigurations(
                authapi.Client.GlobalConfiguration.Instance,
                new authapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TenantApi(authapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = authapi.Client.Configuration.MergeConfigurations(
                authapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new authapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TenantApi(authapi.Client.ISynchronousClient client, authapi.Client.IAsynchronousClient asyncClient, authapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public authapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public authapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public authapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public authapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Tenant Create a tenant managed by the SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tenant</returns>
        public Tenant CreateTenant(TenantProps body = default(TenantProps), int operationIndex = 0)
        {
            authapi.Client.ApiResponse<Tenant> localVarResponse = CreateTenantWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tenant Create a tenant managed by the SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tenant</returns>
        public authapi.Client.ApiResponse<Tenant> CreateTenantWithHttpInfo(TenantProps body = default(TenantProps), int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TenantApi.CreateTenant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Tenant>("/tenants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tenant Create a tenant managed by the SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tenant</returns>
        public async System.Threading.Tasks.Task<Tenant> CreateTenantAsync(TenantProps body = default(TenantProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<Tenant> localVarResponse = await CreateTenantWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tenant Create a tenant managed by the SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tenant)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Tenant>> CreateTenantWithHttpInfoAsync(TenantProps body = default(TenantProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TenantApi.CreateTenant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Tenant>("/tenants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stripe Initial Setting Set Stripe initial information via billing 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateTenantAndPricing(int operationIndex = 0)
        {
            CreateTenantAndPricingWithHttpInfo();
        }

        /// <summary>
        /// Stripe Initial Setting Set Stripe initial information via billing 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> CreateTenantAndPricingWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantApi.CreateTenantAndPricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/stripe/init", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantAndPricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stripe Initial Setting Set Stripe initial information via billing 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateTenantAndPricingAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateTenantAndPricingWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Stripe Initial Setting Set Stripe initial information via billing 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> CreateTenantAndPricingWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantApi.CreateTenantAndPricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/stripe/init", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantAndPricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer and Product From Stripe Delete customer and product from Stripe. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteStripeTenantAndPricing(int operationIndex = 0)
        {
            DeleteStripeTenantAndPricingWithHttpInfo();
        }

        /// <summary>
        /// Delete Customer and Product From Stripe Delete customer and product from Stripe. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> DeleteStripeTenantAndPricingWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantApi.DeleteStripeTenantAndPricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/stripe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStripeTenantAndPricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer and Product From Stripe Delete customer and product from Stripe. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStripeTenantAndPricingAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteStripeTenantAndPricingWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Customer and Product From Stripe Delete customer and product from Stripe. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> DeleteStripeTenantAndPricingWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantApi.DeleteStripeTenantAndPricing";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/stripe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStripeTenantAndPricing", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tenant Delete SaaSus Platform tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTenant(string tenantId, int operationIndex = 0)
        {
            DeleteTenantWithHttpInfo(tenantId);
        }

        /// <summary>
        /// Delete Tenant Delete SaaSus Platform tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> DeleteTenantWithHttpInfo(string tenantId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->DeleteTenant");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantApi.DeleteTenant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenant_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tenant Delete SaaSus Platform tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTenantAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTenantWithHttpInfoAsync(tenantId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Tenant Delete SaaSus Platform tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> DeleteTenantWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->DeleteTenant");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantApi.DeleteTenant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenant_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Stripe Customer Get the Stripe Customer information associated with the tenant, including their subscriptions. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StripeCustomer</returns>
        public StripeCustomer GetStripeCustomer(string tenantId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<StripeCustomer> localVarResponse = GetStripeCustomerWithHttpInfo(tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Stripe Customer Get the Stripe Customer information associated with the tenant, including their subscriptions. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StripeCustomer</returns>
        public authapi.Client.ApiResponse<StripeCustomer> GetStripeCustomerWithHttpInfo(string tenantId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->GetStripeCustomer");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantApi.GetStripeCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StripeCustomer>("/tenants/{tenant_id}/stripe-customer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStripeCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Stripe Customer Get the Stripe Customer information associated with the tenant, including their subscriptions. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StripeCustomer</returns>
        public async System.Threading.Tasks.Task<StripeCustomer> GetStripeCustomerAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<StripeCustomer> localVarResponse = await GetStripeCustomerWithHttpInfoAsync(tenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Stripe Customer Get the Stripe Customer information associated with the tenant, including their subscriptions. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StripeCustomer)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<StripeCustomer>> GetStripeCustomerWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->GetStripeCustomer");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantApi.GetStripeCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StripeCustomer>("/tenants/{tenant_id}/stripe-customer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStripeCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant Details Get the details of tenant managed on the SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantDetail</returns>
        public TenantDetail GetTenant(string tenantId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<TenantDetail> localVarResponse = GetTenantWithHttpInfo(tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant Details Get the details of tenant managed on the SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantDetail</returns>
        public authapi.Client.ApiResponse<TenantDetail> GetTenantWithHttpInfo(string tenantId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->GetTenant");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantApi.GetTenant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantDetail>("/tenants/{tenant_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant Details Get the details of tenant managed on the SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantDetail</returns>
        public async System.Threading.Tasks.Task<TenantDetail> GetTenantAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<TenantDetail> localVarResponse = await GetTenantWithHttpInfoAsync(tenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant Details Get the details of tenant managed on the SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantDetail)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<TenantDetail>> GetTenantWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->GetTenant");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantApi.GetTenant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantDetail>("/tenants/{tenant_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get identity provider per tenant Get sign-in information via external identity provider per tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TenantIdentityProviders</returns>
        public TenantIdentityProviders GetTenantIdentityProviders(string tenantId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<TenantIdentityProviders> localVarResponse = GetTenantIdentityProvidersWithHttpInfo(tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get identity provider per tenant Get sign-in information via external identity provider per tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TenantIdentityProviders</returns>
        public authapi.Client.ApiResponse<TenantIdentityProviders> GetTenantIdentityProvidersWithHttpInfo(string tenantId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->GetTenantIdentityProviders");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantApi.GetTenantIdentityProviders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TenantIdentityProviders>("/tenants/{tenant_id}/identity-providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantIdentityProviders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get identity provider per tenant Get sign-in information via external identity provider per tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TenantIdentityProviders</returns>
        public async System.Threading.Tasks.Task<TenantIdentityProviders> GetTenantIdentityProvidersAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<TenantIdentityProviders> localVarResponse = await GetTenantIdentityProvidersWithHttpInfoAsync(tenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get identity provider per tenant Get sign-in information via external identity provider per tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TenantIdentityProviders)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<TenantIdentityProviders>> GetTenantIdentityProvidersWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->GetTenantIdentityProviders");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantApi.GetTenantIdentityProviders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TenantIdentityProviders>("/tenants/{tenant_id}/identity-providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantIdentityProviders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenants Get tenants managed by SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tenants</returns>
        public Tenants GetTenants(int operationIndex = 0)
        {
            authapi.Client.ApiResponse<Tenants> localVarResponse = GetTenantsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenants Get tenants managed by SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tenants</returns>
        public authapi.Client.ApiResponse<Tenants> GetTenantsWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantApi.GetTenants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Tenants>("/tenants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenants Get tenants managed by SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tenants</returns>
        public async System.Threading.Tasks.Task<Tenants> GetTenantsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<Tenants> localVarResponse = await GetTenantsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenants Get tenants managed by SaaSus Platform. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tenants)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Tenants>> GetTenantsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantApi.GetTenants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Tenants>("/tenants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all information related to rate plans Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResetPlan(int operationIndex = 0)
        {
            ResetPlanWithHttpInfo();
        }

        /// <summary>
        /// Delete all information related to rate plans Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> ResetPlanWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantApi.ResetPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/plans/reset", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all information related to rate plans Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResetPlanAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResetPlanWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all information related to rate plans Delete all information related to rate plans. Delete plans linked to tenants and plan definitions. If you are using the Stripe linkage, the linkage will be removed. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> ResetPlanWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantApi.ResetPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/plans/reset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tenant Details Update SaaSus Platform tenant details. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTenant(string tenantId, TenantProps body = default(TenantProps), int operationIndex = 0)
        {
            UpdateTenantWithHttpInfo(tenantId, body);
        }

        /// <summary>
        /// Update Tenant Details Update SaaSus Platform tenant details. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateTenantWithHttpInfo(string tenantId, TenantProps body = default(TenantProps), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->UpdateTenant");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TenantApi.UpdateTenant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/tenants/{tenant_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tenant Details Update SaaSus Platform tenant details. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTenantAsync(string tenantId, TenantProps body = default(TenantProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTenantWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Tenant Details Update SaaSus Platform tenant details. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateTenantWithHttpInfoAsync(string tenantId, TenantProps body = default(TenantProps), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->UpdateTenant");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TenantApi.UpdateTenant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/tenants/{tenant_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tenant Billing Information Update SaaSus Platform tenant billing information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTenantBillingInfo(string tenantId, BillingInfo body = default(BillingInfo), int operationIndex = 0)
        {
            UpdateTenantBillingInfoWithHttpInfo(tenantId, body);
        }

        /// <summary>
        /// Update Tenant Billing Information Update SaaSus Platform tenant billing information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateTenantBillingInfoWithHttpInfo(string tenantId, BillingInfo body = default(BillingInfo), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->UpdateTenantBillingInfo");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TenantApi.UpdateTenantBillingInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/tenants/{tenant_id}/billing-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantBillingInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tenant Billing Information Update SaaSus Platform tenant billing information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTenantBillingInfoAsync(string tenantId, BillingInfo body = default(BillingInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTenantBillingInfoWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Tenant Billing Information Update SaaSus Platform tenant billing information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateTenantBillingInfoWithHttpInfoAsync(string tenantId, BillingInfo body = default(BillingInfo), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->UpdateTenantBillingInfo");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TenantApi.UpdateTenantBillingInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/tenants/{tenant_id}/billing-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantBillingInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update identity provider per tenant Update sign-in information via external identity provider per tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="updateTenantIdentityProviderParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTenantIdentityProvider(string tenantId, UpdateTenantIdentityProviderParam updateTenantIdentityProviderParam = default(UpdateTenantIdentityProviderParam), int operationIndex = 0)
        {
            UpdateTenantIdentityProviderWithHttpInfo(tenantId, updateTenantIdentityProviderParam);
        }

        /// <summary>
        /// Update identity provider per tenant Update sign-in information via external identity provider per tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="updateTenantIdentityProviderParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateTenantIdentityProviderWithHttpInfo(string tenantId, UpdateTenantIdentityProviderParam updateTenantIdentityProviderParam = default(UpdateTenantIdentityProviderParam), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->UpdateTenantIdentityProvider");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = updateTenantIdentityProviderParam;

            localVarRequestOptions.Operation = "TenantApi.UpdateTenantIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/tenants/{tenant_id}/identity-providers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update identity provider per tenant Update sign-in information via external identity provider per tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="updateTenantIdentityProviderParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTenantIdentityProviderAsync(string tenantId, UpdateTenantIdentityProviderParam updateTenantIdentityProviderParam = default(UpdateTenantIdentityProviderParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTenantIdentityProviderWithHttpInfoAsync(tenantId, updateTenantIdentityProviderParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update identity provider per tenant Update sign-in information via external identity provider per tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="updateTenantIdentityProviderParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateTenantIdentityProviderWithHttpInfoAsync(string tenantId, UpdateTenantIdentityProviderParam updateTenantIdentityProviderParam = default(UpdateTenantIdentityProviderParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->UpdateTenantIdentityProvider");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = updateTenantIdentityProviderParam;

            localVarRequestOptions.Operation = "TenantApi.UpdateTenantIdentityProvider";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/tenants/{tenant_id}/identity-providers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantIdentityProvider", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tenant Plan Information Update SaaSus Platform tenant plan information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTenantPlan(string tenantId, PlanReservation body = default(PlanReservation), int operationIndex = 0)
        {
            UpdateTenantPlanWithHttpInfo(tenantId, body);
        }

        /// <summary>
        /// Update Tenant Plan Information Update SaaSus Platform tenant plan information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateTenantPlanWithHttpInfo(string tenantId, PlanReservation body = default(PlanReservation), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->UpdateTenantPlan");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TenantApi.UpdateTenantPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/tenants/{tenant_id}/plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tenant Plan Information Update SaaSus Platform tenant plan information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTenantPlanAsync(string tenantId, PlanReservation body = default(PlanReservation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTenantPlanWithHttpInfoAsync(tenantId, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Tenant Plan Information Update SaaSus Platform tenant plan information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateTenantPlanWithHttpInfoAsync(string tenantId, PlanReservation body = default(PlanReservation), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantApi->UpdateTenantPlan");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "TenantApi.UpdateTenantPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/tenants/{tenant_id}/plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
