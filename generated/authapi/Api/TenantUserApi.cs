/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using authapi.Client;
using authapi.Model;

namespace authapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Tenant User
        /// </summary>
        /// <remarks>
        /// Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User CreateTenantUser(string tenantId, CreateTenantUserParam createTenantUserParam = default(CreateTenantUserParam), int operationIndex = 0);

        /// <summary>
        /// Create Tenant User
        /// </summary>
        /// <remarks>
        /// Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateTenantUserWithHttpInfo(string tenantId, CreateTenantUserParam createTenantUserParam = default(CreateTenantUserParam), int operationIndex = 0);
        /// <summary>
        /// Create Tenant User Role
        /// </summary>
        /// <remarks>
        /// Create roles on tenant users. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="createTenantUserRolesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateTenantUserRoles(string tenantId, string userId, int envId, CreateTenantUserRolesParam createTenantUserRolesParam = default(CreateTenantUserRolesParam), int operationIndex = 0);

        /// <summary>
        /// Create Tenant User Role
        /// </summary>
        /// <remarks>
        /// Create roles on tenant users. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="createTenantUserRolesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateTenantUserRolesWithHttpInfo(string tenantId, string userId, int envId, CreateTenantUserRolesParam createTenantUserRolesParam = default(CreateTenantUserRolesParam), int operationIndex = 0);
        /// <summary>
        /// Delete Tenant User
        /// </summary>
        /// <remarks>
        /// Delete a user from the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTenantUser(string tenantId, string userId, int operationIndex = 0);

        /// <summary>
        /// Delete Tenant User
        /// </summary>
        /// <remarks>
        /// Delete a user from the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTenantUserWithHttpInfo(string tenantId, string userId, int operationIndex = 0);
        /// <summary>
        /// Remove Role From Tenant User
        /// </summary>
        /// <remarks>
        /// Remove a role from a tenant user. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="roleName">Role name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTenantUserRole(string tenantId, string userId, int envId, string roleName, int operationIndex = 0);

        /// <summary>
        /// Remove Role From Tenant User
        /// </summary>
        /// <remarks>
        /// Remove a role from a tenant user. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="roleName">Role name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTenantUserRoleWithHttpInfo(string tenantId, string userId, int envId, string roleName, int operationIndex = 0);
        /// <summary>
        /// Get User Info
        /// </summary>
        /// <remarks>
        /// Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        Users GetAllTenantUser(string userId, int operationIndex = 0);

        /// <summary>
        /// Get User Info
        /// </summary>
        /// <remarks>
        /// Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> GetAllTenantUserWithHttpInfo(string userId, int operationIndex = 0);
        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        Users GetAllTenantUsers(int operationIndex = 0);

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> GetAllTenantUsersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Tenant User
        /// </summary>
        /// <remarks>
        /// Get one tenant user by specific ID. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User GetTenantUser(string tenantId, string userId, int operationIndex = 0);

        /// <summary>
        /// Get Tenant User
        /// </summary>
        /// <remarks>
        /// Get one tenant user by specific ID. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetTenantUserWithHttpInfo(string tenantId, string userId, int operationIndex = 0);
        /// <summary>
        /// Get Tenant Users
        /// </summary>
        /// <remarks>
        /// Get all the users belonging to the tenant. Id is unique. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        Users GetTenantUsers(string tenantId, int operationIndex = 0);

        /// <summary>
        /// Get Tenant Users
        /// </summary>
        /// <remarks>
        /// Get all the users belonging to the tenant. Id is unique. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        ApiResponse<Users> GetTenantUsersWithHttpInfo(string tenantId, int operationIndex = 0);
        /// <summary>
        /// Update Tenant User Attribute
        /// </summary>
        /// <remarks>
        /// Update tenant user attributes. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="updateTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateTenantUser(string tenantId, string userId, UpdateTenantUserParam updateTenantUserParam = default(UpdateTenantUserParam), int operationIndex = 0);

        /// <summary>
        /// Update Tenant User Attribute
        /// </summary>
        /// <remarks>
        /// Update tenant user attributes. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="updateTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTenantUserWithHttpInfo(string tenantId, string userId, UpdateTenantUserParam updateTenantUserParam = default(UpdateTenantUserParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Tenant User
        /// </summary>
        /// <remarks>
        /// Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateTenantUserAsync(string tenantId, CreateTenantUserParam createTenantUserParam = default(CreateTenantUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tenant User
        /// </summary>
        /// <remarks>
        /// Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateTenantUserWithHttpInfoAsync(string tenantId, CreateTenantUserParam createTenantUserParam = default(CreateTenantUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Tenant User Role
        /// </summary>
        /// <remarks>
        /// Create roles on tenant users. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="createTenantUserRolesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateTenantUserRolesAsync(string tenantId, string userId, int envId, CreateTenantUserRolesParam createTenantUserRolesParam = default(CreateTenantUserRolesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tenant User Role
        /// </summary>
        /// <remarks>
        /// Create roles on tenant users. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="createTenantUserRolesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTenantUserRolesWithHttpInfoAsync(string tenantId, string userId, int envId, CreateTenantUserRolesParam createTenantUserRolesParam = default(CreateTenantUserRolesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Tenant User
        /// </summary>
        /// <remarks>
        /// Delete a user from the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTenantUserAsync(string tenantId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Tenant User
        /// </summary>
        /// <remarks>
        /// Delete a user from the tenant. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTenantUserWithHttpInfoAsync(string tenantId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Role From Tenant User
        /// </summary>
        /// <remarks>
        /// Remove a role from a tenant user. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="roleName">Role name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTenantUserRoleAsync(string tenantId, string userId, int envId, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Role From Tenant User
        /// </summary>
        /// <remarks>
        /// Remove a role from a tenant user. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="roleName">Role name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTenantUserRoleWithHttpInfoAsync(string tenantId, string userId, int envId, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Info
        /// </summary>
        /// <remarks>
        /// Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetAllTenantUserAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Info
        /// </summary>
        /// <remarks>
        /// Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetAllTenantUserWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetAllTenantUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Users
        /// </summary>
        /// <remarks>
        /// Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetAllTenantUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tenant User
        /// </summary>
        /// <remarks>
        /// Get one tenant user by specific ID. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetTenantUserAsync(string tenantId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tenant User
        /// </summary>
        /// <remarks>
        /// Get one tenant user by specific ID. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetTenantUserWithHttpInfoAsync(string tenantId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tenant Users
        /// </summary>
        /// <remarks>
        /// Get all the users belonging to the tenant. Id is unique. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        System.Threading.Tasks.Task<Users> GetTenantUsersAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tenant Users
        /// </summary>
        /// <remarks>
        /// Get all the users belonging to the tenant. Id is unique. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        System.Threading.Tasks.Task<ApiResponse<Users>> GetTenantUsersWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tenant User Attribute
        /// </summary>
        /// <remarks>
        /// Update tenant user attributes. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="updateTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTenantUserAsync(string tenantId, string userId, UpdateTenantUserParam updateTenantUserParam = default(UpdateTenantUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tenant User Attribute
        /// </summary>
        /// <remarks>
        /// Update tenant user attributes. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="updateTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTenantUserWithHttpInfoAsync(string tenantId, string userId, UpdateTenantUserParam updateTenantUserParam = default(UpdateTenantUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITenantUserApi : ITenantUserApiSync, ITenantUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TenantUserApi : ITenantUserApi
    {
        private authapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantUserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantUserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantUserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TenantUserApi(string basePath)
        {
            this.Configuration = authapi.Client.Configuration.MergeConfigurations(
                authapi.Client.GlobalConfiguration.Instance,
                new authapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantUserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TenantUserApi(authapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = authapi.Client.Configuration.MergeConfigurations(
                authapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new authapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TenantUserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TenantUserApi(authapi.Client.ISynchronousClient client, authapi.Client.IAsynchronousClient asyncClient, authapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public authapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public authapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public authapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public authapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Tenant User Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User CreateTenantUser(string tenantId, CreateTenantUserParam createTenantUserParam = default(CreateTenantUserParam), int operationIndex = 0)
        {
            authapi.Client.ApiResponse<User> localVarResponse = CreateTenantUserWithHttpInfo(tenantId, createTenantUserParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tenant User Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public authapi.Client.ApiResponse<User> CreateTenantUserWithHttpInfo(string tenantId, CreateTenantUserParam createTenantUserParam = default(CreateTenantUserParam), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->CreateTenantUser");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = createTenantUserParam;

            localVarRequestOptions.Operation = "TenantUserApi.CreateTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/tenants/{tenant_id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tenant User Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateTenantUserAsync(string tenantId, CreateTenantUserParam createTenantUserParam = default(CreateTenantUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<User> localVarResponse = await CreateTenantUserWithHttpInfoAsync(tenantId, createTenantUserParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tenant User Create a tenant user. If attributes is empty, the additional attributes will be created empty. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="createTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<User>> CreateTenantUserWithHttpInfoAsync(string tenantId, CreateTenantUserParam createTenantUserParam = default(CreateTenantUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->CreateTenantUser");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.Data = createTenantUserParam;

            localVarRequestOptions.Operation = "TenantUserApi.CreateTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/tenants/{tenant_id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tenant User Role Create roles on tenant users. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="createTenantUserRolesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateTenantUserRoles(string tenantId, string userId, int envId, CreateTenantUserRolesParam createTenantUserRolesParam = default(CreateTenantUserRolesParam), int operationIndex = 0)
        {
            CreateTenantUserRolesWithHttpInfo(tenantId, userId, envId, createTenantUserRolesParam);
        }

        /// <summary>
        /// Create Tenant User Role Create roles on tenant users. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="createTenantUserRolesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> CreateTenantUserRolesWithHttpInfo(string tenantId, string userId, int envId, CreateTenantUserRolesParam createTenantUserRolesParam = default(CreateTenantUserRolesParam), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->CreateTenantUserRoles");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->CreateTenantUserRoles");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("env_id", authapi.Client.ClientUtils.ParameterToString(envId)); // path parameter
            localVarRequestOptions.Data = createTenantUserRolesParam;

            localVarRequestOptions.Operation = "TenantUserApi.CreateTenantUserRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantUserRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tenant User Role Create roles on tenant users. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="createTenantUserRolesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateTenantUserRolesAsync(string tenantId, string userId, int envId, CreateTenantUserRolesParam createTenantUserRolesParam = default(CreateTenantUserRolesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateTenantUserRolesWithHttpInfoAsync(tenantId, userId, envId, createTenantUserRolesParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Tenant User Role Create roles on tenant users. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="createTenantUserRolesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> CreateTenantUserRolesWithHttpInfoAsync(string tenantId, string userId, int envId, CreateTenantUserRolesParam createTenantUserRolesParam = default(CreateTenantUserRolesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->CreateTenantUserRoles");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->CreateTenantUserRoles");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("env_id", authapi.Client.ClientUtils.ParameterToString(envId)); // path parameter
            localVarRequestOptions.Data = createTenantUserRolesParam;

            localVarRequestOptions.Operation = "TenantUserApi.CreateTenantUserRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTenantUserRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tenant User Delete a user from the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTenantUser(string tenantId, string userId, int operationIndex = 0)
        {
            DeleteTenantUserWithHttpInfo(tenantId, userId);
        }

        /// <summary>
        /// Delete Tenant User Delete a user from the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> DeleteTenantUserWithHttpInfo(string tenantId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->DeleteTenantUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->DeleteTenantUser");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.DeleteTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenant_id}/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tenant User Delete a user from the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTenantUserAsync(string tenantId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTenantUserWithHttpInfoAsync(tenantId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Tenant User Delete a user from the tenant. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> DeleteTenantUserWithHttpInfoAsync(string tenantId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->DeleteTenantUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->DeleteTenantUser");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.DeleteTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenant_id}/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Role From Tenant User Remove a role from a tenant user. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="roleName">Role name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTenantUserRole(string tenantId, string userId, int envId, string roleName, int operationIndex = 0)
        {
            DeleteTenantUserRoleWithHttpInfo(tenantId, userId, envId, roleName);
        }

        /// <summary>
        /// Remove Role From Tenant User Remove a role from a tenant user. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="roleName">Role name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> DeleteTenantUserRoleWithHttpInfo(string tenantId, string userId, int envId, string roleName, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->DeleteTenantUserRole");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->DeleteTenantUserRole");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'roleName' when calling TenantUserApi->DeleteTenantUserRole");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("env_id", authapi.Client.ClientUtils.ParameterToString(envId)); // path parameter
            localVarRequestOptions.PathParameters.Add("role_name", authapi.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.DeleteTenantUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles/{role_name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Role From Tenant User Remove a role from a tenant user. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="roleName">Role name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTenantUserRoleAsync(string tenantId, string userId, int envId, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteTenantUserRoleWithHttpInfoAsync(tenantId, userId, envId, roleName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Role From Tenant User Remove a role from a tenant user. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="envId">Env ID</param>
        /// <param name="roleName">Role name</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> DeleteTenantUserRoleWithHttpInfoAsync(string tenantId, string userId, int envId, string roleName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->DeleteTenantUserRole");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->DeleteTenantUserRole");
            }

            // verify the required parameter 'roleName' is set
            if (roleName == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'roleName' when calling TenantUserApi->DeleteTenantUserRole");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("env_id", authapi.Client.ClientUtils.ParameterToString(envId)); // path parameter
            localVarRequestOptions.PathParameters.Add("role_name", authapi.Client.ClientUtils.ParameterToString(roleName)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.DeleteTenantUserRole";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tenants/{tenant_id}/users/{user_id}/envs/{env_id}/roles/{role_name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTenantUserRole", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Info Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        public Users GetAllTenantUser(string userId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<Users> localVarResponse = GetAllTenantUserWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Info Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        public authapi.Client.ApiResponse<Users> GetAllTenantUserWithHttpInfo(string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->GetAllTenantUser");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.GetAllTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Users>("/tenants/all/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Info Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetAllTenantUserAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<Users> localVarResponse = await GetAllTenantUserWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Info Get information on user belonging to the tenant from the user ID. If the user belongs to multiple tenants, it will be returned as another object. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Users>> GetAllTenantUserWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->GetAllTenantUser");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.GetAllTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Users>("/tenants/all/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Users Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        public Users GetAllTenantUsers(int operationIndex = 0)
        {
            authapi.Client.ApiResponse<Users> localVarResponse = GetAllTenantUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Users Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        public authapi.Client.ApiResponse<Users> GetAllTenantUsersWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantUserApi.GetAllTenantUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Users>("/tenants/all/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Users Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetAllTenantUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<Users> localVarResponse = await GetAllTenantUsersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Users Get all users belonging to the tenant. The same user belonging to multiple tenants will be returned as a different object. Id is not unique. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Users>> GetAllTenantUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TenantUserApi.GetAllTenantUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Users>("/tenants/all/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTenantUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant User Get one tenant user by specific ID. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User GetTenantUser(string tenantId, string userId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<User> localVarResponse = GetTenantUserWithHttpInfo(tenantId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant User Get one tenant user by specific ID. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public authapi.Client.ApiResponse<User> GetTenantUserWithHttpInfo(string tenantId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->GetTenantUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->GetTenantUser");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.GetTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/tenants/{tenant_id}/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant User Get one tenant user by specific ID. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetTenantUserAsync(string tenantId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<User> localVarResponse = await GetTenantUserWithHttpInfoAsync(tenantId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant User Get one tenant user by specific ID. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<User>> GetTenantUserWithHttpInfoAsync(string tenantId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->GetTenantUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->GetTenantUser");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.GetTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/tenants/{tenant_id}/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant Users Get all the users belonging to the tenant. Id is unique. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Users</returns>
        public Users GetTenantUsers(string tenantId, int operationIndex = 0)
        {
            authapi.Client.ApiResponse<Users> localVarResponse = GetTenantUsersWithHttpInfo(tenantId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant Users Get all the users belonging to the tenant. Id is unique. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Users</returns>
        public authapi.Client.ApiResponse<Users> GetTenantUsersWithHttpInfo(string tenantId, int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->GetTenantUsers");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.GetTenantUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Users>("/tenants/{tenant_id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tenant Users Get all the users belonging to the tenant. Id is unique. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Users</returns>
        public async System.Threading.Tasks.Task<Users> GetTenantUsersAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<Users> localVarResponse = await GetTenantUsersWithHttpInfoAsync(tenantId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tenant Users Get all the users belonging to the tenant. Id is unique. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Users)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Users>> GetTenantUsersWithHttpInfoAsync(string tenantId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->GetTenantUsers");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter

            localVarRequestOptions.Operation = "TenantUserApi.GetTenantUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Users>("/tenants/{tenant_id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTenantUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tenant User Attribute Update tenant user attributes. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="updateTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateTenantUser(string tenantId, string userId, UpdateTenantUserParam updateTenantUserParam = default(UpdateTenantUserParam), int operationIndex = 0)
        {
            UpdateTenantUserWithHttpInfo(tenantId, userId, updateTenantUserParam);
        }

        /// <summary>
        /// Update Tenant User Attribute Update tenant user attributes. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="updateTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateTenantUserWithHttpInfo(string tenantId, string userId, UpdateTenantUserParam updateTenantUserParam = default(UpdateTenantUserParam), int operationIndex = 0)
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->UpdateTenantUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->UpdateTenantUser");
            }

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = updateTenantUserParam;

            localVarRequestOptions.Operation = "TenantUserApi.UpdateTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/tenants/{tenant_id}/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tenant User Attribute Update tenant user attributes. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="updateTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTenantUserAsync(string tenantId, string userId, UpdateTenantUserParam updateTenantUserParam = default(UpdateTenantUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateTenantUserWithHttpInfoAsync(tenantId, userId, updateTenantUserParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Tenant User Attribute Update tenant user attributes. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tenantId">Tenant ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="updateTenantUserParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateTenantUserWithHttpInfoAsync(string tenantId, string userId, UpdateTenantUserParam updateTenantUserParam = default(UpdateTenantUserParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tenantId' is set
            if (tenantId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'tenantId' when calling TenantUserApi->UpdateTenantUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new authapi.Client.ApiException(400, "Missing required parameter 'userId' when calling TenantUserApi->UpdateTenantUser");
            }


            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tenant_id", authapi.Client.ClientUtils.ParameterToString(tenantId)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", authapi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = updateTenantUserParam;

            localVarRequestOptions.Operation = "TenantUserApi.UpdateTenantUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/tenants/{tenant_id}/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTenantUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
