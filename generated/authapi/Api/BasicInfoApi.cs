/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using authapi.Client;
using authapi.Model;

namespace authapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicInfoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 通知メールテンプレートを取得(Get Notification Email Templates)
        /// </summary>
        /// <remarks>
        /// 各種通知メールテンプレートを取得します。  Get notification email templates. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationMessages</returns>
        NotificationMessages FindNotificationMessages(int operationIndex = 0);

        /// <summary>
        /// 通知メールテンプレートを取得(Get Notification Email Templates)
        /// </summary>
        /// <remarks>
        /// 各種通知メールテンプレートを取得します。  Get notification email templates. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationMessages</returns>
        ApiResponse<NotificationMessages> FindNotificationMessagesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 基本設定情報の取得(Get Basic Configurations)
        /// </summary>
        /// <remarks>
        /// SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasicInfo</returns>
        BasicInfo GetBasicInfo(int operationIndex = 0);

        /// <summary>
        /// 基本設定情報の取得(Get Basic Configurations)
        /// </summary>
        /// <remarks>
        /// SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasicInfo</returns>
        ApiResponse<BasicInfo> GetBasicInfoWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 認証認可基本情報取得(Get Authentication Authorization Basic Information)
        /// </summary>
        /// <remarks>
        /// 認証認可基本情報を取得します。  Get authentication authorization basic information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomizePageSettings</returns>
        CustomizePageSettings GetCustomizePageSettings(int operationIndex = 0);

        /// <summary>
        /// 認証認可基本情報取得(Get Authentication Authorization Basic Information)
        /// </summary>
        /// <remarks>
        /// 認証認可基本情報を取得します。  Get authentication authorization basic information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomizePageSettings</returns>
        ApiResponse<CustomizePageSettings> GetCustomizePageSettingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 認証系画面設定情報取得(Get Authentication Page Setting)
        /// </summary>
        /// <remarks>
        /// 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomizePages</returns>
        CustomizePages GetCustomizePages(int operationIndex = 0);

        /// <summary>
        /// 認証系画面設定情報取得(Get Authentication Page Setting)
        /// </summary>
        /// <remarks>
        /// 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomizePages</returns>
        ApiResponse<CustomizePages> GetCustomizePagesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 基本設定情報の更新(Update Basic Configurations)
        /// </summary>
        /// <remarks>
        /// SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBasicInfoParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateBasicInfo(UpdateBasicInfoParam updateBasicInfoParam = default(UpdateBasicInfoParam), int operationIndex = 0);

        /// <summary>
        /// 基本設定情報の更新(Update Basic Configurations)
        /// </summary>
        /// <remarks>
        /// SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBasicInfoParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBasicInfoWithHttpInfo(UpdateBasicInfoParam updateBasicInfoParam = default(UpdateBasicInfoParam), int operationIndex = 0);
        /// <summary>
        /// 認証認可基本情報更新(Update Authentication Authorization Basic Information)
        /// </summary>
        /// <remarks>
        /// 認証認可基本情報を更新します。  Update authentication authorization basic information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePageSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateCustomizePageSettings(UpdateCustomizePageSettingsParam updateCustomizePageSettingsParam = default(UpdateCustomizePageSettingsParam), int operationIndex = 0);

        /// <summary>
        /// 認証認可基本情報更新(Update Authentication Authorization Basic Information)
        /// </summary>
        /// <remarks>
        /// 認証認可基本情報を更新します。  Update authentication authorization basic information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePageSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCustomizePageSettingsWithHttpInfo(UpdateCustomizePageSettingsParam updateCustomizePageSettingsParam = default(UpdateCustomizePageSettingsParam), int operationIndex = 0);
        /// <summary>
        /// 認証系画面設定情報設定(Authentication Page Setting)
        /// </summary>
        /// <remarks>
        /// 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateCustomizePages(UpdateCustomizePagesParam updateCustomizePagesParam = default(UpdateCustomizePagesParam), int operationIndex = 0);

        /// <summary>
        /// 認証系画面設定情報設定(Authentication Page Setting)
        /// </summary>
        /// <remarks>
        /// 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCustomizePagesWithHttpInfo(UpdateCustomizePagesParam updateCustomizePagesParam = default(UpdateCustomizePagesParam), int operationIndex = 0);
        /// <summary>
        /// 通知メールテンプレートを更新(Update Notification Email Template)
        /// </summary>
        /// <remarks>
        /// 各種通知メールテンプレート更新します。  Update notification email template. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateNotificationMessagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateNotificationMessages(UpdateNotificationMessagesParam updateNotificationMessagesParam = default(UpdateNotificationMessagesParam), int operationIndex = 0);

        /// <summary>
        /// 通知メールテンプレートを更新(Update Notification Email Template)
        /// </summary>
        /// <remarks>
        /// 各種通知メールテンプレート更新します。  Update notification email template. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateNotificationMessagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateNotificationMessagesWithHttpInfo(UpdateNotificationMessagesParam updateNotificationMessagesParam = default(UpdateNotificationMessagesParam), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicInfoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 通知メールテンプレートを取得(Get Notification Email Templates)
        /// </summary>
        /// <remarks>
        /// 各種通知メールテンプレートを取得します。  Get notification email templates. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationMessages</returns>
        System.Threading.Tasks.Task<NotificationMessages> FindNotificationMessagesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 通知メールテンプレートを取得(Get Notification Email Templates)
        /// </summary>
        /// <remarks>
        /// 各種通知メールテンプレートを取得します。  Get notification email templates. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationMessages)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationMessages>> FindNotificationMessagesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 基本設定情報の取得(Get Basic Configurations)
        /// </summary>
        /// <remarks>
        /// SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasicInfo</returns>
        System.Threading.Tasks.Task<BasicInfo> GetBasicInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 基本設定情報の取得(Get Basic Configurations)
        /// </summary>
        /// <remarks>
        /// SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasicInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasicInfo>> GetBasicInfoWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 認証認可基本情報取得(Get Authentication Authorization Basic Information)
        /// </summary>
        /// <remarks>
        /// 認証認可基本情報を取得します。  Get authentication authorization basic information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomizePageSettings</returns>
        System.Threading.Tasks.Task<CustomizePageSettings> GetCustomizePageSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 認証認可基本情報取得(Get Authentication Authorization Basic Information)
        /// </summary>
        /// <remarks>
        /// 認証認可基本情報を取得します。  Get authentication authorization basic information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomizePageSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomizePageSettings>> GetCustomizePageSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 認証系画面設定情報取得(Get Authentication Page Setting)
        /// </summary>
        /// <remarks>
        /// 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomizePages</returns>
        System.Threading.Tasks.Task<CustomizePages> GetCustomizePagesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 認証系画面設定情報取得(Get Authentication Page Setting)
        /// </summary>
        /// <remarks>
        /// 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomizePages)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomizePages>> GetCustomizePagesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 基本設定情報の更新(Update Basic Configurations)
        /// </summary>
        /// <remarks>
        /// SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBasicInfoParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBasicInfoAsync(UpdateBasicInfoParam updateBasicInfoParam = default(UpdateBasicInfoParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 基本設定情報の更新(Update Basic Configurations)
        /// </summary>
        /// <remarks>
        /// SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBasicInfoParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBasicInfoWithHttpInfoAsync(UpdateBasicInfoParam updateBasicInfoParam = default(UpdateBasicInfoParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 認証認可基本情報更新(Update Authentication Authorization Basic Information)
        /// </summary>
        /// <remarks>
        /// 認証認可基本情報を更新します。  Update authentication authorization basic information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePageSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCustomizePageSettingsAsync(UpdateCustomizePageSettingsParam updateCustomizePageSettingsParam = default(UpdateCustomizePageSettingsParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 認証認可基本情報更新(Update Authentication Authorization Basic Information)
        /// </summary>
        /// <remarks>
        /// 認証認可基本情報を更新します。  Update authentication authorization basic information. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePageSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCustomizePageSettingsWithHttpInfoAsync(UpdateCustomizePageSettingsParam updateCustomizePageSettingsParam = default(UpdateCustomizePageSettingsParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 認証系画面設定情報設定(Authentication Page Setting)
        /// </summary>
        /// <remarks>
        /// 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCustomizePagesAsync(UpdateCustomizePagesParam updateCustomizePagesParam = default(UpdateCustomizePagesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 認証系画面設定情報設定(Authentication Page Setting)
        /// </summary>
        /// <remarks>
        /// 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCustomizePagesWithHttpInfoAsync(UpdateCustomizePagesParam updateCustomizePagesParam = default(UpdateCustomizePagesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 通知メールテンプレートを更新(Update Notification Email Template)
        /// </summary>
        /// <remarks>
        /// 各種通知メールテンプレート更新します。  Update notification email template. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateNotificationMessagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateNotificationMessagesAsync(UpdateNotificationMessagesParam updateNotificationMessagesParam = default(UpdateNotificationMessagesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 通知メールテンプレートを更新(Update Notification Email Template)
        /// </summary>
        /// <remarks>
        /// 各種通知メールテンプレート更新します。  Update notification email template. 
        /// </remarks>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateNotificationMessagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateNotificationMessagesWithHttpInfoAsync(UpdateNotificationMessagesParam updateNotificationMessagesParam = default(UpdateNotificationMessagesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicInfoApi : IBasicInfoApiSync, IBasicInfoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasicInfoApi : IBasicInfoApi
    {
        private authapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicInfoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicInfoApi(string basePath)
        {
            this.Configuration = authapi.Client.Configuration.MergeConfigurations(
                authapi.Client.GlobalConfiguration.Instance,
                new authapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasicInfoApi(authapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = authapi.Client.Configuration.MergeConfigurations(
                authapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new authapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new authapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicInfoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BasicInfoApi(authapi.Client.ISynchronousClient client, authapi.Client.IAsynchronousClient asyncClient, authapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = authapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public authapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public authapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public authapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public authapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 通知メールテンプレートを取得(Get Notification Email Templates) 各種通知メールテンプレートを取得します。  Get notification email templates. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationMessages</returns>
        public NotificationMessages FindNotificationMessages(int operationIndex = 0)
        {
            authapi.Client.ApiResponse<NotificationMessages> localVarResponse = FindNotificationMessagesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 通知メールテンプレートを取得(Get Notification Email Templates) 各種通知メールテンプレートを取得します。  Get notification email templates. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationMessages</returns>
        public authapi.Client.ApiResponse<NotificationMessages> FindNotificationMessagesWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BasicInfoApi.FindNotificationMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationMessages>("/notification-messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindNotificationMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通知メールテンプレートを取得(Get Notification Email Templates) 各種通知メールテンプレートを取得します。  Get notification email templates. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationMessages</returns>
        public async System.Threading.Tasks.Task<NotificationMessages> FindNotificationMessagesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<NotificationMessages> localVarResponse = await FindNotificationMessagesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 通知メールテンプレートを取得(Get Notification Email Templates) 各種通知メールテンプレートを取得します。  Get notification email templates. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationMessages)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<NotificationMessages>> FindNotificationMessagesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BasicInfoApi.FindNotificationMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationMessages>("/notification-messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindNotificationMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 基本設定情報の取得(Get Basic Configurations) SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasicInfo</returns>
        public BasicInfo GetBasicInfo(int operationIndex = 0)
        {
            authapi.Client.ApiResponse<BasicInfo> localVarResponse = GetBasicInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 基本設定情報の取得(Get Basic Configurations) SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasicInfo</returns>
        public authapi.Client.ApiResponse<BasicInfo> GetBasicInfoWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BasicInfoApi.GetBasicInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BasicInfo>("/basic-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 基本設定情報の取得(Get Basic Configurations) SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasicInfo</returns>
        public async System.Threading.Tasks.Task<BasicInfo> GetBasicInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<BasicInfo> localVarResponse = await GetBasicInfoWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 基本設定情報の取得(Get Basic Configurations) SaaS ID を元に設定されているドメイン名と CNAME レコードを取得します。 取得した CNAME レコードを DNS に設定することで、ログイン画面を生成します。  Get the domain name and CNAME record based on the SaaS ID. By setting the CNAME record on the DNS the login screen will be generated. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasicInfo)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<BasicInfo>> GetBasicInfoWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BasicInfoApi.GetBasicInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BasicInfo>("/basic-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasicInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 認証認可基本情報取得(Get Authentication Authorization Basic Information) 認証認可基本情報を取得します。  Get authentication authorization basic information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomizePageSettings</returns>
        public CustomizePageSettings GetCustomizePageSettings(int operationIndex = 0)
        {
            authapi.Client.ApiResponse<CustomizePageSettings> localVarResponse = GetCustomizePageSettingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 認証認可基本情報取得(Get Authentication Authorization Basic Information) 認証認可基本情報を取得します。  Get authentication authorization basic information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomizePageSettings</returns>
        public authapi.Client.ApiResponse<CustomizePageSettings> GetCustomizePageSettingsWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BasicInfoApi.GetCustomizePageSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomizePageSettings>("/customize-page-settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomizePageSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 認証認可基本情報取得(Get Authentication Authorization Basic Information) 認証認可基本情報を取得します。  Get authentication authorization basic information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomizePageSettings</returns>
        public async System.Threading.Tasks.Task<CustomizePageSettings> GetCustomizePageSettingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<CustomizePageSettings> localVarResponse = await GetCustomizePageSettingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 認証認可基本情報取得(Get Authentication Authorization Basic Information) 認証認可基本情報を取得します。  Get authentication authorization basic information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomizePageSettings)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<CustomizePageSettings>> GetCustomizePageSettingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BasicInfoApi.GetCustomizePageSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomizePageSettings>("/customize-page-settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomizePageSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 認証系画面設定情報取得(Get Authentication Page Setting) 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomizePages</returns>
        public CustomizePages GetCustomizePages(int operationIndex = 0)
        {
            authapi.Client.ApiResponse<CustomizePages> localVarResponse = GetCustomizePagesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 認証系画面設定情報取得(Get Authentication Page Setting) 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomizePages</returns>
        public authapi.Client.ApiResponse<CustomizePages> GetCustomizePagesWithHttpInfo(int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BasicInfoApi.GetCustomizePages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomizePages>("/customize-pages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomizePages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 認証系画面設定情報取得(Get Authentication Page Setting) 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomizePages</returns>
        public async System.Threading.Tasks.Task<CustomizePages> GetCustomizePagesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            authapi.Client.ApiResponse<CustomizePages> localVarResponse = await GetCustomizePagesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 認証系画面設定情報取得(Get Authentication Page Setting) 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を取得します。  Get the authentication screen setting information (new registration, login, password reset, etc.). 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomizePages)</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<CustomizePages>> GetCustomizePagesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BasicInfoApi.GetCustomizePages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomizePages>("/customize-pages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomizePages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 基本設定情報の更新(Update Basic Configurations) SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBasicInfoParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateBasicInfo(UpdateBasicInfoParam updateBasicInfoParam = default(UpdateBasicInfoParam), int operationIndex = 0)
        {
            UpdateBasicInfoWithHttpInfo(updateBasicInfoParam);
        }

        /// <summary>
        /// 基本設定情報の更新(Update Basic Configurations) SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBasicInfoParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateBasicInfoWithHttpInfo(UpdateBasicInfoParam updateBasicInfoParam = default(UpdateBasicInfoParam), int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateBasicInfoParam;

            localVarRequestOptions.Operation = "BasicInfoApi.UpdateBasicInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/basic-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBasicInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 基本設定情報の更新(Update Basic Configurations) SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBasicInfoParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBasicInfoAsync(UpdateBasicInfoParam updateBasicInfoParam = default(UpdateBasicInfoParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateBasicInfoWithHttpInfoAsync(updateBasicInfoParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 基本設定情報の更新(Update Basic Configurations) SaaS ID を元にパラメータとして設定したドメイン名を設定更新します。 CNAME レコードが生成されますので、 DNS に設定して下さい。 既に稼働中の SaaS アプリケーションに設定している場合には、動作に影響があります。  Update the domain name that was set as a parameter based on the SaaS ID. After the CNAME record is generated, set it in your DNS. If it is set on a SaaS application that is already running, it will affect the behavior. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBasicInfoParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateBasicInfoWithHttpInfoAsync(UpdateBasicInfoParam updateBasicInfoParam = default(UpdateBasicInfoParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateBasicInfoParam;

            localVarRequestOptions.Operation = "BasicInfoApi.UpdateBasicInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/basic-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBasicInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 認証認可基本情報更新(Update Authentication Authorization Basic Information) 認証認可基本情報を更新します。  Update authentication authorization basic information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePageSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateCustomizePageSettings(UpdateCustomizePageSettingsParam updateCustomizePageSettingsParam = default(UpdateCustomizePageSettingsParam), int operationIndex = 0)
        {
            UpdateCustomizePageSettingsWithHttpInfo(updateCustomizePageSettingsParam);
        }

        /// <summary>
        /// 認証認可基本情報更新(Update Authentication Authorization Basic Information) 認証認可基本情報を更新します。  Update authentication authorization basic information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePageSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateCustomizePageSettingsWithHttpInfo(UpdateCustomizePageSettingsParam updateCustomizePageSettingsParam = default(UpdateCustomizePageSettingsParam), int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCustomizePageSettingsParam;

            localVarRequestOptions.Operation = "BasicInfoApi.UpdateCustomizePageSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/customize-page-settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomizePageSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 認証認可基本情報更新(Update Authentication Authorization Basic Information) 認証認可基本情報を更新します。  Update authentication authorization basic information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePageSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCustomizePageSettingsAsync(UpdateCustomizePageSettingsParam updateCustomizePageSettingsParam = default(UpdateCustomizePageSettingsParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateCustomizePageSettingsWithHttpInfoAsync(updateCustomizePageSettingsParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 認証認可基本情報更新(Update Authentication Authorization Basic Information) 認証認可基本情報を更新します。  Update authentication authorization basic information. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePageSettingsParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateCustomizePageSettingsWithHttpInfoAsync(UpdateCustomizePageSettingsParam updateCustomizePageSettingsParam = default(UpdateCustomizePageSettingsParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCustomizePageSettingsParam;

            localVarRequestOptions.Operation = "BasicInfoApi.UpdateCustomizePageSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/customize-page-settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomizePageSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 認証系画面設定情報設定(Authentication Page Setting) 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateCustomizePages(UpdateCustomizePagesParam updateCustomizePagesParam = default(UpdateCustomizePagesParam), int operationIndex = 0)
        {
            UpdateCustomizePagesWithHttpInfo(updateCustomizePagesParam);
        }

        /// <summary>
        /// 認証系画面設定情報設定(Authentication Page Setting) 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateCustomizePagesWithHttpInfo(UpdateCustomizePagesParam updateCustomizePagesParam = default(UpdateCustomizePagesParam), int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCustomizePagesParam;

            localVarRequestOptions.Operation = "BasicInfoApi.UpdateCustomizePages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/customize-pages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomizePages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 認証系画面設定情報設定(Authentication Page Setting) 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCustomizePagesAsync(UpdateCustomizePagesParam updateCustomizePagesParam = default(UpdateCustomizePagesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateCustomizePagesWithHttpInfoAsync(updateCustomizePagesParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 認証系画面設定情報設定(Authentication Page Setting) 認証系画面設定情報（新規登録・ログイン・パスワードリセット等）を更新します。  Update the authentication page setting information (new registration, login, password reset, etc.). 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomizePagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateCustomizePagesWithHttpInfoAsync(UpdateCustomizePagesParam updateCustomizePagesParam = default(UpdateCustomizePagesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCustomizePagesParam;

            localVarRequestOptions.Operation = "BasicInfoApi.UpdateCustomizePages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/customize-pages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomizePages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通知メールテンプレートを更新(Update Notification Email Template) 各種通知メールテンプレート更新します。  Update notification email template. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateNotificationMessagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateNotificationMessages(UpdateNotificationMessagesParam updateNotificationMessagesParam = default(UpdateNotificationMessagesParam), int operationIndex = 0)
        {
            UpdateNotificationMessagesWithHttpInfo(updateNotificationMessagesParam);
        }

        /// <summary>
        /// 通知メールテンプレートを更新(Update Notification Email Template) 各種通知メールテンプレート更新します。  Update notification email template. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateNotificationMessagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public authapi.Client.ApiResponse<Object> UpdateNotificationMessagesWithHttpInfo(UpdateNotificationMessagesParam updateNotificationMessagesParam = default(UpdateNotificationMessagesParam), int operationIndex = 0)
        {
            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateNotificationMessagesParam;

            localVarRequestOptions.Operation = "BasicInfoApi.UpdateNotificationMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/notification-messages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNotificationMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 通知メールテンプレートを更新(Update Notification Email Template) 各種通知メールテンプレート更新します。  Update notification email template. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateNotificationMessagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateNotificationMessagesAsync(UpdateNotificationMessagesParam updateNotificationMessagesParam = default(UpdateNotificationMessagesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateNotificationMessagesWithHttpInfoAsync(updateNotificationMessagesParam, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 通知メールテンプレートを更新(Update Notification Email Template) 各種通知メールテンプレート更新します。  Update notification email template. 
        /// </summary>
        /// <exception cref="authapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateNotificationMessagesParam"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<authapi.Client.ApiResponse<Object>> UpdateNotificationMessagesWithHttpInfoAsync(UpdateNotificationMessagesParam updateNotificationMessagesParam = default(UpdateNotificationMessagesParam), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            authapi.Client.RequestOptions localVarRequestOptions = new authapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = authapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = authapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateNotificationMessagesParam;

            localVarRequestOptions.Operation = "BasicInfoApi.UpdateNotificationMessages";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/notification-messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNotificationMessages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
