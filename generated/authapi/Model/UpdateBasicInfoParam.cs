/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// UpdateBasicInfoParam
    /// </summary>
    [DataContract(Name = "UpdateBasicInfoParam")]
    public partial class UpdateBasicInfoParam : IEquatable<UpdateBasicInfoParam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateBasicInfoParam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateBasicInfoParam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateBasicInfoParam" /> class.
        /// </summary>
        /// <param name="domainName">Domain Name (required).</param>
        /// <param name="fromEmailAddress">Sender email of authentication email (required).</param>
        /// <param name="replyEmailAddress">Reply-from email address of authentication email.</param>
        public UpdateBasicInfoParam(string domainName = default(string), string fromEmailAddress = default(string), string replyEmailAddress = default(string))
        {
            // to ensure "domainName" is required (not null)
            if (domainName == null)
            {
                throw new ArgumentNullException("domainName is a required property for UpdateBasicInfoParam and cannot be null");
            }
            this.DomainName = domainName;
            // to ensure "fromEmailAddress" is required (not null)
            if (fromEmailAddress == null)
            {
                throw new ArgumentNullException("fromEmailAddress is a required property for UpdateBasicInfoParam and cannot be null");
            }
            this.FromEmailAddress = fromEmailAddress;
            this.ReplyEmailAddress = replyEmailAddress;
        }

        /// <summary>
        /// Domain Name
        /// </summary>
        /// <value>Domain Name</value>
        /// <example>dev.saasus.io</example>
        [DataMember(Name = "domain_name", IsRequired = true, EmitDefaultValue = true)]
        public string DomainName { get; set; }

        /// <summary>
        /// Sender email of authentication email
        /// </summary>
        /// <value>Sender email of authentication email</value>
        /// <example>test@example.com</example>
        [DataMember(Name = "from_email_address", IsRequired = true, EmitDefaultValue = true)]
        public string FromEmailAddress { get; set; }

        /// <summary>
        /// Reply-from email address of authentication email
        /// </summary>
        /// <value>Reply-from email address of authentication email</value>
        /// <example>test@example.com</example>
        [DataMember(Name = "reply_email_address", EmitDefaultValue = false)]
        public string ReplyEmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateBasicInfoParam {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  FromEmailAddress: ").Append(FromEmailAddress).Append("\n");
            sb.Append("  ReplyEmailAddress: ").Append(ReplyEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateBasicInfoParam);
        }

        /// <summary>
        /// Returns true if UpdateBasicInfoParam instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateBasicInfoParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateBasicInfoParam input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.FromEmailAddress == input.FromEmailAddress ||
                    (this.FromEmailAddress != null &&
                    this.FromEmailAddress.Equals(input.FromEmailAddress))
                ) && 
                (
                    this.ReplyEmailAddress == input.ReplyEmailAddress ||
                    (this.ReplyEmailAddress != null &&
                    this.ReplyEmailAddress.Equals(input.ReplyEmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DomainName != null)
                {
                    hashCode = (hashCode * 59) + this.DomainName.GetHashCode();
                }
                if (this.FromEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FromEmailAddress.GetHashCode();
                }
                if (this.ReplyEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ReplyEmailAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
