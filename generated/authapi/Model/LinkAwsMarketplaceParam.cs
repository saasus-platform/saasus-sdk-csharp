/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// LinkAwsMarketplaceParam
    /// </summary>
    [DataContract(Name = "LinkAwsMarketplaceParam")]
    public partial class LinkAwsMarketplaceParam : IEquatable<LinkAwsMarketplaceParam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkAwsMarketplaceParam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkAwsMarketplaceParam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkAwsMarketplaceParam" /> class.
        /// </summary>
        /// <param name="tenantId">テナントID(tenant ID) (required).</param>
        /// <param name="accessToken">アクセストークン(access token) (required).</param>
        /// <param name="registrationToken">Registration Token (required).</param>
        public LinkAwsMarketplaceParam(string tenantId = default(string), string accessToken = default(string), string registrationToken = default(string))
        {
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new ArgumentNullException("tenantId is a required property for LinkAwsMarketplaceParam and cannot be null");
            }
            this.TenantId = tenantId;
            // to ensure "accessToken" is required (not null)
            if (accessToken == null)
            {
                throw new ArgumentNullException("accessToken is a required property for LinkAwsMarketplaceParam and cannot be null");
            }
            this.AccessToken = accessToken;
            // to ensure "registrationToken" is required (not null)
            if (registrationToken == null)
            {
                throw new ArgumentNullException("registrationToken is a required property for LinkAwsMarketplaceParam and cannot be null");
            }
            this.RegistrationToken = registrationToken;
        }

        /// <summary>
        /// テナントID(tenant ID)
        /// </summary>
        /// <value>テナントID(tenant ID)</value>
        [DataMember(Name = "tenant_id", IsRequired = true, EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// アクセストークン(access token)
        /// </summary>
        /// <value>アクセストークン(access token)</value>
        [DataMember(Name = "access_token", IsRequired = true, EmitDefaultValue = true)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Registration Token
        /// </summary>
        /// <value>Registration Token</value>
        [DataMember(Name = "registration_token", IsRequired = true, EmitDefaultValue = true)]
        public string RegistrationToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkAwsMarketplaceParam {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  RegistrationToken: ").Append(RegistrationToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkAwsMarketplaceParam);
        }

        /// <summary>
        /// Returns true if LinkAwsMarketplaceParam instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkAwsMarketplaceParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkAwsMarketplaceParam input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.RegistrationToken == input.RegistrationToken ||
                    (this.RegistrationToken != null &&
                    this.RegistrationToken.Equals(input.RegistrationToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TenantId != null)
                {
                    hashCode = (hashCode * 59) + this.TenantId.GetHashCode();
                }
                if (this.AccessToken != null)
                {
                    hashCode = (hashCode * 59) + this.AccessToken.GetHashCode();
                }
                if (this.RegistrationToken != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
