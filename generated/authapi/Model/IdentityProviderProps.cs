/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// IdentityProviderProps
    /// </summary>
    [DataContract(Name = "IdentityProviderProps")]
    public partial class IdentityProviderProps : IEquatable<IdentityProviderProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityProviderProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderProps" /> class.
        /// </summary>
        /// <param name="applicationId">applicationId (required).</param>
        /// <param name="applicationSecret">applicationSecret (required).</param>
        /// <param name="approvalScope">approvalScope (required).</param>
        /// <param name="isButtonHidden">isButtonHidden.</param>
        public IdentityProviderProps(string applicationId = default(string), string applicationSecret = default(string), string approvalScope = default(string), bool isButtonHidden = default(bool))
        {
            // to ensure "applicationId" is required (not null)
            if (applicationId == null)
            {
                throw new ArgumentNullException("applicationId is a required property for IdentityProviderProps and cannot be null");
            }
            this.ApplicationId = applicationId;
            // to ensure "applicationSecret" is required (not null)
            if (applicationSecret == null)
            {
                throw new ArgumentNullException("applicationSecret is a required property for IdentityProviderProps and cannot be null");
            }
            this.ApplicationSecret = applicationSecret;
            // to ensure "approvalScope" is required (not null)
            if (approvalScope == null)
            {
                throw new ArgumentNullException("approvalScope is a required property for IdentityProviderProps and cannot be null");
            }
            this.ApprovalScope = approvalScope;
            this.IsButtonHidden = isButtonHidden;
        }

        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        /// <example>1234567890123456</example>
        [DataMember(Name = "application_id", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationSecret
        /// </summary>
        /// <example>123456789b00def123456a12345678d1</example>
        [DataMember(Name = "application_secret", IsRequired = true, EmitDefaultValue = true)]
        public string ApplicationSecret { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalScope
        /// </summary>
        /// <example>profile email openid</example>
        [DataMember(Name = "approval_scope", IsRequired = true, EmitDefaultValue = true)]
        public string ApprovalScope { get; set; }

        /// <summary>
        /// Gets or Sets IsButtonHidden
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "is_button_hidden", EmitDefaultValue = true)]
        public bool IsButtonHidden { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityProviderProps {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  ApplicationSecret: ").Append(ApplicationSecret).Append("\n");
            sb.Append("  ApprovalScope: ").Append(ApprovalScope).Append("\n");
            sb.Append("  IsButtonHidden: ").Append(IsButtonHidden).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityProviderProps);
        }

        /// <summary>
        /// Returns true if IdentityProviderProps instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityProviderProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProviderProps input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.ApplicationSecret == input.ApplicationSecret ||
                    (this.ApplicationSecret != null &&
                    this.ApplicationSecret.Equals(input.ApplicationSecret))
                ) && 
                (
                    this.ApprovalScope == input.ApprovalScope ||
                    (this.ApprovalScope != null &&
                    this.ApprovalScope.Equals(input.ApprovalScope))
                ) && 
                (
                    this.IsButtonHidden == input.IsButtonHidden ||
                    this.IsButtonHidden.Equals(input.IsButtonHidden)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationId.GetHashCode();
                }
                if (this.ApplicationSecret != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationSecret.GetHashCode();
                }
                if (this.ApprovalScope != null)
                {
                    hashCode = (hashCode * 59) + this.ApprovalScope.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsButtonHidden.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
