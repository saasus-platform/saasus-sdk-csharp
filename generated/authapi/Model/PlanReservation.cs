/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// PlanReservation
    /// </summary>
    [DataContract(Name = "PlanReservation")]
    public partial class PlanReservation : IEquatable<PlanReservation>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ProrationBehavior
        /// </summary>
        [DataMember(Name = "proration_behavior", EmitDefaultValue = false)]
        public ProrationBehavior? ProrationBehavior { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanReservation" /> class.
        /// </summary>
        /// <param name="nextPlanId">nextPlanId.</param>
        /// <param name="usingNextPlanFrom">Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.) .</param>
        /// <param name="nextPlanTaxRateId">nextPlanTaxRateId.</param>
        /// <param name="prorationBehavior">prorationBehavior.</param>
        /// <param name="deleteUsage">If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. .</param>
        public PlanReservation(string nextPlanId = default(string), int usingNextPlanFrom = default(int), string nextPlanTaxRateId = default(string), ProrationBehavior? prorationBehavior = default(ProrationBehavior?), bool deleteUsage = default(bool))
        {
            this.NextPlanId = nextPlanId;
            this.UsingNextPlanFrom = usingNextPlanFrom;
            this.NextPlanTaxRateId = nextPlanTaxRateId;
            this.ProrationBehavior = prorationBehavior;
            this.DeleteUsage = deleteUsage;
        }

        /// <summary>
        /// Gets or Sets NextPlanId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "next_plan_id", EmitDefaultValue = false)]
        public string NextPlanId { get; set; }

        /// <summary>
        /// Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.) 
        /// </summary>
        /// <value>Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.) </value>
        /// <example>1640995200</example>
        [DataMember(Name = "using_next_plan_from", EmitDefaultValue = false)]
        public int UsingNextPlanFrom { get; set; }

        /// <summary>
        /// Gets or Sets NextPlanTaxRateId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "next_plan_tax_rate_id", EmitDefaultValue = false)]
        public string NextPlanTaxRateId { get; set; }

        /// <summary>
        /// If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. 
        /// </summary>
        /// <value>If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. </value>
        [DataMember(Name = "delete_usage", EmitDefaultValue = true)]
        public bool DeleteUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlanReservation {\n");
            sb.Append("  NextPlanId: ").Append(NextPlanId).Append("\n");
            sb.Append("  UsingNextPlanFrom: ").Append(UsingNextPlanFrom).Append("\n");
            sb.Append("  NextPlanTaxRateId: ").Append(NextPlanTaxRateId).Append("\n");
            sb.Append("  ProrationBehavior: ").Append(ProrationBehavior).Append("\n");
            sb.Append("  DeleteUsage: ").Append(DeleteUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanReservation);
        }

        /// <summary>
        /// Returns true if PlanReservation instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanReservation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanReservation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NextPlanId == input.NextPlanId ||
                    (this.NextPlanId != null &&
                    this.NextPlanId.Equals(input.NextPlanId))
                ) && 
                (
                    this.UsingNextPlanFrom == input.UsingNextPlanFrom ||
                    this.UsingNextPlanFrom.Equals(input.UsingNextPlanFrom)
                ) && 
                (
                    this.NextPlanTaxRateId == input.NextPlanTaxRateId ||
                    (this.NextPlanTaxRateId != null &&
                    this.NextPlanTaxRateId.Equals(input.NextPlanTaxRateId))
                ) && 
                (
                    this.ProrationBehavior == input.ProrationBehavior ||
                    this.ProrationBehavior.Equals(input.ProrationBehavior)
                ) && 
                (
                    this.DeleteUsage == input.DeleteUsage ||
                    this.DeleteUsage.Equals(input.DeleteUsage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NextPlanId != null)
                {
                    hashCode = (hashCode * 59) + this.NextPlanId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsingNextPlanFrom.GetHashCode();
                if (this.NextPlanTaxRateId != null)
                {
                    hashCode = (hashCode * 59) + this.NextPlanTaxRateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProrationBehavior.GetHashCode();
                hashCode = (hashCode * 59) + this.DeleteUsage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
