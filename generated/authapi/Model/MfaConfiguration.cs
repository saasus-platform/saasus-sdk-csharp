/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// MFAデバイス認証設定(MFA device authentication settings) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) 
    /// </summary>
    [DataContract(Name = "MfaConfiguration")]
    public partial class MfaConfiguration : IEquatable<MfaConfiguration>, IValidatableObject
    {
        /// <summary>
        /// on: 全ユーザーがログイン時に適用(apply when all users log in) optional: MFA要素が有効になっている個別ユーザーに適用(apply to individual users with MFA factor enabled) ※ パラメータは現在optionalで固定となります。(The parameter is currently optional and fixed.) 
        /// </summary>
        /// <value>on: 全ユーザーがログイン時に適用(apply when all users log in) optional: MFA要素が有効になっている個別ユーザーに適用(apply to individual users with MFA factor enabled) ※ パラメータは現在optionalで固定となります。(The parameter is currently optional and fixed.) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MfaConfigurationEnum
        {
            /// <summary>
            /// Enum On for value: on
            /// </summary>
            [EnumMember(Value = "on")]
            On = 1,

            /// <summary>
            /// Enum Optional for value: optional
            /// </summary>
            [EnumMember(Value = "optional")]
            Optional = 2
        }


        /// <summary>
        /// on: 全ユーザーがログイン時に適用(apply when all users log in) optional: MFA要素が有効になっている個別ユーザーに適用(apply to individual users with MFA factor enabled) ※ パラメータは現在optionalで固定となります。(The parameter is currently optional and fixed.) 
        /// </summary>
        /// <value>on: 全ユーザーがログイン時に適用(apply when all users log in) optional: MFA要素が有効になっている個別ユーザーに適用(apply to individual users with MFA factor enabled) ※ パラメータは現在optionalで固定となります。(The parameter is currently optional and fixed.) </value>
        /// <example>true</example>
        [DataMember(Name = "mfa_configuration", IsRequired = true, EmitDefaultValue = true)]
        public MfaConfigurationEnum VarMfaConfiguration { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MfaConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MfaConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MfaConfiguration" /> class.
        /// </summary>
        /// <param name="varMfaConfiguration">on: 全ユーザーがログイン時に適用(apply when all users log in) optional: MFA要素が有効になっている個別ユーザーに適用(apply to individual users with MFA factor enabled) ※ パラメータは現在optionalで固定となります。(The parameter is currently optional and fixed.)  (required).</param>
        public MfaConfiguration(MfaConfigurationEnum varMfaConfiguration = default(MfaConfigurationEnum))
        {
            this.VarMfaConfiguration = varMfaConfiguration;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MfaConfiguration {\n");
            sb.Append("  VarMfaConfiguration: ").Append(VarMfaConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MfaConfiguration);
        }

        /// <summary>
        /// Returns true if MfaConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of MfaConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MfaConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarMfaConfiguration == input.VarMfaConfiguration ||
                    this.VarMfaConfiguration.Equals(input.VarMfaConfiguration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarMfaConfiguration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
