/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// Tenant
    /// </summary>
    [DataContract(Name = "Tenant")]
    public partial class Tenant : IEquatable<Tenant>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ProrationBehavior
        /// </summary>
        [DataMember(Name = "proration_behavior", EmitDefaultValue = false)]
        public ProrationBehavior? ProrationBehavior { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tenant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Tenant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tenant" /> class.
        /// </summary>
        /// <param name="name">テナント名(tenant name) (required).</param>
        /// <param name="attributes">属性情報(attribute info) (required).</param>
        /// <param name="backOfficeStaffEmail">事務管理部門スタッフメールアドレス(administrative staff email address) (required).</param>
        /// <param name="nextPlanId">nextPlanId.</param>
        /// <param name="usingNextPlanFrom">次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ） (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)) .</param>
        /// <param name="nextPlanTaxRateId">nextPlanTaxRateId.</param>
        /// <param name="prorationBehavior">prorationBehavior.</param>
        /// <param name="planHistories">料金プラン履歴 (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="planId">planId.</param>
        /// <param name="billingInfo">billingInfo.</param>
        public Tenant(string name = default(string), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), string backOfficeStaffEmail = default(string), string nextPlanId = default(string), int usingNextPlanFrom = default(int), string nextPlanTaxRateId = default(string), ProrationBehavior? prorationBehavior = default(ProrationBehavior?), List<PlanHistory> planHistories = default(List<PlanHistory>), string id = default(string), string planId = default(string), BillingInfo billingInfo = default(BillingInfo))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Tenant and cannot be null");
            }
            this.Name = name;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for Tenant and cannot be null");
            }
            this.Attributes = attributes;
            // to ensure "backOfficeStaffEmail" is required (not null)
            if (backOfficeStaffEmail == null)
            {
                throw new ArgumentNullException("backOfficeStaffEmail is a required property for Tenant and cannot be null");
            }
            this.BackOfficeStaffEmail = backOfficeStaffEmail;
            // to ensure "planHistories" is required (not null)
            if (planHistories == null)
            {
                throw new ArgumentNullException("planHistories is a required property for Tenant and cannot be null");
            }
            this.PlanHistories = planHistories;
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Tenant and cannot be null");
            }
            this.Id = id;
            this.NextPlanId = nextPlanId;
            this.UsingNextPlanFrom = usingNextPlanFrom;
            this.NextPlanTaxRateId = nextPlanTaxRateId;
            this.ProrationBehavior = prorationBehavior;
            this.PlanId = planId;
            this.BillingInfo = billingInfo;
        }

        /// <summary>
        /// テナント名(tenant name)
        /// </summary>
        /// <value>テナント名(tenant name)</value>
        /// <example>Anti-Pattern Inc.</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 属性情報(attribute info)
        /// </summary>
        /// <value>属性情報(attribute info)</value>
        /// <example>{&quot;address&quot;:&quot;東京都&quot;,&quot;employee_number&quot;:100}</example>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// 事務管理部門スタッフメールアドレス(administrative staff email address)
        /// </summary>
        /// <value>事務管理部門スタッフメールアドレス(administrative staff email address)</value>
        /// <example>hoge@example.com</example>
        [DataMember(Name = "back_office_staff_email", IsRequired = true, EmitDefaultValue = true)]
        public string BackOfficeStaffEmail { get; set; }

        /// <summary>
        /// Gets or Sets NextPlanId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "next_plan_id", EmitDefaultValue = false)]
        public string NextPlanId { get; set; }

        /// <summary>
        /// 次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ） (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)) 
        /// </summary>
        /// <value>次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ） (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.)) </value>
        /// <example>1640995200</example>
        [DataMember(Name = "using_next_plan_from", EmitDefaultValue = false)]
        public int UsingNextPlanFrom { get; set; }

        /// <summary>
        /// Gets or Sets NextPlanTaxRateId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "next_plan_tax_rate_id", EmitDefaultValue = false)]
        public string NextPlanTaxRateId { get; set; }

        /// <summary>
        /// 料金プラン履歴
        /// </summary>
        /// <value>料金プラン履歴</value>
        [DataMember(Name = "plan_histories", IsRequired = true, EmitDefaultValue = true)]
        public List<PlanHistory> PlanHistories { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "plan_id", EmitDefaultValue = false)]
        public string PlanId { get; set; }

        /// <summary>
        /// Gets or Sets BillingInfo
        /// </summary>
        [DataMember(Name = "billing_info", EmitDefaultValue = false)]
        public BillingInfo BillingInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Tenant {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  BackOfficeStaffEmail: ").Append(BackOfficeStaffEmail).Append("\n");
            sb.Append("  NextPlanId: ").Append(NextPlanId).Append("\n");
            sb.Append("  UsingNextPlanFrom: ").Append(UsingNextPlanFrom).Append("\n");
            sb.Append("  NextPlanTaxRateId: ").Append(NextPlanTaxRateId).Append("\n");
            sb.Append("  ProrationBehavior: ").Append(ProrationBehavior).Append("\n");
            sb.Append("  PlanHistories: ").Append(PlanHistories).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  BillingInfo: ").Append(BillingInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tenant);
        }

        /// <summary>
        /// Returns true if Tenant instances are equal
        /// </summary>
        /// <param name="input">Instance of Tenant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tenant input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.BackOfficeStaffEmail == input.BackOfficeStaffEmail ||
                    (this.BackOfficeStaffEmail != null &&
                    this.BackOfficeStaffEmail.Equals(input.BackOfficeStaffEmail))
                ) && 
                (
                    this.NextPlanId == input.NextPlanId ||
                    (this.NextPlanId != null &&
                    this.NextPlanId.Equals(input.NextPlanId))
                ) && 
                (
                    this.UsingNextPlanFrom == input.UsingNextPlanFrom ||
                    this.UsingNextPlanFrom.Equals(input.UsingNextPlanFrom)
                ) && 
                (
                    this.NextPlanTaxRateId == input.NextPlanTaxRateId ||
                    (this.NextPlanTaxRateId != null &&
                    this.NextPlanTaxRateId.Equals(input.NextPlanTaxRateId))
                ) && 
                (
                    this.ProrationBehavior == input.ProrationBehavior ||
                    this.ProrationBehavior.Equals(input.ProrationBehavior)
                ) && 
                (
                    this.PlanHistories == input.PlanHistories ||
                    this.PlanHistories != null &&
                    input.PlanHistories != null &&
                    this.PlanHistories.SequenceEqual(input.PlanHistories)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PlanId == input.PlanId ||
                    (this.PlanId != null &&
                    this.PlanId.Equals(input.PlanId))
                ) && 
                (
                    this.BillingInfo == input.BillingInfo ||
                    (this.BillingInfo != null &&
                    this.BillingInfo.Equals(input.BillingInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.BackOfficeStaffEmail != null)
                {
                    hashCode = (hashCode * 59) + this.BackOfficeStaffEmail.GetHashCode();
                }
                if (this.NextPlanId != null)
                {
                    hashCode = (hashCode * 59) + this.NextPlanId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsingNextPlanFrom.GetHashCode();
                if (this.NextPlanTaxRateId != null)
                {
                    hashCode = (hashCode * 59) + this.NextPlanTaxRateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProrationBehavior.GetHashCode();
                if (this.PlanHistories != null)
                {
                    hashCode = (hashCode * 59) + this.PlanHistories.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PlanId != null)
                {
                    hashCode = (hashCode * 59) + this.PlanId.GetHashCode();
                }
                if (this.BillingInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BillingInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
