/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// UserAvailableTenant
    /// </summary>
    [DataContract(Name = "UserAvailableTenant")]
    public partial class UserAvailableTenant : IEquatable<UserAvailableTenant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAvailableTenant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAvailableTenant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAvailableTenant" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">テナント名(tenant name) (required).</param>
        /// <param name="completedSignUp">completedSignUp (required).</param>
        /// <param name="envs">環境情報、役割(ロール)情報(environmental info, role info) (required).</param>
        /// <param name="userAttribute">ユーザー追加属性(user additional attributes) (required).</param>
        /// <param name="backOfficeStaffEmail">バックオフィス担当者のメール(back office contact email) (required).</param>
        /// <param name="planId">planId.</param>
        /// <param name="isPaid">テナントの支払い状況(tenant payment status)  ※ 現在はストライプ連携時のみ返却されます。Currently, it is returned only when stripe is linked. .</param>
        public UserAvailableTenant(string id = default(string), string name = default(string), bool completedSignUp = default(bool), List<UserAvailableEnv> envs = default(List<UserAvailableEnv>), Dictionary<string, Object> userAttribute = default(Dictionary<string, Object>), string backOfficeStaffEmail = default(string), string planId = default(string), bool isPaid = default(bool))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for UserAvailableTenant and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UserAvailableTenant and cannot be null");
            }
            this.Name = name;
            this.CompletedSignUp = completedSignUp;
            // to ensure "envs" is required (not null)
            if (envs == null)
            {
                throw new ArgumentNullException("envs is a required property for UserAvailableTenant and cannot be null");
            }
            this.Envs = envs;
            // to ensure "userAttribute" is required (not null)
            if (userAttribute == null)
            {
                throw new ArgumentNullException("userAttribute is a required property for UserAvailableTenant and cannot be null");
            }
            this.UserAttribute = userAttribute;
            // to ensure "backOfficeStaffEmail" is required (not null)
            if (backOfficeStaffEmail == null)
            {
                throw new ArgumentNullException("backOfficeStaffEmail is a required property for UserAvailableTenant and cannot be null");
            }
            this.BackOfficeStaffEmail = backOfficeStaffEmail;
            this.PlanId = planId;
            this.IsPaid = isPaid;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// テナント名(tenant name)
        /// </summary>
        /// <value>テナント名(tenant name)</value>
        /// <example>Anti-Pattern Inc.</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CompletedSignUp
        /// </summary>
        /// <example>true</example>
        [DataMember(Name = "completed_sign_up", IsRequired = true, EmitDefaultValue = true)]
        public bool CompletedSignUp { get; set; }

        /// <summary>
        /// 環境情報、役割(ロール)情報(environmental info, role info)
        /// </summary>
        /// <value>環境情報、役割(ロール)情報(environmental info, role info)</value>
        [DataMember(Name = "envs", IsRequired = true, EmitDefaultValue = true)]
        public List<UserAvailableEnv> Envs { get; set; }

        /// <summary>
        /// ユーザー追加属性(user additional attributes)
        /// </summary>
        /// <value>ユーザー追加属性(user additional attributes)</value>
        /// <example>{&quot;address&quot;:&quot;東京都&quot;,&quot;employee_number&quot;:100}</example>
        [DataMember(Name = "user_attribute", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> UserAttribute { get; set; }

        /// <summary>
        /// バックオフィス担当者のメール(back office contact email)
        /// </summary>
        /// <value>バックオフィス担当者のメール(back office contact email)</value>
        /// <example>hoge@example.com</example>
        [DataMember(Name = "back_office_staff_email", IsRequired = true, EmitDefaultValue = true)]
        public string BackOfficeStaffEmail { get; set; }

        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "plan_id", EmitDefaultValue = false)]
        public string PlanId { get; set; }

        /// <summary>
        /// テナントの支払い状況(tenant payment status)  ※ 現在はストライプ連携時のみ返却されます。Currently, it is returned only when stripe is linked. 
        /// </summary>
        /// <value>テナントの支払い状況(tenant payment status)  ※ 現在はストライプ連携時のみ返却されます。Currently, it is returned only when stripe is linked. </value>
        /// <example>true</example>
        [DataMember(Name = "is_paid", EmitDefaultValue = true)]
        public bool IsPaid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserAvailableTenant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CompletedSignUp: ").Append(CompletedSignUp).Append("\n");
            sb.Append("  Envs: ").Append(Envs).Append("\n");
            sb.Append("  UserAttribute: ").Append(UserAttribute).Append("\n");
            sb.Append("  BackOfficeStaffEmail: ").Append(BackOfficeStaffEmail).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  IsPaid: ").Append(IsPaid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAvailableTenant);
        }

        /// <summary>
        /// Returns true if UserAvailableTenant instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAvailableTenant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAvailableTenant input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CompletedSignUp == input.CompletedSignUp ||
                    this.CompletedSignUp.Equals(input.CompletedSignUp)
                ) && 
                (
                    this.Envs == input.Envs ||
                    this.Envs != null &&
                    input.Envs != null &&
                    this.Envs.SequenceEqual(input.Envs)
                ) && 
                (
                    this.UserAttribute == input.UserAttribute ||
                    this.UserAttribute != null &&
                    input.UserAttribute != null &&
                    this.UserAttribute.SequenceEqual(input.UserAttribute)
                ) && 
                (
                    this.BackOfficeStaffEmail == input.BackOfficeStaffEmail ||
                    (this.BackOfficeStaffEmail != null &&
                    this.BackOfficeStaffEmail.Equals(input.BackOfficeStaffEmail))
                ) && 
                (
                    this.PlanId == input.PlanId ||
                    (this.PlanId != null &&
                    this.PlanId.Equals(input.PlanId))
                ) && 
                (
                    this.IsPaid == input.IsPaid ||
                    this.IsPaid.Equals(input.IsPaid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CompletedSignUp.GetHashCode();
                if (this.Envs != null)
                {
                    hashCode = (hashCode * 59) + this.Envs.GetHashCode();
                }
                if (this.UserAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.UserAttribute.GetHashCode();
                }
                if (this.BackOfficeStaffEmail != null)
                {
                    hashCode = (hashCode * 59) + this.BackOfficeStaffEmail.GetHashCode();
                }
                if (this.PlanId != null)
                {
                    hashCode = (hashCode * 59) + this.PlanId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsPaid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
