/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// IdentityProviderSaml
    /// </summary>
    [DataContract(Name = "IdentityProviderSaml")]
    public partial class IdentityProviderSaml : IEquatable<IdentityProviderSaml>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderSaml" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityProviderSaml() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityProviderSaml" /> class.
        /// </summary>
        /// <param name="metadataUrl">metadataUrl (required).</param>
        /// <param name="emailAttribute">emailAttribute (required).</param>
        public IdentityProviderSaml(string metadataUrl = default(string), string emailAttribute = default(string))
        {
            // to ensure "metadataUrl" is required (not null)
            if (metadataUrl == null)
            {
                throw new ArgumentNullException("metadataUrl is a required property for IdentityProviderSaml and cannot be null");
            }
            this.MetadataUrl = metadataUrl;
            // to ensure "emailAttribute" is required (not null)
            if (emailAttribute == null)
            {
                throw new ArgumentNullException("emailAttribute is a required property for IdentityProviderSaml and cannot be null");
            }
            this.EmailAttribute = emailAttribute;
        }

        /// <summary>
        /// Gets or Sets MetadataUrl
        /// </summary>
        /// <example>https://example.com/saml/metadata</example>
        [DataMember(Name = "metadata_url", IsRequired = true, EmitDefaultValue = true)]
        public string MetadataUrl { get; set; }

        /// <summary>
        /// Gets or Sets EmailAttribute
        /// </summary>
        /// <example>email</example>
        [DataMember(Name = "email_attribute", IsRequired = true, EmitDefaultValue = true)]
        public string EmailAttribute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentityProviderSaml {\n");
            sb.Append("  MetadataUrl: ").Append(MetadataUrl).Append("\n");
            sb.Append("  EmailAttribute: ").Append(EmailAttribute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityProviderSaml);
        }

        /// <summary>
        /// Returns true if IdentityProviderSaml instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityProviderSaml to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProviderSaml input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MetadataUrl == input.MetadataUrl ||
                    (this.MetadataUrl != null &&
                    this.MetadataUrl.Equals(input.MetadataUrl))
                ) && 
                (
                    this.EmailAttribute == input.EmailAttribute ||
                    (this.EmailAttribute != null &&
                    this.EmailAttribute.Equals(input.EmailAttribute))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MetadataUrl != null)
                {
                    hashCode = (hashCode * 59) + this.MetadataUrl.GetHashCode();
                }
                if (this.EmailAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAttribute.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
