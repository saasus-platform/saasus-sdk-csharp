/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// StripeCustomer
    /// </summary>
    [DataContract(Name = "StripeCustomer")]
    public partial class StripeCustomer : IEquatable<StripeCustomer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StripeCustomer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StripeCustomer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StripeCustomer" /> class.
        /// </summary>
        /// <param name="customerId">stripe Customer ID (required).</param>
        /// <param name="subscriptionScheduleId">stripe Subscription Schedule ID (required).</param>
        public StripeCustomer(string customerId = default(string), string subscriptionScheduleId = default(string))
        {
            // to ensure "customerId" is required (not null)
            if (customerId == null)
            {
                throw new ArgumentNullException("customerId is a required property for StripeCustomer and cannot be null");
            }
            this.CustomerId = customerId;
            // to ensure "subscriptionScheduleId" is required (not null)
            if (subscriptionScheduleId == null)
            {
                throw new ArgumentNullException("subscriptionScheduleId is a required property for StripeCustomer and cannot be null");
            }
            this.SubscriptionScheduleId = subscriptionScheduleId;
        }

        /// <summary>
        /// stripe Customer ID
        /// </summary>
        /// <value>stripe Customer ID</value>
        /// <example>cus_1234567890</example>
        [DataMember(Name = "customer_id", IsRequired = true, EmitDefaultValue = true)]
        public string CustomerId { get; set; }

        /// <summary>
        /// stripe Subscription Schedule ID
        /// </summary>
        /// <value>stripe Subscription Schedule ID</value>
        /// <example>cus_1234567890</example>
        [DataMember(Name = "subscription_schedule_id", IsRequired = true, EmitDefaultValue = true)]
        public string SubscriptionScheduleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StripeCustomer {\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  SubscriptionScheduleId: ").Append(SubscriptionScheduleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StripeCustomer);
        }

        /// <summary>
        /// Returns true if StripeCustomer instances are equal
        /// </summary>
        /// <param name="input">Instance of StripeCustomer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StripeCustomer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerId == input.CustomerId ||
                    (this.CustomerId != null &&
                    this.CustomerId.Equals(input.CustomerId))
                ) && 
                (
                    this.SubscriptionScheduleId == input.SubscriptionScheduleId ||
                    (this.SubscriptionScheduleId != null &&
                    this.SubscriptionScheduleId.Equals(input.SubscriptionScheduleId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerId != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerId.GetHashCode();
                }
                if (this.SubscriptionScheduleId != null)
                {
                    hashCode = (hashCode * 59) + this.SubscriptionScheduleId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
