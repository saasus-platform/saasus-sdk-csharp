/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// TenantDetail
    /// </summary>
    [DataContract(Name = "TenantDetail")]
    public partial class TenantDetail : IEquatable<TenantDetail>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ProrationBehavior
        /// </summary>
        [DataMember(Name = "proration_behavior", EmitDefaultValue = false)]
        public ProrationBehavior? ProrationBehavior { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TenantDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TenantDetail" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="planId">planId.</param>
        /// <param name="billingInfo">billingInfo.</param>
        /// <param name="name">tenant name (required).</param>
        /// <param name="attributes">attribute info (required).</param>
        /// <param name="backOfficeStaffEmail">administrative staff email address (required).</param>
        /// <param name="nextPlanId">nextPlanId.</param>
        /// <param name="usingNextPlanFrom">Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.) .</param>
        /// <param name="nextPlanTaxRateId">nextPlanTaxRateId.</param>
        /// <param name="prorationBehavior">prorationBehavior.</param>
        /// <param name="deleteUsage">If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. .</param>
        /// <param name="planHistories">Plan History (required).</param>
        /// <param name="currentPlanPeriodStart">current plan period start.</param>
        /// <param name="currentPlanPeriodEnd">current plan period end.</param>
        public TenantDetail(string id = default(string), string planId = default(string), BillingInfo billingInfo = default(BillingInfo), string name = default(string), Dictionary<string, Object> attributes = default(Dictionary<string, Object>), string backOfficeStaffEmail = default(string), string nextPlanId = default(string), int usingNextPlanFrom = default(int), string nextPlanTaxRateId = default(string), ProrationBehavior? prorationBehavior = default(ProrationBehavior?), bool deleteUsage = default(bool), List<PlanHistory> planHistories = default(List<PlanHistory>), int currentPlanPeriodStart = default(int), int currentPlanPeriodEnd = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for TenantDetail and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TenantDetail and cannot be null");
            }
            this.Name = name;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for TenantDetail and cannot be null");
            }
            this.Attributes = attributes;
            // to ensure "backOfficeStaffEmail" is required (not null)
            if (backOfficeStaffEmail == null)
            {
                throw new ArgumentNullException("backOfficeStaffEmail is a required property for TenantDetail and cannot be null");
            }
            this.BackOfficeStaffEmail = backOfficeStaffEmail;
            // to ensure "planHistories" is required (not null)
            if (planHistories == null)
            {
                throw new ArgumentNullException("planHistories is a required property for TenantDetail and cannot be null");
            }
            this.PlanHistories = planHistories;
            this.PlanId = planId;
            this.BillingInfo = billingInfo;
            this.NextPlanId = nextPlanId;
            this.UsingNextPlanFrom = usingNextPlanFrom;
            this.NextPlanTaxRateId = nextPlanTaxRateId;
            this.ProrationBehavior = prorationBehavior;
            this.DeleteUsage = deleteUsage;
            this.CurrentPlanPeriodStart = currentPlanPeriodStart;
            this.CurrentPlanPeriodEnd = currentPlanPeriodEnd;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "plan_id", EmitDefaultValue = false)]
        public string PlanId { get; set; }

        /// <summary>
        /// Gets or Sets BillingInfo
        /// </summary>
        [DataMember(Name = "billing_info", EmitDefaultValue = false)]
        public BillingInfo BillingInfo { get; set; }

        /// <summary>
        /// tenant name
        /// </summary>
        /// <value>tenant name</value>
        /// <example>Anti-Pattern Inc.</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// attribute info
        /// </summary>
        /// <value>attribute info</value>
        /// <example>{&quot;address&quot;:&quot;東京都&quot;,&quot;employee_number&quot;:100}</example>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// administrative staff email address
        /// </summary>
        /// <value>administrative staff email address</value>
        /// <example>hoge@example.com</example>
        [DataMember(Name = "back_office_staff_email", IsRequired = true, EmitDefaultValue = true)]
        public string BackOfficeStaffEmail { get; set; }

        /// <summary>
        /// Gets or Sets NextPlanId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "next_plan_id", EmitDefaultValue = false)]
        public string NextPlanId { get; set; }

        /// <summary>
        /// Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.) 
        /// </summary>
        /// <value>Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.) </value>
        /// <example>1640995200</example>
        [DataMember(Name = "using_next_plan_from", EmitDefaultValue = false)]
        public int UsingNextPlanFrom { get; set; }

        /// <summary>
        /// Gets or Sets NextPlanTaxRateId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "next_plan_tax_rate_id", EmitDefaultValue = false)]
        public string NextPlanTaxRateId { get; set; }

        /// <summary>
        /// If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. 
        /// </summary>
        /// <value>If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. </value>
        [DataMember(Name = "delete_usage", EmitDefaultValue = true)]
        public bool DeleteUsage { get; set; }

        /// <summary>
        /// Plan History
        /// </summary>
        /// <value>Plan History</value>
        [DataMember(Name = "plan_histories", IsRequired = true, EmitDefaultValue = true)]
        public List<PlanHistory> PlanHistories { get; set; }

        /// <summary>
        /// current plan period start
        /// </summary>
        /// <value>current plan period start</value>
        /// <example>1672531200</example>
        [DataMember(Name = "current_plan_period_start", EmitDefaultValue = false)]
        public int CurrentPlanPeriodStart { get; set; }

        /// <summary>
        /// current plan period end
        /// </summary>
        /// <value>current plan period end</value>
        /// <example>1675209600</example>
        [DataMember(Name = "current_plan_period_end", EmitDefaultValue = false)]
        public int CurrentPlanPeriodEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TenantDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  BillingInfo: ").Append(BillingInfo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  BackOfficeStaffEmail: ").Append(BackOfficeStaffEmail).Append("\n");
            sb.Append("  NextPlanId: ").Append(NextPlanId).Append("\n");
            sb.Append("  UsingNextPlanFrom: ").Append(UsingNextPlanFrom).Append("\n");
            sb.Append("  NextPlanTaxRateId: ").Append(NextPlanTaxRateId).Append("\n");
            sb.Append("  ProrationBehavior: ").Append(ProrationBehavior).Append("\n");
            sb.Append("  DeleteUsage: ").Append(DeleteUsage).Append("\n");
            sb.Append("  PlanHistories: ").Append(PlanHistories).Append("\n");
            sb.Append("  CurrentPlanPeriodStart: ").Append(CurrentPlanPeriodStart).Append("\n");
            sb.Append("  CurrentPlanPeriodEnd: ").Append(CurrentPlanPeriodEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TenantDetail);
        }

        /// <summary>
        /// Returns true if TenantDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TenantDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TenantDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PlanId == input.PlanId ||
                    (this.PlanId != null &&
                    this.PlanId.Equals(input.PlanId))
                ) && 
                (
                    this.BillingInfo == input.BillingInfo ||
                    (this.BillingInfo != null &&
                    this.BillingInfo.Equals(input.BillingInfo))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.BackOfficeStaffEmail == input.BackOfficeStaffEmail ||
                    (this.BackOfficeStaffEmail != null &&
                    this.BackOfficeStaffEmail.Equals(input.BackOfficeStaffEmail))
                ) && 
                (
                    this.NextPlanId == input.NextPlanId ||
                    (this.NextPlanId != null &&
                    this.NextPlanId.Equals(input.NextPlanId))
                ) && 
                (
                    this.UsingNextPlanFrom == input.UsingNextPlanFrom ||
                    this.UsingNextPlanFrom.Equals(input.UsingNextPlanFrom)
                ) && 
                (
                    this.NextPlanTaxRateId == input.NextPlanTaxRateId ||
                    (this.NextPlanTaxRateId != null &&
                    this.NextPlanTaxRateId.Equals(input.NextPlanTaxRateId))
                ) && 
                (
                    this.ProrationBehavior == input.ProrationBehavior ||
                    this.ProrationBehavior.Equals(input.ProrationBehavior)
                ) && 
                (
                    this.DeleteUsage == input.DeleteUsage ||
                    this.DeleteUsage.Equals(input.DeleteUsage)
                ) && 
                (
                    this.PlanHistories == input.PlanHistories ||
                    this.PlanHistories != null &&
                    input.PlanHistories != null &&
                    this.PlanHistories.SequenceEqual(input.PlanHistories)
                ) && 
                (
                    this.CurrentPlanPeriodStart == input.CurrentPlanPeriodStart ||
                    this.CurrentPlanPeriodStart.Equals(input.CurrentPlanPeriodStart)
                ) && 
                (
                    this.CurrentPlanPeriodEnd == input.CurrentPlanPeriodEnd ||
                    this.CurrentPlanPeriodEnd.Equals(input.CurrentPlanPeriodEnd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PlanId != null)
                {
                    hashCode = (hashCode * 59) + this.PlanId.GetHashCode();
                }
                if (this.BillingInfo != null)
                {
                    hashCode = (hashCode * 59) + this.BillingInfo.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                if (this.BackOfficeStaffEmail != null)
                {
                    hashCode = (hashCode * 59) + this.BackOfficeStaffEmail.GetHashCode();
                }
                if (this.NextPlanId != null)
                {
                    hashCode = (hashCode * 59) + this.NextPlanId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsingNextPlanFrom.GetHashCode();
                if (this.NextPlanTaxRateId != null)
                {
                    hashCode = (hashCode * 59) + this.NextPlanTaxRateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProrationBehavior.GetHashCode();
                hashCode = (hashCode * 59) + this.DeleteUsage.GetHashCode();
                if (this.PlanHistories != null)
                {
                    hashCode = (hashCode * 59) + this.PlanHistories.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentPlanPeriodStart.GetHashCode();
                hashCode = (hashCode * 59) + this.CurrentPlanPeriodEnd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
