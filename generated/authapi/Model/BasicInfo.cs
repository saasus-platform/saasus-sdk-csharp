/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// BasicInfo
    /// </summary>
    [DataContract(Name = "BasicInfo")]
    public partial class BasicInfo : IEquatable<BasicInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BasicInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicInfo" /> class.
        /// </summary>
        /// <param name="domainName">ドメイン名(Domain Name) (required).</param>
        /// <param name="isDnsValidated">DNSレコードの検証結果(DNS Record Verification Results) (required).</param>
        /// <param name="certificateDnsRecord">certificateDnsRecord (required).</param>
        /// <param name="cloudFrontDnsRecord">cloudFrontDnsRecord (required).</param>
        /// <param name="dkimDnsRecords">DKIM DNS レコード(DKIM DNS Records) (required).</param>
        /// <param name="defaultDomainName">デフォルトドメイン名(Default Domain Name) (required).</param>
        /// <param name="fromEmailAddress">認証メールの送信元メールアドレス(Sender Email for Authentication Email) (required).</param>
        /// <param name="replyEmailAddress">認証メールの返信元メールアドレス(Reply-from email address of authentication email) (required).</param>
        /// <param name="isSesSandboxGranted">SESのサンドボックス解除及びCognitoのSES設定結果(SES sandbox release and Cognito SES configuration results) (required).</param>
        public BasicInfo(string domainName = default(string), bool isDnsValidated = default(bool), DnsRecord certificateDnsRecord = default(DnsRecord), DnsRecord cloudFrontDnsRecord = default(DnsRecord), List<DnsRecord> dkimDnsRecords = default(List<DnsRecord>), string defaultDomainName = default(string), string fromEmailAddress = default(string), string replyEmailAddress = default(string), bool isSesSandboxGranted = default(bool))
        {
            // to ensure "domainName" is required (not null)
            if (domainName == null)
            {
                throw new ArgumentNullException("domainName is a required property for BasicInfo and cannot be null");
            }
            this.DomainName = domainName;
            this.IsDnsValidated = isDnsValidated;
            // to ensure "certificateDnsRecord" is required (not null)
            if (certificateDnsRecord == null)
            {
                throw new ArgumentNullException("certificateDnsRecord is a required property for BasicInfo and cannot be null");
            }
            this.CertificateDnsRecord = certificateDnsRecord;
            // to ensure "cloudFrontDnsRecord" is required (not null)
            if (cloudFrontDnsRecord == null)
            {
                throw new ArgumentNullException("cloudFrontDnsRecord is a required property for BasicInfo and cannot be null");
            }
            this.CloudFrontDnsRecord = cloudFrontDnsRecord;
            // to ensure "dkimDnsRecords" is required (not null)
            if (dkimDnsRecords == null)
            {
                throw new ArgumentNullException("dkimDnsRecords is a required property for BasicInfo and cannot be null");
            }
            this.DkimDnsRecords = dkimDnsRecords;
            // to ensure "defaultDomainName" is required (not null)
            if (defaultDomainName == null)
            {
                throw new ArgumentNullException("defaultDomainName is a required property for BasicInfo and cannot be null");
            }
            this.DefaultDomainName = defaultDomainName;
            // to ensure "fromEmailAddress" is required (not null)
            if (fromEmailAddress == null)
            {
                throw new ArgumentNullException("fromEmailAddress is a required property for BasicInfo and cannot be null");
            }
            this.FromEmailAddress = fromEmailAddress;
            // to ensure "replyEmailAddress" is required (not null)
            if (replyEmailAddress == null)
            {
                throw new ArgumentNullException("replyEmailAddress is a required property for BasicInfo and cannot be null");
            }
            this.ReplyEmailAddress = replyEmailAddress;
            this.IsSesSandboxGranted = isSesSandboxGranted;
        }

        /// <summary>
        /// ドメイン名(Domain Name)
        /// </summary>
        /// <value>ドメイン名(Domain Name)</value>
        /// <example>dev.saasus.io</example>
        [DataMember(Name = "domain_name", IsRequired = true, EmitDefaultValue = true)]
        public string DomainName { get; set; }

        /// <summary>
        /// DNSレコードの検証結果(DNS Record Verification Results)
        /// </summary>
        /// <value>DNSレコードの検証結果(DNS Record Verification Results)</value>
        /// <example>false</example>
        [DataMember(Name = "is_dns_validated", IsRequired = true, EmitDefaultValue = true)]
        public bool IsDnsValidated { get; set; }

        /// <summary>
        /// Gets or Sets CertificateDnsRecord
        /// </summary>
        [DataMember(Name = "certificate_dns_record", IsRequired = true, EmitDefaultValue = true)]
        public DnsRecord CertificateDnsRecord { get; set; }

        /// <summary>
        /// Gets or Sets CloudFrontDnsRecord
        /// </summary>
        [DataMember(Name = "cloud_front_dns_record", IsRequired = true, EmitDefaultValue = true)]
        public DnsRecord CloudFrontDnsRecord { get; set; }

        /// <summary>
        /// DKIM DNS レコード(DKIM DNS Records)
        /// </summary>
        /// <value>DKIM DNS レコード(DKIM DNS Records)</value>
        [DataMember(Name = "dkim_dns_records", IsRequired = true, EmitDefaultValue = true)]
        public List<DnsRecord> DkimDnsRecords { get; set; }

        /// <summary>
        /// デフォルトドメイン名(Default Domain Name)
        /// </summary>
        /// <value>デフォルトドメイン名(Default Domain Name)</value>
        /// <example>d78bh0l3saarv.cloudfront.net</example>
        [DataMember(Name = "default_domain_name", IsRequired = true, EmitDefaultValue = true)]
        public string DefaultDomainName { get; set; }

        /// <summary>
        /// 認証メールの送信元メールアドレス(Sender Email for Authentication Email)
        /// </summary>
        /// <value>認証メールの送信元メールアドレス(Sender Email for Authentication Email)</value>
        /// <example>test@example.com</example>
        [DataMember(Name = "from_email_address", IsRequired = true, EmitDefaultValue = true)]
        public string FromEmailAddress { get; set; }

        /// <summary>
        /// 認証メールの返信元メールアドレス(Reply-from email address of authentication email)
        /// </summary>
        /// <value>認証メールの返信元メールアドレス(Reply-from email address of authentication email)</value>
        /// <example>test@example.com</example>
        [DataMember(Name = "reply_email_address", IsRequired = true, EmitDefaultValue = true)]
        public string ReplyEmailAddress { get; set; }

        /// <summary>
        /// SESのサンドボックス解除及びCognitoのSES設定結果(SES sandbox release and Cognito SES configuration results)
        /// </summary>
        /// <value>SESのサンドボックス解除及びCognitoのSES設定結果(SES sandbox release and Cognito SES configuration results)</value>
        /// <example>false</example>
        [DataMember(Name = "is_ses_sandbox_granted", IsRequired = true, EmitDefaultValue = true)]
        public bool IsSesSandboxGranted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BasicInfo {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  IsDnsValidated: ").Append(IsDnsValidated).Append("\n");
            sb.Append("  CertificateDnsRecord: ").Append(CertificateDnsRecord).Append("\n");
            sb.Append("  CloudFrontDnsRecord: ").Append(CloudFrontDnsRecord).Append("\n");
            sb.Append("  DkimDnsRecords: ").Append(DkimDnsRecords).Append("\n");
            sb.Append("  DefaultDomainName: ").Append(DefaultDomainName).Append("\n");
            sb.Append("  FromEmailAddress: ").Append(FromEmailAddress).Append("\n");
            sb.Append("  ReplyEmailAddress: ").Append(ReplyEmailAddress).Append("\n");
            sb.Append("  IsSesSandboxGranted: ").Append(IsSesSandboxGranted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicInfo);
        }

        /// <summary>
        /// Returns true if BasicInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DomainName == input.DomainName ||
                    (this.DomainName != null &&
                    this.DomainName.Equals(input.DomainName))
                ) && 
                (
                    this.IsDnsValidated == input.IsDnsValidated ||
                    this.IsDnsValidated.Equals(input.IsDnsValidated)
                ) && 
                (
                    this.CertificateDnsRecord == input.CertificateDnsRecord ||
                    (this.CertificateDnsRecord != null &&
                    this.CertificateDnsRecord.Equals(input.CertificateDnsRecord))
                ) && 
                (
                    this.CloudFrontDnsRecord == input.CloudFrontDnsRecord ||
                    (this.CloudFrontDnsRecord != null &&
                    this.CloudFrontDnsRecord.Equals(input.CloudFrontDnsRecord))
                ) && 
                (
                    this.DkimDnsRecords == input.DkimDnsRecords ||
                    this.DkimDnsRecords != null &&
                    input.DkimDnsRecords != null &&
                    this.DkimDnsRecords.SequenceEqual(input.DkimDnsRecords)
                ) && 
                (
                    this.DefaultDomainName == input.DefaultDomainName ||
                    (this.DefaultDomainName != null &&
                    this.DefaultDomainName.Equals(input.DefaultDomainName))
                ) && 
                (
                    this.FromEmailAddress == input.FromEmailAddress ||
                    (this.FromEmailAddress != null &&
                    this.FromEmailAddress.Equals(input.FromEmailAddress))
                ) && 
                (
                    this.ReplyEmailAddress == input.ReplyEmailAddress ||
                    (this.ReplyEmailAddress != null &&
                    this.ReplyEmailAddress.Equals(input.ReplyEmailAddress))
                ) && 
                (
                    this.IsSesSandboxGranted == input.IsSesSandboxGranted ||
                    this.IsSesSandboxGranted.Equals(input.IsSesSandboxGranted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DomainName != null)
                {
                    hashCode = (hashCode * 59) + this.DomainName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDnsValidated.GetHashCode();
                if (this.CertificateDnsRecord != null)
                {
                    hashCode = (hashCode * 59) + this.CertificateDnsRecord.GetHashCode();
                }
                if (this.CloudFrontDnsRecord != null)
                {
                    hashCode = (hashCode * 59) + this.CloudFrontDnsRecord.GetHashCode();
                }
                if (this.DkimDnsRecords != null)
                {
                    hashCode = (hashCode * 59) + this.DkimDnsRecords.GetHashCode();
                }
                if (this.DefaultDomainName != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultDomainName.GetHashCode();
                }
                if (this.FromEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FromEmailAddress.GetHashCode();
                }
                if (this.ReplyEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ReplyEmailAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSesSandboxGranted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
