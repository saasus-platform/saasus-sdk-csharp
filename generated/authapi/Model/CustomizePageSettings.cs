/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// CustomizePageSettings
    /// </summary>
    [DataContract(Name = "CustomizePageSettings")]
    public partial class CustomizePageSettings : IEquatable<CustomizePageSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomizePageSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomizePageSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomizePageSettings" /> class.
        /// </summary>
        /// <param name="title">service name (required).</param>
        /// <param name="termsOfServiceUrl">terms of service URL (required).</param>
        /// <param name="privacyPolicyUrl">privacy policy URL (required).</param>
        /// <param name="googleTagManagerContainerId">Google Tag Manager container ID (required).</param>
        /// <param name="icon">service icon (required).</param>
        /// <param name="favicon">favicon (required).</param>
        public CustomizePageSettings(string title = default(string), string termsOfServiceUrl = default(string), string privacyPolicyUrl = default(string), string googleTagManagerContainerId = default(string), string icon = default(string), string favicon = default(string))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for CustomizePageSettings and cannot be null");
            }
            this.Title = title;
            // to ensure "termsOfServiceUrl" is required (not null)
            if (termsOfServiceUrl == null)
            {
                throw new ArgumentNullException("termsOfServiceUrl is a required property for CustomizePageSettings and cannot be null");
            }
            this.TermsOfServiceUrl = termsOfServiceUrl;
            // to ensure "privacyPolicyUrl" is required (not null)
            if (privacyPolicyUrl == null)
            {
                throw new ArgumentNullException("privacyPolicyUrl is a required property for CustomizePageSettings and cannot be null");
            }
            this.PrivacyPolicyUrl = privacyPolicyUrl;
            // to ensure "googleTagManagerContainerId" is required (not null)
            if (googleTagManagerContainerId == null)
            {
                throw new ArgumentNullException("googleTagManagerContainerId is a required property for CustomizePageSettings and cannot be null");
            }
            this.GoogleTagManagerContainerId = googleTagManagerContainerId;
            // to ensure "icon" is required (not null)
            if (icon == null)
            {
                throw new ArgumentNullException("icon is a required property for CustomizePageSettings and cannot be null");
            }
            this.Icon = icon;
            // to ensure "favicon" is required (not null)
            if (favicon == null)
            {
                throw new ArgumentNullException("favicon is a required property for CustomizePageSettings and cannot be null");
            }
            this.Favicon = favicon;
        }

        /// <summary>
        /// service name
        /// </summary>
        /// <value>service name</value>
        /// <example>SaaSus</example>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// terms of service URL
        /// </summary>
        /// <value>terms of service URL</value>
        /// <example>http://dev.example.com/terms</example>
        [DataMember(Name = "terms_of_service_url", IsRequired = true, EmitDefaultValue = true)]
        public string TermsOfServiceUrl { get; set; }

        /// <summary>
        /// privacy policy URL
        /// </summary>
        /// <value>privacy policy URL</value>
        /// <example>http://dev.example.com/privacy</example>
        [DataMember(Name = "privacy_policy_url", IsRequired = true, EmitDefaultValue = true)]
        public string PrivacyPolicyUrl { get; set; }

        /// <summary>
        /// Google Tag Manager container ID
        /// </summary>
        /// <value>Google Tag Manager container ID</value>
        /// <example>GTM-XXXXXXX</example>
        [DataMember(Name = "google_tag_manager_container_id", IsRequired = true, EmitDefaultValue = true)]
        public string GoogleTagManagerContainerId { get; set; }

        /// <summary>
        /// service icon
        /// </summary>
        /// <value>service icon</value>
        /// <example>http://icon.example.com</example>
        [DataMember(Name = "icon", IsRequired = true, EmitDefaultValue = true)]
        public string Icon { get; set; }

        /// <summary>
        /// favicon
        /// </summary>
        /// <value>favicon</value>
        /// <example>http://icon.example.com</example>
        [DataMember(Name = "favicon", IsRequired = true, EmitDefaultValue = true)]
        public string Favicon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomizePageSettings {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TermsOfServiceUrl: ").Append(TermsOfServiceUrl).Append("\n");
            sb.Append("  PrivacyPolicyUrl: ").Append(PrivacyPolicyUrl).Append("\n");
            sb.Append("  GoogleTagManagerContainerId: ").Append(GoogleTagManagerContainerId).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Favicon: ").Append(Favicon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomizePageSettings);
        }

        /// <summary>
        /// Returns true if CustomizePageSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomizePageSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomizePageSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.TermsOfServiceUrl == input.TermsOfServiceUrl ||
                    (this.TermsOfServiceUrl != null &&
                    this.TermsOfServiceUrl.Equals(input.TermsOfServiceUrl))
                ) && 
                (
                    this.PrivacyPolicyUrl == input.PrivacyPolicyUrl ||
                    (this.PrivacyPolicyUrl != null &&
                    this.PrivacyPolicyUrl.Equals(input.PrivacyPolicyUrl))
                ) && 
                (
                    this.GoogleTagManagerContainerId == input.GoogleTagManagerContainerId ||
                    (this.GoogleTagManagerContainerId != null &&
                    this.GoogleTagManagerContainerId.Equals(input.GoogleTagManagerContainerId))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Favicon == input.Favicon ||
                    (this.Favicon != null &&
                    this.Favicon.Equals(input.Favicon))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.TermsOfServiceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.TermsOfServiceUrl.GetHashCode();
                }
                if (this.PrivacyPolicyUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PrivacyPolicyUrl.GetHashCode();
                }
                if (this.GoogleTagManagerContainerId != null)
                {
                    hashCode = (hashCode * 59) + this.GoogleTagManagerContainerId.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.Favicon != null)
                {
                    hashCode = (hashCode * 59) + this.Favicon.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
