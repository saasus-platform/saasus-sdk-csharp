/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// CreateTenantUserParam
    /// </summary>
    [DataContract(Name = "CreateTenantUserParam")]
    public partial class CreateTenantUserParam : IEquatable<CreateTenantUserParam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTenantUserParam" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTenantUserParam() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTenantUserParam" /> class.
        /// </summary>
        /// <param name="email">E-mail (required).</param>
        /// <param name="attributes">Attribute information (Get information set by defining user attributes in the SaaS development console)  (required).</param>
        public CreateTenantUserParam(string email = default(string), Dictionary<string, Object> attributes = default(Dictionary<string, Object>))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CreateTenantUserParam and cannot be null");
            }
            this.Email = email;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for CreateTenantUserParam and cannot be null");
            }
            this.Attributes = attributes;
        }

        /// <summary>
        /// E-mail
        /// </summary>
        /// <value>E-mail</value>
        /// <example>hoge@example.com</example>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Attribute information (Get information set by defining user attributes in the SaaS development console) 
        /// </summary>
        /// <value>Attribute information (Get information set by defining user attributes in the SaaS development console) </value>
        /// <example>{&quot;address&quot;:&quot;東京都&quot;,&quot;birthday&quot;:19940925,&quot;sex&quot;:&quot;男&quot;}</example>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTenantUserParam {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateTenantUserParam);
        }

        /// <summary>
        /// Returns true if CreateTenantUserParam instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateTenantUserParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTenantUserParam input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
