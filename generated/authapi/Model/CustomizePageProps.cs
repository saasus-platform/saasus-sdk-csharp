/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// CustomizePageProps
    /// </summary>
    [DataContract(Name = "CustomizePageProps")]
    public partial class CustomizePageProps : IEquatable<CustomizePageProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomizePageProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomizePageProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomizePageProps" /> class.
        /// </summary>
        /// <param name="htmlContents">画面のHTMLを編集できます ※ 未提供の機能のため、変更・保存はできません  Edit page HTML ※ This function is not yet provided, so it cannot be changed or saved.  (required).</param>
        /// <param name="isTermsOfService">利用規約の同意チェックボックスを表示するが設定されているか(display the terms of use agreement check box) (required).</param>
        /// <param name="isPrivacyPolicy">プライバシーポリシーチェックボックスを表示するが設定されているか(show the privacy policy checkbox) (required).</param>
        public CustomizePageProps(string htmlContents = default(string), bool isTermsOfService = default(bool), bool isPrivacyPolicy = default(bool))
        {
            // to ensure "htmlContents" is required (not null)
            if (htmlContents == null)
            {
                throw new ArgumentNullException("htmlContents is a required property for CustomizePageProps and cannot be null");
            }
            this.HtmlContents = htmlContents;
            this.IsTermsOfService = isTermsOfService;
            this.IsPrivacyPolicy = isPrivacyPolicy;
        }

        /// <summary>
        /// 画面のHTMLを編集できます ※ 未提供の機能のため、変更・保存はできません  Edit page HTML ※ This function is not yet provided, so it cannot be changed or saved. 
        /// </summary>
        /// <value>画面のHTMLを編集できます ※ 未提供の機能のため、変更・保存はできません  Edit page HTML ※ This function is not yet provided, so it cannot be changed or saved. </value>
        /// <example>&lt;html&gt;&lt;div&gt;画面内容&lt;/div&gt;&lt;/html&gt;</example>
        [DataMember(Name = "html_contents", IsRequired = true, EmitDefaultValue = true)]
        public string HtmlContents { get; set; }

        /// <summary>
        /// 利用規約の同意チェックボックスを表示するが設定されているか(display the terms of use agreement check box)
        /// </summary>
        /// <value>利用規約の同意チェックボックスを表示するが設定されているか(display the terms of use agreement check box)</value>
        /// <example>true</example>
        [DataMember(Name = "is_terms_of_service", IsRequired = true, EmitDefaultValue = true)]
        public bool IsTermsOfService { get; set; }

        /// <summary>
        /// プライバシーポリシーチェックボックスを表示するが設定されているか(show the privacy policy checkbox)
        /// </summary>
        /// <value>プライバシーポリシーチェックボックスを表示するが設定されているか(show the privacy policy checkbox)</value>
        /// <example>true</example>
        [DataMember(Name = "is_privacy_policy", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPrivacyPolicy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomizePageProps {\n");
            sb.Append("  HtmlContents: ").Append(HtmlContents).Append("\n");
            sb.Append("  IsTermsOfService: ").Append(IsTermsOfService).Append("\n");
            sb.Append("  IsPrivacyPolicy: ").Append(IsPrivacyPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomizePageProps);
        }

        /// <summary>
        /// Returns true if CustomizePageProps instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomizePageProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomizePageProps input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HtmlContents == input.HtmlContents ||
                    (this.HtmlContents != null &&
                    this.HtmlContents.Equals(input.HtmlContents))
                ) && 
                (
                    this.IsTermsOfService == input.IsTermsOfService ||
                    this.IsTermsOfService.Equals(input.IsTermsOfService)
                ) && 
                (
                    this.IsPrivacyPolicy == input.IsPrivacyPolicy ||
                    this.IsPrivacyPolicy.Equals(input.IsPrivacyPolicy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HtmlContents != null)
                {
                    hashCode = (hashCode * 59) + this.HtmlContents.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsTermsOfService.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPrivacyPolicy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
