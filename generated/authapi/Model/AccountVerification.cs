/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// アカウント認証設定(account authentication settings) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) 
    /// </summary>
    [DataContract(Name = "AccountVerification")]
    public partial class AccountVerification : IEquatable<AccountVerification>, IValidatableObject
    {
        /// <summary>
        /// code: 検証コード(verification code) link: 検証リンク(verification link) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) 
        /// </summary>
        /// <value>code: 検証コード(verification code) link: 検証リンク(verification link) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerificationMethodEnum
        {
            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            [EnumMember(Value = "code")]
            Code = 1,

            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            [EnumMember(Value = "link")]
            Link = 2
        }


        /// <summary>
        /// code: 検証コード(verification code) link: 検証リンク(verification link) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) 
        /// </summary>
        /// <value>code: 検証コード(verification code) link: 検証リンク(verification link) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.) </value>
        /// <example>code</example>
        [DataMember(Name = "verification_method", IsRequired = true, EmitDefaultValue = true)]
        public VerificationMethodEnum VerificationMethod { get; set; }
        /// <summary>
        /// email: Eメール(e-mail) sms: SMS smsOrEmail: SMS不可の場合にEメール(email if SMS is not possible) 
        /// </summary>
        /// <value>email: Eメール(e-mail) sms: SMS smsOrEmail: SMS不可の場合にEメール(email if SMS is not possible) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SendingToEnum
        {
            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 1,

            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 2,

            /// <summary>
            /// Enum SmsOrEmail for value: smsOrEmail
            /// </summary>
            [EnumMember(Value = "smsOrEmail")]
            SmsOrEmail = 3
        }


        /// <summary>
        /// email: Eメール(e-mail) sms: SMS smsOrEmail: SMS不可の場合にEメール(email if SMS is not possible) 
        /// </summary>
        /// <value>email: Eメール(e-mail) sms: SMS smsOrEmail: SMS不可の場合にEメール(email if SMS is not possible) </value>
        /// <example>email</example>
        [DataMember(Name = "sending_to", IsRequired = true, EmitDefaultValue = true)]
        public SendingToEnum SendingTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountVerification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountVerification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountVerification" /> class.
        /// </summary>
        /// <param name="verificationMethod">code: 検証コード(verification code) link: 検証リンク(verification link) ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)  (required).</param>
        /// <param name="sendingTo">email: Eメール(e-mail) sms: SMS smsOrEmail: SMS不可の場合にEメール(email if SMS is not possible)  (required).</param>
        public AccountVerification(VerificationMethodEnum verificationMethod = default(VerificationMethodEnum), SendingToEnum sendingTo = default(SendingToEnum))
        {
            this.VerificationMethod = verificationMethod;
            this.SendingTo = sendingTo;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountVerification {\n");
            sb.Append("  VerificationMethod: ").Append(VerificationMethod).Append("\n");
            sb.Append("  SendingTo: ").Append(SendingTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountVerification);
        }

        /// <summary>
        /// Returns true if AccountVerification instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountVerification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountVerification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VerificationMethod == input.VerificationMethod ||
                    this.VerificationMethod.Equals(input.VerificationMethod)
                ) && 
                (
                    this.SendingTo == input.SendingTo ||
                    this.SendingTo.Equals(input.SendingTo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VerificationMethod.GetHashCode();
                hashCode = (hashCode * 59) + this.SendingTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
