/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// SoftwareTokenSecretCode
    /// </summary>
    [DataContract(Name = "SoftwareTokenSecretCode")]
    public partial class SoftwareTokenSecretCode : IEquatable<SoftwareTokenSecretCode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareTokenSecretCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SoftwareTokenSecretCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwareTokenSecretCode" /> class.
        /// </summary>
        /// <param name="secretCode">シークレットコード(secret code) (required).</param>
        public SoftwareTokenSecretCode(string secretCode = default(string))
        {
            // to ensure "secretCode" is required (not null)
            if (secretCode == null)
            {
                throw new ArgumentNullException("secretCode is a required property for SoftwareTokenSecretCode and cannot be null");
            }
            this.SecretCode = secretCode;
        }

        /// <summary>
        /// シークレットコード(secret code)
        /// </summary>
        /// <value>シークレットコード(secret code)</value>
        [DataMember(Name = "secret_code", IsRequired = true, EmitDefaultValue = true)]
        public string SecretCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SoftwareTokenSecretCode {\n");
            sb.Append("  SecretCode: ").Append(SecretCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SoftwareTokenSecretCode);
        }

        /// <summary>
        /// Returns true if SoftwareTokenSecretCode instances are equal
        /// </summary>
        /// <param name="input">Instance of SoftwareTokenSecretCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftwareTokenSecretCode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SecretCode == input.SecretCode ||
                    (this.SecretCode != null &&
                    this.SecretCode.Equals(input.SecretCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecretCode != null)
                {
                    hashCode = (hashCode * 59) + this.SecretCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
