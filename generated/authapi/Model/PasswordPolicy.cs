/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// Password Policy
    /// </summary>
    [DataContract(Name = "PasswordPolicy")]
    public partial class PasswordPolicy : IEquatable<PasswordPolicy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordPolicy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PasswordPolicy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PasswordPolicy" /> class.
        /// </summary>
        /// <param name="minimumLength">Minimum number of characters (required).</param>
        /// <param name="isRequireLowercase">Contains one or more lowercase characters (required).</param>
        /// <param name="isRequireNumbers">Contains one or more numeric characters (required).</param>
        /// <param name="isRequireSymbols">Contains one or more special characters (required).</param>
        /// <param name="isRequireUppercase">Contains one or more uppercase letters (required).</param>
        /// <param name="temporaryPasswordValidityDays">Temporary password expiration date (required).</param>
        public PasswordPolicy(int minimumLength = default(int), bool isRequireLowercase = default(bool), bool isRequireNumbers = default(bool), bool isRequireSymbols = default(bool), bool isRequireUppercase = default(bool), int temporaryPasswordValidityDays = default(int))
        {
            this.MinimumLength = minimumLength;
            this.IsRequireLowercase = isRequireLowercase;
            this.IsRequireNumbers = isRequireNumbers;
            this.IsRequireSymbols = isRequireSymbols;
            this.IsRequireUppercase = isRequireUppercase;
            this.TemporaryPasswordValidityDays = temporaryPasswordValidityDays;
        }

        /// <summary>
        /// Minimum number of characters
        /// </summary>
        /// <value>Minimum number of characters</value>
        /// <example>10</example>
        [DataMember(Name = "minimum_length", IsRequired = true, EmitDefaultValue = true)]
        public int MinimumLength { get; set; }

        /// <summary>
        /// Contains one or more lowercase characters
        /// </summary>
        /// <value>Contains one or more lowercase characters</value>
        /// <example>true</example>
        [DataMember(Name = "is_require_lowercase", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRequireLowercase { get; set; }

        /// <summary>
        /// Contains one or more numeric characters
        /// </summary>
        /// <value>Contains one or more numeric characters</value>
        /// <example>true</example>
        [DataMember(Name = "is_require_numbers", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRequireNumbers { get; set; }

        /// <summary>
        /// Contains one or more special characters
        /// </summary>
        /// <value>Contains one or more special characters</value>
        /// <example>true</example>
        [DataMember(Name = "is_require_symbols", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRequireSymbols { get; set; }

        /// <summary>
        /// Contains one or more uppercase letters
        /// </summary>
        /// <value>Contains one or more uppercase letters</value>
        /// <example>true</example>
        [DataMember(Name = "is_require_uppercase", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRequireUppercase { get; set; }

        /// <summary>
        /// Temporary password expiration date
        /// </summary>
        /// <value>Temporary password expiration date</value>
        /// <example>10</example>
        [DataMember(Name = "temporary_password_validity_days", IsRequired = true, EmitDefaultValue = true)]
        public int TemporaryPasswordValidityDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PasswordPolicy {\n");
            sb.Append("  MinimumLength: ").Append(MinimumLength).Append("\n");
            sb.Append("  IsRequireLowercase: ").Append(IsRequireLowercase).Append("\n");
            sb.Append("  IsRequireNumbers: ").Append(IsRequireNumbers).Append("\n");
            sb.Append("  IsRequireSymbols: ").Append(IsRequireSymbols).Append("\n");
            sb.Append("  IsRequireUppercase: ").Append(IsRequireUppercase).Append("\n");
            sb.Append("  TemporaryPasswordValidityDays: ").Append(TemporaryPasswordValidityDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PasswordPolicy);
        }

        /// <summary>
        /// Returns true if PasswordPolicy instances are equal
        /// </summary>
        /// <param name="input">Instance of PasswordPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordPolicy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MinimumLength == input.MinimumLength ||
                    this.MinimumLength.Equals(input.MinimumLength)
                ) && 
                (
                    this.IsRequireLowercase == input.IsRequireLowercase ||
                    this.IsRequireLowercase.Equals(input.IsRequireLowercase)
                ) && 
                (
                    this.IsRequireNumbers == input.IsRequireNumbers ||
                    this.IsRequireNumbers.Equals(input.IsRequireNumbers)
                ) && 
                (
                    this.IsRequireSymbols == input.IsRequireSymbols ||
                    this.IsRequireSymbols.Equals(input.IsRequireSymbols)
                ) && 
                (
                    this.IsRequireUppercase == input.IsRequireUppercase ||
                    this.IsRequireUppercase.Equals(input.IsRequireUppercase)
                ) && 
                (
                    this.TemporaryPasswordValidityDays == input.TemporaryPasswordValidityDays ||
                    this.TemporaryPasswordValidityDays.Equals(input.TemporaryPasswordValidityDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MinimumLength.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRequireLowercase.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRequireNumbers.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRequireSymbols.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRequireUppercase.GetHashCode();
                hashCode = (hashCode * 59) + this.TemporaryPasswordValidityDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
