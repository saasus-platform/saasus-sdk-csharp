/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// PlanHistory
    /// </summary>
    [DataContract(Name = "PlanHistory")]
    public partial class PlanHistory : IEquatable<PlanHistory>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ProrationBehavior
        /// </summary>
        [DataMember(Name = "proration_behavior", EmitDefaultValue = false)]
        public ProrationBehavior? ProrationBehavior { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlanHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanHistory" /> class.
        /// </summary>
        /// <param name="planId">planId (required).</param>
        /// <param name="planAppliedAt">Registration date (required).</param>
        /// <param name="taxRateId">taxRateId.</param>
        /// <param name="prorationBehavior">prorationBehavior.</param>
        /// <param name="deleteUsage">If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. .</param>
        public PlanHistory(string planId = default(string), int planAppliedAt = default(int), string taxRateId = default(string), ProrationBehavior? prorationBehavior = default(ProrationBehavior?), bool deleteUsage = default(bool))
        {
            // to ensure "planId" is required (not null)
            if (planId == null)
            {
                throw new ArgumentNullException("planId is a required property for PlanHistory and cannot be null");
            }
            this.PlanId = planId;
            this.PlanAppliedAt = planAppliedAt;
            this.TaxRateId = taxRateId;
            this.ProrationBehavior = prorationBehavior;
            this.DeleteUsage = deleteUsage;
        }

        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "plan_id", IsRequired = true, EmitDefaultValue = true)]
        public string PlanId { get; set; }

        /// <summary>
        /// Registration date
        /// </summary>
        /// <value>Registration date</value>
        /// <example>1640995200</example>
        [DataMember(Name = "plan_applied_at", IsRequired = true, EmitDefaultValue = true)]
        public int PlanAppliedAt { get; set; }

        /// <summary>
        /// Gets or Sets TaxRateId
        /// </summary>
        /// <example>69e732d6-8ecc-45c4-c2eb-8438f7ffe775</example>
        [DataMember(Name = "tax_rate_id", EmitDefaultValue = false)]
        public string TaxRateId { get; set; }

        /// <summary>
        /// If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. 
        /// </summary>
        /// <value>If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans. When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items. The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled. </value>
        [DataMember(Name = "delete_usage", EmitDefaultValue = true)]
        public bool DeleteUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlanHistory {\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  PlanAppliedAt: ").Append(PlanAppliedAt).Append("\n");
            sb.Append("  TaxRateId: ").Append(TaxRateId).Append("\n");
            sb.Append("  ProrationBehavior: ").Append(ProrationBehavior).Append("\n");
            sb.Append("  DeleteUsage: ").Append(DeleteUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanHistory);
        }

        /// <summary>
        /// Returns true if PlanHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanHistory input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PlanId == input.PlanId ||
                    (this.PlanId != null &&
                    this.PlanId.Equals(input.PlanId))
                ) && 
                (
                    this.PlanAppliedAt == input.PlanAppliedAt ||
                    this.PlanAppliedAt.Equals(input.PlanAppliedAt)
                ) && 
                (
                    this.TaxRateId == input.TaxRateId ||
                    (this.TaxRateId != null &&
                    this.TaxRateId.Equals(input.TaxRateId))
                ) && 
                (
                    this.ProrationBehavior == input.ProrationBehavior ||
                    this.ProrationBehavior.Equals(input.ProrationBehavior)
                ) && 
                (
                    this.DeleteUsage == input.DeleteUsage ||
                    this.DeleteUsage.Equals(input.DeleteUsage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlanId != null)
                {
                    hashCode = (hashCode * 59) + this.PlanId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PlanAppliedAt.GetHashCode();
                if (this.TaxRateId != null)
                {
                    hashCode = (hashCode * 59) + this.TaxRateId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProrationBehavior.GetHashCode();
                hashCode = (hashCode * 59) + this.DeleteUsage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
