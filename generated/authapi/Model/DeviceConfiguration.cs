/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// 信頼済みデバイスの記憶の設定(settings for remembering trusted devices) 
    /// </summary>
    [DataContract(Name = "DeviceConfiguration")]
    public partial class DeviceConfiguration : IEquatable<DeviceConfiguration>, IValidatableObject
    {
        /// <summary>
        /// always: 常に記憶する(always remember) userOptIn: ユーザーオプトイン(user opt-in) no: (don&#39;t save) 
        /// </summary>
        /// <value>always: 常に記憶する(always remember) userOptIn: ユーザーオプトイン(user opt-in) no: (don&#39;t save) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeviceRememberingEnum
        {
            /// <summary>
            /// Enum Always for value: always
            /// </summary>
            [EnumMember(Value = "always")]
            Always = 1,

            /// <summary>
            /// Enum UserOptIn for value: userOptIn
            /// </summary>
            [EnumMember(Value = "userOptIn")]
            UserOptIn = 2,

            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 3
        }


        /// <summary>
        /// always: 常に記憶する(always remember) userOptIn: ユーザーオプトイン(user opt-in) no: (don&#39;t save) 
        /// </summary>
        /// <value>always: 常に記憶する(always remember) userOptIn: ユーザーオプトイン(user opt-in) no: (don&#39;t save) </value>
        /// <example>always</example>
        [DataMember(Name = "device_remembering", IsRequired = true, EmitDefaultValue = true)]
        public DeviceRememberingEnum DeviceRemembering { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceConfiguration" /> class.
        /// </summary>
        /// <param name="deviceRemembering">always: 常に記憶する(always remember) userOptIn: ユーザーオプトイン(user opt-in) no: (don&#39;t save)  (required).</param>
        public DeviceConfiguration(DeviceRememberingEnum deviceRemembering = default(DeviceRememberingEnum))
        {
            this.DeviceRemembering = deviceRemembering;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceConfiguration {\n");
            sb.Append("  DeviceRemembering: ").Append(DeviceRemembering).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceConfiguration);
        }

        /// <summary>
        /// Returns true if DeviceConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceConfiguration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DeviceRemembering == input.DeviceRemembering ||
                    this.DeviceRemembering.Equals(input.DeviceRemembering)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.DeviceRemembering.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
