/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// reCAPTCHA authentication settings â€» This function is not yet provided, so it cannot be changed or saved. 
    /// </summary>
    [DataContract(Name = "RecaptchaProps")]
    public partial class RecaptchaProps : IEquatable<RecaptchaProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecaptchaProps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecaptchaProps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecaptchaProps" /> class.
        /// </summary>
        /// <param name="siteKey">site key (required).</param>
        /// <param name="secretKey">secret key (required).</param>
        public RecaptchaProps(string siteKey = default(string), string secretKey = default(string))
        {
            // to ensure "siteKey" is required (not null)
            if (siteKey == null)
            {
                throw new ArgumentNullException("siteKey is a required property for RecaptchaProps and cannot be null");
            }
            this.SiteKey = siteKey;
            // to ensure "secretKey" is required (not null)
            if (secretKey == null)
            {
                throw new ArgumentNullException("secretKey is a required property for RecaptchaProps and cannot be null");
            }
            this.SecretKey = secretKey;
        }

        /// <summary>
        /// site key
        /// </summary>
        /// <value>site key</value>
        /// <example>ede66c43-9b9d-4222-93ed-5f11c96e08e2</example>
        [DataMember(Name = "site_key", IsRequired = true, EmitDefaultValue = true)]
        public string SiteKey { get; set; }

        /// <summary>
        /// secret key
        /// </summary>
        /// <value>secret key</value>
        /// <example>d5794b1b-5f92-4dc6-aa48-085dbb08b813</example>
        [DataMember(Name = "secret_key", IsRequired = true, EmitDefaultValue = true)]
        public string SecretKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecaptchaProps {\n");
            sb.Append("  SiteKey: ").Append(SiteKey).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecaptchaProps);
        }

        /// <summary>
        /// Returns true if RecaptchaProps instances are equal
        /// </summary>
        /// <param name="input">Instance of RecaptchaProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecaptchaProps input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SiteKey == input.SiteKey ||
                    (this.SiteKey != null &&
                    this.SiteKey.Equals(input.SiteKey))
                ) && 
                (
                    this.SecretKey == input.SecretKey ||
                    (this.SecretKey != null &&
                    this.SecretKey.Equals(input.SecretKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SiteKey != null)
                {
                    hashCode = (hashCode * 59) + this.SiteKey.GetHashCode();
                }
                if (this.SecretKey != null)
                {
                    hashCode = (hashCode * 59) + this.SecretKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
