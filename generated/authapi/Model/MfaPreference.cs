/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// MfaPreference
    /// </summary>
    [DataContract(Name = "MfaPreference")]
    public partial class MfaPreference : IEquatable<MfaPreference>, IValidatableObject
    {
        /// <summary>
        /// MFA method (required if enabled is true)
        /// </summary>
        /// <value>MFA method (required if enabled is true)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum SoftwareToken for value: softwareToken
            /// </summary>
            [EnumMember(Value = "softwareToken")]
            SoftwareToken = 1
        }


        /// <summary>
        /// MFA method (required if enabled is true)
        /// </summary>
        /// <value>MFA method (required if enabled is true)</value>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MfaPreference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MfaPreference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MfaPreference" /> class.
        /// </summary>
        /// <param name="enabled">enable MFA (required).</param>
        /// <param name="method">MFA method (required if enabled is true).</param>
        public MfaPreference(bool enabled = default(bool), MethodEnum? method = default(MethodEnum?))
        {
            this.Enabled = enabled;
            this.Method = method;
        }

        /// <summary>
        /// enable MFA
        /// </summary>
        /// <value>enable MFA</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MfaPreference {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MfaPreference);
        }

        /// <summary>
        /// Returns true if MfaPreference instances are equal
        /// </summary>
        /// <param name="input">Instance of MfaPreference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MfaPreference input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.Method.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
