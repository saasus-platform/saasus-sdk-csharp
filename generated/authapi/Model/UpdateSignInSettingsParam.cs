/*
 * SaaSus Auth API Schema
 *
 * Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// UpdateSignInSettingsParam
    /// </summary>
    [DataContract(Name = "UpdateSignInSettingsParam")]
    public partial class UpdateSignInSettingsParam : IEquatable<UpdateSignInSettingsParam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateSignInSettingsParam" /> class.
        /// </summary>
        /// <param name="passwordPolicy">passwordPolicy.</param>
        /// <param name="deviceConfiguration">deviceConfiguration.</param>
        /// <param name="mfaConfiguration">mfaConfiguration.</param>
        /// <param name="recaptchaProps">recaptchaProps.</param>
        /// <param name="accountVerification">accountVerification.</param>
        /// <param name="selfRegist">selfRegist.</param>
        public UpdateSignInSettingsParam(PasswordPolicy passwordPolicy = default(PasswordPolicy), DeviceConfiguration deviceConfiguration = default(DeviceConfiguration), MfaConfiguration mfaConfiguration = default(MfaConfiguration), RecaptchaProps recaptchaProps = default(RecaptchaProps), AccountVerification accountVerification = default(AccountVerification), SelfRegist selfRegist = default(SelfRegist))
        {
            this.PasswordPolicy = passwordPolicy;
            this.DeviceConfiguration = deviceConfiguration;
            this.MfaConfiguration = mfaConfiguration;
            this.RecaptchaProps = recaptchaProps;
            this.AccountVerification = accountVerification;
            this.SelfRegist = selfRegist;
        }

        /// <summary>
        /// Gets or Sets PasswordPolicy
        /// </summary>
        [DataMember(Name = "password_policy", EmitDefaultValue = false)]
        public PasswordPolicy PasswordPolicy { get; set; }

        /// <summary>
        /// Gets or Sets DeviceConfiguration
        /// </summary>
        [DataMember(Name = "device_configuration", EmitDefaultValue = false)]
        public DeviceConfiguration DeviceConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets MfaConfiguration
        /// </summary>
        [DataMember(Name = "mfa_configuration", EmitDefaultValue = false)]
        public MfaConfiguration MfaConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets RecaptchaProps
        /// </summary>
        [DataMember(Name = "recaptcha_props", EmitDefaultValue = false)]
        public RecaptchaProps RecaptchaProps { get; set; }

        /// <summary>
        /// Gets or Sets AccountVerification
        /// </summary>
        [DataMember(Name = "account_verification", EmitDefaultValue = false)]
        public AccountVerification AccountVerification { get; set; }

        /// <summary>
        /// Gets or Sets SelfRegist
        /// </summary>
        [DataMember(Name = "self_regist", EmitDefaultValue = false)]
        public SelfRegist SelfRegist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateSignInSettingsParam {\n");
            sb.Append("  PasswordPolicy: ").Append(PasswordPolicy).Append("\n");
            sb.Append("  DeviceConfiguration: ").Append(DeviceConfiguration).Append("\n");
            sb.Append("  MfaConfiguration: ").Append(MfaConfiguration).Append("\n");
            sb.Append("  RecaptchaProps: ").Append(RecaptchaProps).Append("\n");
            sb.Append("  AccountVerification: ").Append(AccountVerification).Append("\n");
            sb.Append("  SelfRegist: ").Append(SelfRegist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateSignInSettingsParam);
        }

        /// <summary>
        /// Returns true if UpdateSignInSettingsParam instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateSignInSettingsParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateSignInSettingsParam input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PasswordPolicy == input.PasswordPolicy ||
                    (this.PasswordPolicy != null &&
                    this.PasswordPolicy.Equals(input.PasswordPolicy))
                ) && 
                (
                    this.DeviceConfiguration == input.DeviceConfiguration ||
                    (this.DeviceConfiguration != null &&
                    this.DeviceConfiguration.Equals(input.DeviceConfiguration))
                ) && 
                (
                    this.MfaConfiguration == input.MfaConfiguration ||
                    (this.MfaConfiguration != null &&
                    this.MfaConfiguration.Equals(input.MfaConfiguration))
                ) && 
                (
                    this.RecaptchaProps == input.RecaptchaProps ||
                    (this.RecaptchaProps != null &&
                    this.RecaptchaProps.Equals(input.RecaptchaProps))
                ) && 
                (
                    this.AccountVerification == input.AccountVerification ||
                    (this.AccountVerification != null &&
                    this.AccountVerification.Equals(input.AccountVerification))
                ) && 
                (
                    this.SelfRegist == input.SelfRegist ||
                    (this.SelfRegist != null &&
                    this.SelfRegist.Equals(input.SelfRegist))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PasswordPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.PasswordPolicy.GetHashCode();
                }
                if (this.DeviceConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceConfiguration.GetHashCode();
                }
                if (this.MfaConfiguration != null)
                {
                    hashCode = (hashCode * 59) + this.MfaConfiguration.GetHashCode();
                }
                if (this.RecaptchaProps != null)
                {
                    hashCode = (hashCode * 59) + this.RecaptchaProps.GetHashCode();
                }
                if (this.AccountVerification != null)
                {
                    hashCode = (hashCode * 59) + this.AccountVerification.GetHashCode();
                }
                if (this.SelfRegist != null)
                {
                    hashCode = (hashCode * 59) + this.SelfRegist.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
