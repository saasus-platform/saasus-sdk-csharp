/*
 * SaaSus Auth API Schema
 *
 * スキーマ
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = authapi.Client.OpenAPIDateConverter;

namespace authapi.Model
{
    /// <summary>
    /// UpdateNotificationMessagesParam
    /// </summary>
    [DataContract(Name = "UpdateNotificationMessagesParam")]
    public partial class UpdateNotificationMessagesParam : IEquatable<UpdateNotificationMessagesParam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateNotificationMessagesParam" /> class.
        /// </summary>
        /// <param name="signUp">signUp.</param>
        /// <param name="createUser">createUser.</param>
        /// <param name="resendCode">resendCode.</param>
        /// <param name="forgotPassword">forgotPassword.</param>
        /// <param name="updateUserAttribute">updateUserAttribute.</param>
        /// <param name="verifyUserAttribute">verifyUserAttribute.</param>
        /// <param name="authenticationMfa">authenticationMfa.</param>
        public UpdateNotificationMessagesParam(MessageTemplate signUp = default(MessageTemplate), MessageTemplate createUser = default(MessageTemplate), MessageTemplate resendCode = default(MessageTemplate), MessageTemplate forgotPassword = default(MessageTemplate), MessageTemplate updateUserAttribute = default(MessageTemplate), MessageTemplate verifyUserAttribute = default(MessageTemplate), MessageTemplate authenticationMfa = default(MessageTemplate))
        {
            this.SignUp = signUp;
            this.CreateUser = createUser;
            this.ResendCode = resendCode;
            this.ForgotPassword = forgotPassword;
            this.UpdateUserAttribute = updateUserAttribute;
            this.VerifyUserAttribute = verifyUserAttribute;
            this.AuthenticationMfa = authenticationMfa;
        }

        /// <summary>
        /// Gets or Sets SignUp
        /// </summary>
        [DataMember(Name = "sign_up", EmitDefaultValue = false)]
        public MessageTemplate SignUp { get; set; }

        /// <summary>
        /// Gets or Sets CreateUser
        /// </summary>
        [DataMember(Name = "create_user", EmitDefaultValue = false)]
        public MessageTemplate CreateUser { get; set; }

        /// <summary>
        /// Gets or Sets ResendCode
        /// </summary>
        [DataMember(Name = "resend_code", EmitDefaultValue = false)]
        public MessageTemplate ResendCode { get; set; }

        /// <summary>
        /// Gets or Sets ForgotPassword
        /// </summary>
        [DataMember(Name = "forgot_password", EmitDefaultValue = false)]
        public MessageTemplate ForgotPassword { get; set; }

        /// <summary>
        /// Gets or Sets UpdateUserAttribute
        /// </summary>
        [DataMember(Name = "update_user_attribute", EmitDefaultValue = false)]
        public MessageTemplate UpdateUserAttribute { get; set; }

        /// <summary>
        /// Gets or Sets VerifyUserAttribute
        /// </summary>
        [DataMember(Name = "verify_user_attribute", EmitDefaultValue = false)]
        public MessageTemplate VerifyUserAttribute { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationMfa
        /// </summary>
        [DataMember(Name = "authentication_mfa", EmitDefaultValue = false)]
        public MessageTemplate AuthenticationMfa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateNotificationMessagesParam {\n");
            sb.Append("  SignUp: ").Append(SignUp).Append("\n");
            sb.Append("  CreateUser: ").Append(CreateUser).Append("\n");
            sb.Append("  ResendCode: ").Append(ResendCode).Append("\n");
            sb.Append("  ForgotPassword: ").Append(ForgotPassword).Append("\n");
            sb.Append("  UpdateUserAttribute: ").Append(UpdateUserAttribute).Append("\n");
            sb.Append("  VerifyUserAttribute: ").Append(VerifyUserAttribute).Append("\n");
            sb.Append("  AuthenticationMfa: ").Append(AuthenticationMfa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateNotificationMessagesParam);
        }

        /// <summary>
        /// Returns true if UpdateNotificationMessagesParam instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateNotificationMessagesParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateNotificationMessagesParam input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SignUp == input.SignUp ||
                    (this.SignUp != null &&
                    this.SignUp.Equals(input.SignUp))
                ) && 
                (
                    this.CreateUser == input.CreateUser ||
                    (this.CreateUser != null &&
                    this.CreateUser.Equals(input.CreateUser))
                ) && 
                (
                    this.ResendCode == input.ResendCode ||
                    (this.ResendCode != null &&
                    this.ResendCode.Equals(input.ResendCode))
                ) && 
                (
                    this.ForgotPassword == input.ForgotPassword ||
                    (this.ForgotPassword != null &&
                    this.ForgotPassword.Equals(input.ForgotPassword))
                ) && 
                (
                    this.UpdateUserAttribute == input.UpdateUserAttribute ||
                    (this.UpdateUserAttribute != null &&
                    this.UpdateUserAttribute.Equals(input.UpdateUserAttribute))
                ) && 
                (
                    this.VerifyUserAttribute == input.VerifyUserAttribute ||
                    (this.VerifyUserAttribute != null &&
                    this.VerifyUserAttribute.Equals(input.VerifyUserAttribute))
                ) && 
                (
                    this.AuthenticationMfa == input.AuthenticationMfa ||
                    (this.AuthenticationMfa != null &&
                    this.AuthenticationMfa.Equals(input.AuthenticationMfa))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignUp != null)
                {
                    hashCode = (hashCode * 59) + this.SignUp.GetHashCode();
                }
                if (this.CreateUser != null)
                {
                    hashCode = (hashCode * 59) + this.CreateUser.GetHashCode();
                }
                if (this.ResendCode != null)
                {
                    hashCode = (hashCode * 59) + this.ResendCode.GetHashCode();
                }
                if (this.ForgotPassword != null)
                {
                    hashCode = (hashCode * 59) + this.ForgotPassword.GetHashCode();
                }
                if (this.UpdateUserAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.UpdateUserAttribute.GetHashCode();
                }
                if (this.VerifyUserAttribute != null)
                {
                    hashCode = (hashCode * 59) + this.VerifyUserAttribute.GetHashCode();
                }
                if (this.AuthenticationMfa != null)
                {
                    hashCode = (hashCode * 59) + this.AuthenticationMfa.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
